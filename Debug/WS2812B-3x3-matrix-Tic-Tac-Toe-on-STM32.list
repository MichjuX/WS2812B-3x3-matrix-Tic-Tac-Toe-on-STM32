
WS2812B-3x3-matrix-Tic-Tac-Toe-on-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006628  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  080067f0  080067f0  000167f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a18  08006a18  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006a18  08006a18  00016a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a20  08006a20  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a24  08006a24  00016a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe4  20000068  08006a90  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000104c  08006a90  0002104c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd22  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002101  00000000  00000000  0002ddfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  0002ff00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa7  00000000  00000000  00030ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c6e  00000000  00000000  00031747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010592  00000000  00000000  000543b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2df5  00000000  00000000  00064947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004380  00000000  00000000  0013773c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0013babc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000068 	.word	0x20000068
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080067d8 	.word	0x080067d8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000006c 	.word	0x2000006c
 8000204:	080067d8 	.word	0x080067d8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_uldivmod>:
 8000be4:	b953      	cbnz	r3, 8000bfc <__aeabi_uldivmod+0x18>
 8000be6:	b94a      	cbnz	r2, 8000bfc <__aeabi_uldivmod+0x18>
 8000be8:	2900      	cmp	r1, #0
 8000bea:	bf08      	it	eq
 8000bec:	2800      	cmpeq	r0, #0
 8000bee:	bf1c      	itt	ne
 8000bf0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf8:	f000 b970 	b.w	8000edc <__aeabi_idiv0>
 8000bfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c04:	f000 f806 	bl	8000c14 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9e08      	ldr	r6, [sp, #32]
 8000c1a:	460d      	mov	r5, r1
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	460f      	mov	r7, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14a      	bne.n	8000cba <__udivmoddi4+0xa6>
 8000c24:	428a      	cmp	r2, r1
 8000c26:	4694      	mov	ip, r2
 8000c28:	d965      	bls.n	8000cf6 <__udivmoddi4+0xe2>
 8000c2a:	fab2 f382 	clz	r3, r2
 8000c2e:	b143      	cbz	r3, 8000c42 <__udivmoddi4+0x2e>
 8000c30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c34:	f1c3 0220 	rsb	r2, r3, #32
 8000c38:	409f      	lsls	r7, r3
 8000c3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	409c      	lsls	r4, r3
 8000c42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c46:	fa1f f58c 	uxth.w	r5, ip
 8000c4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c4e:	0c22      	lsrs	r2, r4, #16
 8000c50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c58:	fb01 f005 	mul.w	r0, r1, r5
 8000c5c:	4290      	cmp	r0, r2
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x62>
 8000c60:	eb1c 0202 	adds.w	r2, ip, r2
 8000c64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c68:	f080 811c 	bcs.w	8000ea4 <__udivmoddi4+0x290>
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	f240 8119 	bls.w	8000ea4 <__udivmoddi4+0x290>
 8000c72:	3902      	subs	r1, #2
 8000c74:	4462      	add	r2, ip
 8000c76:	1a12      	subs	r2, r2, r0
 8000c78:	b2a4      	uxth	r4, r4
 8000c7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c86:	fb00 f505 	mul.w	r5, r0, r5
 8000c8a:	42a5      	cmp	r5, r4
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x90>
 8000c8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x294>
 8000c9a:	42a5      	cmp	r5, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x294>
 8000ca0:	4464      	add	r4, ip
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca8:	1b64      	subs	r4, r4, r5
 8000caa:	2100      	movs	r1, #0
 8000cac:	b11e      	cbz	r6, 8000cb6 <__udivmoddi4+0xa2>
 8000cae:	40dc      	lsrs	r4, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0xbc>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f000 80ed 	beq.w	8000e9e <__udivmoddi4+0x28a>
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	fab3 f183 	clz	r1, r3
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	d149      	bne.n	8000d6c <__udivmoddi4+0x158>
 8000cd8:	42ab      	cmp	r3, r5
 8000cda:	d302      	bcc.n	8000ce2 <__udivmoddi4+0xce>
 8000cdc:	4282      	cmp	r2, r0
 8000cde:	f200 80f8 	bhi.w	8000ed2 <__udivmoddi4+0x2be>
 8000ce2:	1a84      	subs	r4, r0, r2
 8000ce4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce8:	2001      	movs	r0, #1
 8000cea:	4617      	mov	r7, r2
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d0e2      	beq.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf4:	e7df      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf6:	b902      	cbnz	r2, 8000cfa <__udivmoddi4+0xe6>
 8000cf8:	deff      	udf	#255	; 0xff
 8000cfa:	fab2 f382 	clz	r3, r2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8090 	bne.w	8000e24 <__udivmoddi4+0x210>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2101      	movs	r1, #1
 8000d10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d14:	fb07 2015 	mls	r0, r7, r5, r2
 8000d18:	0c22      	lsrs	r2, r4, #16
 8000d1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d1e:	fb0e f005 	mul.w	r0, lr, r5
 8000d22:	4290      	cmp	r0, r2
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x124>
 8000d26:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x122>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2b8>
 8000d36:	4645      	mov	r5, r8
 8000d38:	1a12      	subs	r2, r2, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d40:	fb07 2210 	mls	r2, r7, r0, r2
 8000d44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x14e>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x14c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2c2>
 8000d60:	4610      	mov	r0, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6a:	e79f      	b.n	8000cac <__udivmoddi4+0x98>
 8000d6c:	f1c1 0720 	rsb	r7, r1, #32
 8000d70:	408b      	lsls	r3, r1
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d82:	40fd      	lsrs	r5, r7
 8000d84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d88:	4323      	orrs	r3, r4
 8000d8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	fb09 5518 	mls	r5, r9, r8, r5
 8000d96:	0c1c      	lsrs	r4, r3, #16
 8000d98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000da0:	42a5      	cmp	r5, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	fa00 f001 	lsl.w	r0, r0, r1
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b0>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2b4>
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2b4>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4464      	add	r4, ip
 8000dc4:	1b64      	subs	r4, r4, r5
 8000dc6:	b29d      	uxth	r5, r3
 8000dc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1da>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2ac>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2ac>
 8000dea:	3b02      	subs	r3, #2
 8000dec:	4464      	add	r4, ip
 8000dee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df2:	fba3 9502 	umull	r9, r5, r3, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	42ac      	cmp	r4, r5
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46ae      	mov	lr, r5
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x29c>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x298>
 8000e04:	b156      	cbz	r6, 8000e1c <__udivmoddi4+0x208>
 8000e06:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e12:	40ca      	lsrs	r2, r1
 8000e14:	40cc      	lsrs	r4, r1
 8000e16:	4317      	orrs	r7, r2
 8000e18:	e9c6 7400 	strd	r7, r4, [r6]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e24:	f1c3 0120 	rsb	r1, r3, #32
 8000e28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e30:	fa25 f101 	lsr.w	r1, r5, r1
 8000e34:	409d      	lsls	r5, r3
 8000e36:	432a      	orrs	r2, r5
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e44:	fb07 1510 	mls	r5, r7, r0, r1
 8000e48:	0c11      	lsrs	r1, r2, #16
 8000e4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e52:	428d      	cmp	r5, r1
 8000e54:	fa04 f403 	lsl.w	r4, r4, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x258>
 8000e5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e64:	428d      	cmp	r5, r1
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	1b49      	subs	r1, r1, r5
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e74:	fb07 1115 	mls	r1, r7, r5, r1
 8000e78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e80:	4291      	cmp	r1, r2
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x282>
 8000e84:	eb1c 0202 	adds.w	r2, ip, r2
 8000e88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2a8>
 8000e8e:	4291      	cmp	r1, r2
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2a8>
 8000e92:	3d02      	subs	r5, #2
 8000e94:	4462      	add	r2, ip
 8000e96:	1a52      	subs	r2, r2, r1
 8000e98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0xfc>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000ea4:	4639      	mov	r1, r7
 8000ea6:	e6e6      	b.n	8000c76 <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x90>
 8000eac:	4548      	cmp	r0, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f0>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f0>
 8000ebc:	4645      	mov	r5, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x282>
 8000ec0:	462b      	mov	r3, r5
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1da>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x258>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b0>
 8000ecc:	3d02      	subs	r5, #2
 8000ece:	4462      	add	r2, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x124>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e70a      	b.n	8000cec <__udivmoddi4+0xd8>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x14e>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b0a      	cmp	r3, #10
 8000eec:	d109      	bne.n	8000f02 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 8000eee:	230d      	movs	r3, #13
 8000ef0:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000ef2:	f107 010f 	add.w	r1, r7, #15
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	2201      	movs	r2, #1
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <__io_putchar+0x3c>)
 8000efe:	f003 fb06 	bl	800450e <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f02:	1d39      	adds	r1, r7, #4
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4804      	ldr	r0, [pc, #16]	; (8000f1c <__io_putchar+0x3c>)
 8000f0c:	f003 faff 	bl	800450e <HAL_UART_Transmit>
    return 1;
 8000f10:	2301      	movs	r3, #1
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000012c 	.word	0x2000012c

08000f20 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4]; // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000f2c:	f002 fce4 	bl	80038f8 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000084 	.word	0x20000084
 8000f44:	20000350 	.word	0x20000350

08000f48 <Set_LED>:


void Set_LED (int LEDnum, int Red, int Green, int Blue){
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	b2d9      	uxtb	r1, r3
 8000f5a:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <Set_LED+0x58>)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	b2d9      	uxtb	r1, r3
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <Set_LED+0x58>)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	460a      	mov	r2, r1
 8000f70:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	b2d9      	uxtb	r1, r3
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <Set_LED+0x58>)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	460a      	mov	r2, r1
 8000f80:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2d9      	uxtb	r1, r3
 8000f86:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <Set_LED+0x58>)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	460a      	mov	r2, r1
 8000f90:	70da      	strb	r2, [r3, #3]
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000170 	.word	0x20000170
 8000fa4:	00000000 	.word	0x00000000

08000fa8 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness){ // 0-45
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness =45;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b2d      	cmp	r3, #45	; 0x2d
 8000fb4:	dd01      	ble.n	8000fba <Set_Brightness+0x12>
 8000fb6:	232d      	movs	r3, #45	; 0x2d
 8000fb8:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++){
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e060      	b.n	8001082 <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 8000fc0:	4a37      	ldr	r2, [pc, #220]	; (80010a0 <Set_Brightness+0xf8>)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000fc8:	4a36      	ldr	r2, [pc, #216]	; (80010a4 <Set_Brightness+0xfc>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++){
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	e04f      	b.n	8001076 <Set_Brightness+0xce>
			float angle = 90-brightness;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000fdc:	ee07 3a90 	vmov	s15, r3
 8000fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe4:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f7ff fa71 	bl	80004d0 <__aeabi_f2d>
 8000fee:	a32a      	add	r3, pc, #168	; (adr r3, 8001098 <Set_Brightness+0xf0>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff fac4 	bl	8000580 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <Set_Brightness+0x100>)
 8001006:	f7ff fbe5 	bl	80007d4 <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fd97 	bl	8000b44 <__aeabi_d2f>
 8001016:	4603      	mov	r3, r0
 8001018:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 800101a:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <Set_Brightness+0xf8>)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	441a      	add	r2, r3
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fa3f 	bl	80004ac <__aeabi_i2d>
 800102e:	4604      	mov	r4, r0
 8001030:	460d      	mov	r5, r1
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff fa4c 	bl	80004d0 <__aeabi_f2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b10 	vmov	d0, r2, r3
 8001040:	f004 fb2a 	bl	8005698 <tan>
 8001044:	ec53 2b10 	vmov	r2, r3, d0
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff fbc2 	bl	80007d4 <__aeabi_ddiv>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd54 	bl	8000b04 <__aeabi_d2uiz>
 800105c:	4603      	mov	r3, r0
 800105e:	b2d9      	uxtb	r1, r3
 8001060:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <Set_Brightness+0xfc>)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	441a      	add	r2, r3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4413      	add	r3, r2
 800106c:	460a      	mov	r2, r1
 800106e:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++){
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	3301      	adds	r3, #1
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	2b03      	cmp	r3, #3
 800107a:	ddac      	ble.n	8000fd6 <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++){
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2b3b      	cmp	r3, #59	; 0x3b
 8001086:	dd9b      	ble.n	8000fc0 <Set_Brightness+0x18>
		}
	}
#endif
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bdb0      	pop	{r4, r5, r7, pc}
 8001092:	bf00      	nop
 8001094:	f3af 8000 	nop.w
 8001098:	53c8d4f1 	.word	0x53c8d4f1
 800109c:	400921fb 	.word	0x400921fb
 80010a0:	20000170 	.word	0x20000170
 80010a4:	20000260 	.word	0x20000260
 80010a8:	40668000 	.word	0x40668000

080010ac <WS2812_Send>:


uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
	Set_Brightness(5);
 80010b2:	2005      	movs	r0, #5
 80010b4:	f7ff ff78 	bl	8000fa8 <Set_Brightness>
	uint32_t indx=0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	e036      	b.n	8001130 <WS2812_Send+0x84>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 80010c2:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <WS2812_Send+0xd4>)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	041a      	lsls	r2, r3, #16
 80010ce:	492c      	ldr	r1, [pc, #176]	; (8001180 <WS2812_Send+0xd4>)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	789b      	ldrb	r3, [r3, #2]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	431a      	orrs	r2, r3
 80010dc:	4928      	ldr	r1, [pc, #160]	; (8001180 <WS2812_Send+0xd4>)
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	78db      	ldrb	r3, [r3, #3]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80010ea:	2317      	movs	r3, #23
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e019      	b.n	8001124 <WS2812_Send+0x78>
		{
			if (color&(1<<i))
 80010f0:	2201      	movs	r2, #1
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <WS2812_Send+0x62>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8001102:	4a20      	ldr	r2, [pc, #128]	; (8001184 <WS2812_Send+0xd8>)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	213c      	movs	r1, #60	; 0x3c
 8001108:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800110c:	e004      	b.n	8001118 <WS2812_Send+0x6c>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 800110e:	4a1d      	ldr	r2, [pc, #116]	; (8001184 <WS2812_Send+0xd8>)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	211e      	movs	r1, #30
 8001114:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3301      	adds	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3b01      	subs	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	dae2      	bge.n	80010f0 <WS2812_Send+0x44>
	for (int i= 0; i<MAX_LED; i++)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	3301      	adds	r3, #1
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2b3b      	cmp	r3, #59	; 0x3b
 8001134:	ddc5      	ble.n	80010c2 <WS2812_Send+0x16>
		}

	}

	for (int i=0; i<50; i++)
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	e00a      	b.n	8001152 <WS2812_Send+0xa6>
	{
		pwmData[indx] = 0;
 800113c:	4a11      	ldr	r2, [pc, #68]	; (8001184 <WS2812_Send+0xd8>)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2100      	movs	r1, #0
 8001142:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3301      	adds	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b31      	cmp	r3, #49	; 0x31
 8001156:	ddf1      	ble.n	800113c <WS2812_Send+0x90>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4a09      	ldr	r2, [pc, #36]	; (8001184 <WS2812_Send+0xd8>)
 800115e:	2100      	movs	r1, #0
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <WS2812_Send+0xdc>)
 8001162:	f002 fa01 	bl	8003568 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8001166:	bf00      	nop
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <WS2812_Send+0xe0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0fb      	beq.n	8001168 <WS2812_Send+0xbc>
	datasentflag = 0;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <WS2812_Send+0xe0>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000260 	.word	0x20000260
 8001184:	20000354 	.word	0x20000354
 8001188:	20000084 	.word	0x20000084
 800118c:	20000350 	.word	0x20000350

08001190 <handleDirection>:

//extern void HAL_UART_Receive(void *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);
//extern void Set_LED(int index, uint8_t R, uint8_t G, uint8_t B);
//extern void WS2812_Send();

void handleDirection(char direction, int *currentLED) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
    // Gaszenie poprzedniej diody
    if (*currentLED == 3) {
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d106      	bne.n	80011b2 <handleDirection+0x22>
        Set_LED(5, 0, 0, 0);
 80011a4:	2300      	movs	r3, #0
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2005      	movs	r0, #5
 80011ac:	f7ff fecc 	bl	8000f48 <Set_LED>
 80011b0:	e011      	b.n	80011d6 <handleDirection+0x46>
    } else if (*currentLED == 5) {
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b05      	cmp	r3, #5
 80011b8:	d106      	bne.n	80011c8 <handleDirection+0x38>
        Set_LED(3, 0, 0, 0);
 80011ba:	2300      	movs	r3, #0
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2003      	movs	r0, #3
 80011c2:	f7ff fec1 	bl	8000f48 <Set_LED>
 80011c6:	e006      	b.n	80011d6 <handleDirection+0x46>
    } else {
        Set_LED(*currentLED, 0, 0, 0);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	2300      	movs	r3, #0
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	f7ff feb9 	bl	8000f48 <Set_LED>
    }

    // Aktualizacja bieżącej diody w zależności od kierunku
    switch (direction) {
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	3b61      	subs	r3, #97	; 0x61
 80011da:	2b16      	cmp	r3, #22
 80011dc:	d871      	bhi.n	80012c2 <handleDirection+0x132>
 80011de:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <handleDirection+0x54>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	08001261 	.word	0x08001261
 80011e8:	080012c3 	.word	0x080012c3
 80011ec:	080012c3 	.word	0x080012c3
 80011f0:	080012a3 	.word	0x080012a3
 80011f4:	080012c3 	.word	0x080012c3
 80011f8:	080012c3 	.word	0x080012c3
 80011fc:	080012c3 	.word	0x080012c3
 8001200:	080012c3 	.word	0x080012c3
 8001204:	080012c3 	.word	0x080012c3
 8001208:	080012c3 	.word	0x080012c3
 800120c:	080012c3 	.word	0x080012c3
 8001210:	080012c3 	.word	0x080012c3
 8001214:	080012c3 	.word	0x080012c3
 8001218:	080012c3 	.word	0x080012c3
 800121c:	080012c3 	.word	0x080012c3
 8001220:	080012c3 	.word	0x080012c3
 8001224:	080012c3 	.word	0x080012c3
 8001228:	080012c3 	.word	0x080012c3
 800122c:	08001283 	.word	0x08001283
 8001230:	080012c3 	.word	0x080012c3
 8001234:	080012c3 	.word	0x080012c3
 8001238:	080012c3 	.word	0x080012c3
 800123c:	08001241 	.word	0x08001241
        case 'w':
            *currentLED = (*currentLED - 3 + 9) % 9;  // Dioda wyższa
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	1d99      	adds	r1, r3, #6
 8001246:	4b31      	ldr	r3, [pc, #196]	; (800130c <handleDirection+0x17c>)
 8001248:	fb83 2301 	smull	r2, r3, r3, r1
 800124c:	105a      	asrs	r2, r3, #1
 800124e:	17cb      	asrs	r3, r1, #31
 8001250:	1ad2      	subs	r2, r2, r3
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	1aca      	subs	r2, r1, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	601a      	str	r2, [r3, #0]
            break;
 800125e:	e031      	b.n	80012c4 <handleDirection+0x134>
        case 'a':
            *currentLED = (*currentLED - 1 + 9) % 9;  // Dioda po lewej
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f103 0108 	add.w	r1, r3, #8
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <handleDirection+0x17c>)
 800126a:	fb83 2301 	smull	r2, r3, r3, r1
 800126e:	105a      	asrs	r2, r3, #1
 8001270:	17cb      	asrs	r3, r1, #31
 8001272:	1ad2      	subs	r2, r2, r3
 8001274:	4613      	mov	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4413      	add	r3, r2
 800127a:	1aca      	subs	r2, r1, r3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	601a      	str	r2, [r3, #0]
            break;
 8001280:	e020      	b.n	80012c4 <handleDirection+0x134>
        case 's':
            *currentLED = (*currentLED + 3) % 9;  // Dioda niżej
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	1cd9      	adds	r1, r3, #3
 8001288:	4b20      	ldr	r3, [pc, #128]	; (800130c <handleDirection+0x17c>)
 800128a:	fb83 2301 	smull	r2, r3, r3, r1
 800128e:	105a      	asrs	r2, r3, #1
 8001290:	17cb      	asrs	r3, r1, #31
 8001292:	1ad2      	subs	r2, r2, r3
 8001294:	4613      	mov	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4413      	add	r3, r2
 800129a:	1aca      	subs	r2, r1, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	601a      	str	r2, [r3, #0]
            break;
 80012a0:	e010      	b.n	80012c4 <handleDirection+0x134>
        case 'd':
            *currentLED = (*currentLED + 1) % 9;  // Dioda po prawej
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1c59      	adds	r1, r3, #1
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <handleDirection+0x17c>)
 80012aa:	fb83 2301 	smull	r2, r3, r3, r1
 80012ae:	105a      	asrs	r2, r3, #1
 80012b0:	17cb      	asrs	r3, r1, #31
 80012b2:	1ad2      	subs	r2, r2, r3
 80012b4:	4613      	mov	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4413      	add	r3, r2
 80012ba:	1aca      	subs	r2, r1, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	601a      	str	r2, [r3, #0]
            break;
 80012c0:	e000      	b.n	80012c4 <handleDirection+0x134>
        default:
            // Nieznany kierunek, pozostaw bieżącą diodę bez zmian
            break;
 80012c2:	bf00      	nop
    }

    // Podświetlenie nowej diody na przykład kolorem białym (255, 255, 255)
    if (*currentLED == 3) {
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d106      	bne.n	80012da <handleDirection+0x14a>
        Set_LED(5, 15, 15, 15);
 80012cc:	230f      	movs	r3, #15
 80012ce:	220f      	movs	r2, #15
 80012d0:	210f      	movs	r1, #15
 80012d2:	2005      	movs	r0, #5
 80012d4:	f7ff fe38 	bl	8000f48 <Set_LED>
 80012d8:	e011      	b.n	80012fe <handleDirection+0x16e>
    } else if (*currentLED == 5) {
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b05      	cmp	r3, #5
 80012e0:	d106      	bne.n	80012f0 <handleDirection+0x160>
        Set_LED(3, 15, 15, 15);
 80012e2:	230f      	movs	r3, #15
 80012e4:	220f      	movs	r2, #15
 80012e6:	210f      	movs	r1, #15
 80012e8:	2003      	movs	r0, #3
 80012ea:	f7ff fe2d 	bl	8000f48 <Set_LED>
 80012ee:	e006      	b.n	80012fe <handleDirection+0x16e>
    } else {
        Set_LED(*currentLED, 15, 15, 15);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	230f      	movs	r3, #15
 80012f6:	220f      	movs	r2, #15
 80012f8:	210f      	movs	r1, #15
 80012fa:	f7ff fe25 	bl	8000f48 <Set_LED>
//            WS2812_Send();
//            HAL_Delay(500);  // Bez światła przez 500 ms
//        }

    // Wysłanie danych do diod LED
    WS2812_Send();
 80012fe:	f7ff fed5 	bl	80010ac <WS2812_Send>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	38e38e39 	.word	0x38e38e39

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b090      	sub	sp, #64	; 0x40
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f000 fc21 	bl	8001b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f8a7 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f000 f9dd 	bl	80016dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001322:	f000 f9bb 	bl	800169c <MX_DMA_Init>
  MX_TIM1_Init();
 8001326:	f000 f90d 	bl	8001544 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800132a:	f000 f98d 	bl	8001648 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
//  int color=0;
//  ws2812b_init();
//  ws2812b_set_color(1, 255, 0, 255);
//  ws2812b_update();
  int lednum=0;
 800132e:	2300      	movs	r3, #0
 8001330:	63bb      	str	r3, [r7, #56]	; 0x38
  int previous=59;
 8001332:	233b      	movs	r3, #59	; 0x3b
 8001334:	637b      	str	r3, [r7, #52]	; 0x34

  int currentLED = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  int LEDS[] = {0, 1, 2, 5, 4, 3, 6, 7, 8}; // przeadresowanie ledów w związku z ich spiralnym ułożeniem
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <main+0x148>)
 800133c:	f107 0408 	add.w	r4, r7, #8
 8001340:	461d      	mov	r5, r3
 8001342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134a:	682b      	ldr	r3, [r5, #0]
 800134c:	6023      	str	r3, [r4, #0]
  int counter=0;
 800134e:	2300      	movs	r3, #0
 8001350:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (1){
  	  uint8_t value;
  	  HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, &value, 1, 0);
 8001352:	1df9      	adds	r1, r7, #7
 8001354:	2300      	movs	r3, #0
 8001356:	2201      	movs	r2, #1
 8001358:	4840      	ldr	r0, [pc, #256]	; (800145c <main+0x14c>)
 800135a:	f003 f96a 	bl	8004632 <HAL_UART_Receive>
 800135e:	4603      	mov	r3, r0
 8001360:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  	        if (status == HAL_OK) {
 8001364:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001368:	2b00      	cmp	r3, #0
 800136a:	d12f      	bne.n	80013cc <main+0xbc>
  	            // Data received successfully
  	            // Process the received data
  	        	printf("Pressed!\n");
 800136c:	483c      	ldr	r0, [pc, #240]	; (8001460 <main+0x150>)
 800136e:	f003 fdfb 	bl	8004f68 <puts>
  	        	WS2812_Send();
 8001372:	f7ff fe9b 	bl	80010ac <WS2812_Send>
  	        	HAL_Delay(100);
 8001376:	2064      	movs	r0, #100	; 0x64
 8001378:	f000 fc62 	bl	8001c40 <HAL_Delay>
  	        	  	          // Sprawdzenie otrzymanego znaku
  	        	switch (value) {
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	3b61      	subs	r3, #97	; 0x61
 8001380:	2b16      	cmp	r3, #22
 8001382:	bf8c      	ite	hi
 8001384:	2201      	movhi	r2, #1
 8001386:	2200      	movls	r2, #0
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	2a00      	cmp	r2, #0
 800138c:	d161      	bne.n	8001452 <main+0x142>
 800138e:	4a35      	ldr	r2, [pc, #212]	; (8001464 <main+0x154>)
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf14      	ite	ne
 800139c:	2301      	movne	r3, #1
 800139e:	2300      	moveq	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d055      	beq.n	8001452 <main+0x142>
  	        		case 'w':
  	        	  	case 'a':
  	        	  	case 's':
  	        	  	case 'd':
  	        	  	// Obsługa kierunku
  	        	  		Set_LED(LEDS[currentLED], 0, 0, 0);
 80013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	3340      	adds	r3, #64	; 0x40
 80013ac:	443b      	add	r3, r7
 80013ae:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80013b2:	2300      	movs	r3, #0
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	f7ff fdc6 	bl	8000f48 <Set_LED>
						handleDirection(value, &currentLED);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fee3 	bl	8001190 <handleDirection>
						break;
 80013ca:	e043      	b.n	8001454 <main+0x144>
  	        	  		break;
  	        	}
  	        } else {
  	            // No data received within the timeout period
  	            // Handle the case accordingly
  	        	if (counter > 10000) {
 80013cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80013d2:	4293      	cmp	r3, r2
 80013d4:	dd02      	ble.n	80013dc <main+0xcc>
  	        	    counter = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013da:	e002      	b.n	80013e2 <main+0xd2>
  	        	} else {
  	        	    counter++;
 80013dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013de:	3301      	adds	r3, #1
 80013e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  	        	}

  	        	if (counter % 10 == 0) {
 80013e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013e4:	4b20      	ldr	r3, [pc, #128]	; (8001468 <main+0x158>)
 80013e6:	fb83 2301 	smull	r2, r3, r3, r1
 80013ea:	109a      	asrs	r2, r3, #2
 80013ec:	17cb      	asrs	r3, r1, #31
 80013ee:	1ad2      	subs	r2, r2, r3
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	1aca      	subs	r2, r1, r3
 80013fa:	2a00      	cmp	r2, #0
 80013fc:	d10a      	bne.n	8001414 <main+0x104>
  	        	    Set_LED(LEDS[currentLED], 0, 0, 0);
 80013fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	3340      	adds	r3, #64	; 0x40
 8001404:	443b      	add	r3, r7
 8001406:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800140a:	2300      	movs	r3, #0
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	f7ff fd9a 	bl	8000f48 <Set_LED>
  	        	}

  	        	if (counter % 20 == 0) {
 8001414:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <main+0x158>)
 8001418:	fb83 2301 	smull	r2, r3, r3, r1
 800141c:	10da      	asrs	r2, r3, #3
 800141e:	17cb      	asrs	r3, r1, #31
 8001420:	1ad2      	subs	r2, r2, r3
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	1aca      	subs	r2, r1, r3
 800142c:	2a00      	cmp	r2, #0
 800142e:	d10a      	bne.n	8001446 <main+0x136>
  	        	    Set_LED(LEDS[currentLED], 15, 15, 15);
 8001430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	3340      	adds	r3, #64	; 0x40
 8001436:	443b      	add	r3, r7
 8001438:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800143c:	230f      	movs	r3, #15
 800143e:	220f      	movs	r2, #15
 8001440:	210f      	movs	r1, #15
 8001442:	f7ff fd81 	bl	8000f48 <Set_LED>
  	        	}

//  	        	printf("%d", counter);
  	        	WS2812_Send();
 8001446:	f7ff fe31 	bl	80010ac <WS2812_Send>
  	        	HAL_Delay(1);
 800144a:	2001      	movs	r0, #1
 800144c:	f000 fbf8 	bl	8001c40 <HAL_Delay>
 8001450:	e77f      	b.n	8001352 <main+0x42>
  	        	  		break;
 8001452:	bf00      	nop
  while (1){
 8001454:	e77d      	b.n	8001352 <main+0x42>
 8001456:	bf00      	nop
 8001458:	080067fc 	.word	0x080067fc
 800145c:	2000012c 	.word	0x2000012c
 8001460:	080067f0 	.word	0x080067f0
 8001464:	00440009 	.word	0x00440009
 8001468:	66666667 	.word	0x66666667

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b094      	sub	sp, #80	; 0x50
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	2234      	movs	r2, #52	; 0x34
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fe54 	bl	8005128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <SystemClock_Config+0xd0>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a28      	ldr	r2, [pc, #160]	; (800153c <SystemClock_Config+0xd0>)
 800149a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
 80014a0:	4b26      	ldr	r3, [pc, #152]	; (800153c <SystemClock_Config+0xd0>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4b23      	ldr	r3, [pc, #140]	; (8001540 <SystemClock_Config+0xd4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014b8:	4a21      	ldr	r2, [pc, #132]	; (8001540 <SystemClock_Config+0xd4>)
 80014ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <SystemClock_Config+0xd4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d6:	2302      	movs	r3, #2
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014e0:	2304      	movs	r3, #4
 80014e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014e4:	2348      	movs	r3, #72	; 0x48
 80014e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e8:	2302      	movs	r3, #2
 80014ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4618      	mov	r0, r3
 80014fa:	f001 fd47 	bl	8002f8c <HAL_RCC_OscConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001504:	f000 f912 	bl	800172c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001508:	230f      	movs	r3, #15
 800150a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150c:	2302      	movs	r3, #2
 800150e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001518:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	2102      	movs	r1, #2
 8001524:	4618      	mov	r0, r3
 8001526:	f001 f9e7 	bl	80028f8 <HAL_RCC_ClockConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001530:	f000 f8fc 	bl	800172c <Error_Handler>
  }
}
 8001534:	bf00      	nop
 8001536:	3750      	adds	r7, #80	; 0x50
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000

08001544 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b092      	sub	sp, #72	; 0x48
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
 8001564:	615a      	str	r2, [r3, #20]
 8001566:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2220      	movs	r2, #32
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fdda 	bl	8005128 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001574:	4b32      	ldr	r3, [pc, #200]	; (8001640 <MX_TIM1_Init+0xfc>)
 8001576:	4a33      	ldr	r2, [pc, #204]	; (8001644 <MX_TIM1_Init+0x100>)
 8001578:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <MX_TIM1_Init+0xfc>)
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <MX_TIM1_Init+0xfc>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001586:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <MX_TIM1_Init+0xfc>)
 8001588:	2259      	movs	r2, #89	; 0x59
 800158a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158c:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <MX_TIM1_Init+0xfc>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <MX_TIM1_Init+0xfc>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <MX_TIM1_Init+0xfc>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800159e:	4828      	ldr	r0, [pc, #160]	; (8001640 <MX_TIM1_Init+0xfc>)
 80015a0:	f001 ff92 	bl	80034c8 <HAL_TIM_PWM_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80015aa:	f000 f8bf 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ba:	4619      	mov	r1, r3
 80015bc:	4820      	ldr	r0, [pc, #128]	; (8001640 <MX_TIM1_Init+0xfc>)
 80015be:	f002 fe8b 	bl	80042d8 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80015c8:	f000 f8b0 	bl	800172c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015cc:	2360      	movs	r3, #96	; 0x60
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	4813      	ldr	r0, [pc, #76]	; (8001640 <MX_TIM1_Init+0xfc>)
 80015f2:	f002 fa53 	bl	8003a9c <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80015fc:	f000 f896 	bl	800172c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4807      	ldr	r0, [pc, #28]	; (8001640 <MX_TIM1_Init+0xfc>)
 8001624:	f002 fed4 	bl	80043d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800162e:	f000 f87d 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001632:	4803      	ldr	r0, [pc, #12]	; (8001640 <MX_TIM1_Init+0xfc>)
 8001634:	f000 f8fc 	bl	8001830 <HAL_TIM_MspPostInit>

}
 8001638:	bf00      	nop
 800163a:	3748      	adds	r7, #72	; 0x48
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000084 	.word	0x20000084
 8001644:	40010000 	.word	0x40010000

08001648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <MX_USART2_UART_Init+0x50>)
 8001650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 8001654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 8001680:	f002 fef8 	bl	8004474 <HAL_UART_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800168a:	f000 f84f 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000012c 	.word	0x2000012c
 8001698:	40004400 	.word	0x40004400

0800169c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_DMA_Init+0x3c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <MX_DMA_Init+0x3c>)
 80016ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_DMA_Init+0x3c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2039      	movs	r0, #57	; 0x39
 80016c4:	f000 fbbb 	bl	8001e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80016c8:	2039      	movs	r0, #57	; 0x39
 80016ca:	f000 fbd4 	bl	8001e76 <HAL_NVIC_EnableIRQ>

}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800

080016dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <MX_GPIO_Init+0x4c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <MX_GPIO_Init+0x4c>)
 80016ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <MX_GPIO_Init+0x4c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_GPIO_Init+0x4c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <MX_GPIO_Init+0x4c>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_GPIO_Init+0x4c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001734:	e7fe      	b.n	8001734 <Error_Handler+0x8>
	...

08001738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <HAL_MspInit+0x4c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <HAL_MspInit+0x4c>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_MspInit+0x4c>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a08      	ldr	r2, [pc, #32]	; (8001784 <HAL_MspInit+0x4c>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a22      	ldr	r2, [pc, #136]	; (8001820 <HAL_TIM_PWM_MspInit+0x98>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d13d      	bne.n	8001816 <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_TIM_PWM_MspInit+0x9c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a20      	ldr	r2, [pc, #128]	; (8001824 <HAL_TIM_PWM_MspInit+0x9c>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <HAL_TIM_PWM_MspInit+0x9c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80017b6:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <HAL_TIM_PWM_MspInit+0xa0>)
 80017b8:	4a1c      	ldr	r2, [pc, #112]	; (800182c <HAL_TIM_PWM_MspInit+0xa4>)
 80017ba:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_TIM_PWM_MspInit+0xa0>)
 80017be:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80017c2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_TIM_PWM_MspInit+0xa0>)
 80017c6:	2240      	movs	r2, #64	; 0x40
 80017c8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_TIM_PWM_MspInit+0xa0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_TIM_PWM_MspInit+0xa0>)
 80017d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_TIM_PWM_MspInit+0xa0>)
 80017da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017de:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_TIM_PWM_MspInit+0xa0>)
 80017e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HAL_TIM_PWM_MspInit+0xa0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_TIM_PWM_MspInit+0xa0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_TIM_PWM_MspInit+0xa0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80017fa:	480b      	ldr	r0, [pc, #44]	; (8001828 <HAL_TIM_PWM_MspInit+0xa0>)
 80017fc:	f000 fb56 	bl	8001eac <HAL_DMA_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8001806:	f7ff ff91 	bl	800172c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a06      	ldr	r2, [pc, #24]	; (8001828 <HAL_TIM_PWM_MspInit+0xa0>)
 800180e:	625a      	str	r2, [r3, #36]	; 0x24
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <HAL_TIM_PWM_MspInit+0xa0>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40010000 	.word	0x40010000
 8001824:	40023800 	.word	0x40023800
 8001828:	200000cc 	.word	0x200000cc
 800182c:	40026428 	.word	0x40026428

08001830 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a12      	ldr	r2, [pc, #72]	; (8001898 <HAL_TIM_MspPostInit+0x68>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d11e      	bne.n	8001890 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_TIM_MspPostInit+0x6c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_TIM_MspPostInit+0x6c>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_TIM_MspPostInit+0x6c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800186e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001872:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001880:	2301      	movs	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	4619      	mov	r1, r3
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_TIM_MspPostInit+0x70>)
 800188c:	f000 fea0 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40010000 	.word	0x40010000
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_UART_MspInit+0x84>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12b      	bne.n	800191e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_UART_MspInit+0x88>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_UART_MspInit+0x88>)
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_UART_MspInit+0x88>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_UART_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_UART_MspInit+0x88>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_UART_MspInit+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018fe:	230c      	movs	r3, #12
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800190e:	2307      	movs	r3, #7
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_UART_MspInit+0x8c>)
 800191a:	f000 fe59 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40004400 	.word	0x40004400
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 f93e 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <DMA2_Stream1_IRQHandler+0x10>)
 800198e:	f000 fbb5 	bl	80020fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200000cc 	.word	0x200000cc

0800199c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e00a      	b.n	80019c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ae:	f3af 8000 	nop.w
 80019b2:	4601      	mov	r1, r0
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	b2ca      	uxtb	r2, r1
 80019bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf0      	blt.n	80019ae <_read+0x12>
  }

  return len;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e009      	b.n	80019fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	60ba      	str	r2, [r7, #8]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fa75 	bl	8000ee0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbf1      	blt.n	80019e8 <_write+0x12>
  }
  return len;
 8001a04:	687b      	ldr	r3, [r7, #4]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_close>:

int _close(int file)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a36:	605a      	str	r2, [r3, #4]
  return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_isatty>:

int _isatty(int file)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a80:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <_sbrk+0x5c>)
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <_sbrk+0x60>)
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <_sbrk+0x64>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <_sbrk+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d207      	bcs.n	8001ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa8:	f003 fb8c 	bl	80051c4 <__errno>
 8001aac:	4603      	mov	r3, r0
 8001aae:	220c      	movs	r2, #12
 8001ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	e009      	b.n	8001acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a05      	ldr	r2, [pc, #20]	; (8001adc <_sbrk+0x64>)
 8001ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20020000 	.word	0x20020000
 8001ad8:	00000400 	.word	0x00000400
 8001adc:	20000ef8 	.word	0x20000ef8
 8001ae0:	20001050 	.word	0x20001050

08001ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <SystemInit+0x20>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <SystemInit+0x20>)
 8001af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b0e:	490e      	ldr	r1, [pc, #56]	; (8001b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b10:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b24:	4c0b      	ldr	r4, [pc, #44]	; (8001b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b32:	f7ff ffd7 	bl	8001ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f003 fb4b 	bl	80051d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7ff fbe9 	bl	8001310 <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b4c:	08006a28 	.word	0x08006a28
  ldr r2, =_sbss
 8001b50:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b54:	2000104c 	.word	0x2000104c

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <HAL_Init+0x40>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_Init+0x40>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <HAL_Init+0x40>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f94f 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	200f      	movs	r0, #15
 8001b8c:	f000 f808 	bl	8001ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fdd2 	bl	8001738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_InitTick+0x54>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_InitTick+0x58>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f967 	bl	8001e92 <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00e      	b.n	8001bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d80a      	bhi.n	8001bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f000 f92f 	bl	8001e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be0:	4a06      	ldr	r2, [pc, #24]	; (8001bfc <HAL_InitTick+0x5c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x20>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x24>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_IncTick+0x24>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000008 	.word	0x20000008
 8001c24:	20000efc 	.word	0x20000efc

08001c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_GetTick+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000efc 	.word	0x20000efc

08001c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff ffee 	bl	8001c28 <HAL_GetTick>
 8001c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d005      	beq.n	8001c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_Delay+0x44>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c66:	bf00      	nop
 8001c68:	f7ff ffde 	bl	8001c28 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d8f7      	bhi.n	8001c68 <HAL_Delay+0x28>
  {
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000008 	.word	0x20000008

08001c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cba:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	60d3      	str	r3, [r2, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db0b      	blt.n	8001d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4907      	ldr	r1, [pc, #28]	; (8001d24 <__NVIC_EnableIRQ+0x38>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	; (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df4:	d301      	bcc.n	8001dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00f      	b.n	8001e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <SysTick_Config+0x40>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e02:	210f      	movs	r1, #15
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f7ff ff8e 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <SysTick_Config+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e12:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <SysTick_Config+0x40>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff29 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff3e 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff8e 	bl	8001d7c <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5d 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff31 	bl	8001cec <__NVIC_EnableIRQ>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffa2 	bl	8001de4 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff feb6 	bl	8001c28 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e099      	b.n	8001ffc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee8:	e00f      	b.n	8001f0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eea:	f7ff fe9d 	bl	8001c28 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d908      	bls.n	8001f0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2203      	movs	r2, #3
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e078      	b.n	8001ffc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1e8      	bne.n	8001eea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4b38      	ldr	r3, [pc, #224]	; (8002004 <HAL_DMA_Init+0x158>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d107      	bne.n	8001f74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f023 0307 	bic.w	r3, r3, #7
 8001f8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d117      	bne.n	8001fce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00e      	beq.n	8001fce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fa91 	bl	80024d8 <DMA_CheckFifoParam>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2240      	movs	r2, #64	; 0x40
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e016      	b.n	8001ffc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fa48 	bl	800246c <DMA_CalcBaseAndBitshift>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	223f      	movs	r2, #63	; 0x3f
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	f010803f 	.word	0xf010803f

08002008 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_DMA_Start_IT+0x26>
 800202a:	2302      	movs	r3, #2
 800202c:	e040      	b.n	80020b0 <HAL_DMA_Start_IT+0xa8>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d12f      	bne.n	80020a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2202      	movs	r2, #2
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f9da 	bl	8002410 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	223f      	movs	r2, #63	; 0x3f
 8002062:	409a      	lsls	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0216 	orr.w	r2, r2, #22
 8002076:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0208 	orr.w	r2, r2, #8
 800208e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0201 	orr.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e005      	b.n	80020ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
 80020ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d004      	beq.n	80020d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00c      	b.n	80020f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2205      	movs	r2, #5
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002108:	4b8e      	ldr	r3, [pc, #568]	; (8002344 <HAL_DMA_IRQHandler+0x248>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a8e      	ldr	r2, [pc, #568]	; (8002348 <HAL_DMA_IRQHandler+0x24c>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	0a9b      	lsrs	r3, r3, #10
 8002114:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2208      	movs	r2, #8
 8002128:	409a      	lsls	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01a      	beq.n	8002168 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0204 	bic.w	r2, r2, #4
 800214e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	2208      	movs	r2, #8
 8002156:	409a      	lsls	r2, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	2201      	movs	r2, #1
 800216e:	409a      	lsls	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d012      	beq.n	800219e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	2201      	movs	r2, #1
 800218c:	409a      	lsls	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f043 0202 	orr.w	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	2204      	movs	r2, #4
 80021a4:	409a      	lsls	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d012      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00b      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	2204      	movs	r2, #4
 80021c2:	409a      	lsls	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	f043 0204 	orr.w	r2, r3, #4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	2210      	movs	r2, #16
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d043      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d03c      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	2210      	movs	r2, #16
 80021f8:	409a      	lsls	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d018      	beq.n	800223e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d108      	bne.n	800222c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d024      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4798      	blx	r3
 800222a:	e01f      	b.n	800226c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01b      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4798      	blx	r3
 800223c:	e016      	b.n	800226c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0208 	bic.w	r2, r2, #8
 800225a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	2220      	movs	r2, #32
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 808f 	beq.w	800239c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8087 	beq.w	800239c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002292:	2220      	movs	r2, #32
 8002294:	409a      	lsls	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	d136      	bne.n	8002314 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0216 	bic.w	r2, r2, #22
 80022b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d103      	bne.n	80022d6 <HAL_DMA_IRQHandler+0x1da>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0208 	bic.w	r2, r2, #8
 80022e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	223f      	movs	r2, #63	; 0x3f
 80022ec:	409a      	lsls	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002306:	2b00      	cmp	r3, #0
 8002308:	d07e      	beq.n	8002408 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4798      	blx	r3
        }
        return;
 8002312:	e079      	b.n	8002408 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01d      	beq.n	800235e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10d      	bne.n	800234c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	2b00      	cmp	r3, #0
 8002336:	d031      	beq.n	800239c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
 8002340:	e02c      	b.n	800239c <HAL_DMA_IRQHandler+0x2a0>
 8002342:	bf00      	nop
 8002344:	20000000 	.word	0x20000000
 8002348:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	2b00      	cmp	r3, #0
 8002352:	d023      	beq.n	800239c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
 800235c:	e01e      	b.n	800239c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10f      	bne.n	800238c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0210 	bic.w	r2, r2, #16
 800237a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d032      	beq.n	800240a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d022      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2205      	movs	r2, #5
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	3301      	adds	r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d307      	bcc.n	80023e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f2      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x2cc>
 80023e2:	e000      	b.n	80023e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	4798      	blx	r3
 8002406:	e000      	b.n	800240a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002408:	bf00      	nop
    }
  }
}
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800242c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d108      	bne.n	8002450 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800244e:	e007      	b.n	8002460 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	60da      	str	r2, [r3, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	3b10      	subs	r3, #16
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <DMA_CalcBaseAndBitshift+0x64>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4413      	add	r3, r2
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d909      	bls.n	80024ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024a2:	f023 0303 	bic.w	r3, r3, #3
 80024a6:	1d1a      	adds	r2, r3, #4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	659a      	str	r2, [r3, #88]	; 0x58
 80024ac:	e007      	b.n	80024be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024b6:	f023 0303 	bic.w	r3, r3, #3
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	aaaaaaab 	.word	0xaaaaaaab
 80024d4:	08006838 	.word	0x08006838

080024d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d11f      	bne.n	8002532 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d856      	bhi.n	80025a6 <DMA_CheckFifoParam+0xce>
 80024f8:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <DMA_CheckFifoParam+0x28>)
 80024fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fe:	bf00      	nop
 8002500:	08002511 	.word	0x08002511
 8002504:	08002523 	.word	0x08002523
 8002508:	08002511 	.word	0x08002511
 800250c:	080025a7 	.word	0x080025a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d046      	beq.n	80025aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002520:	e043      	b.n	80025aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800252a:	d140      	bne.n	80025ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002530:	e03d      	b.n	80025ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253a:	d121      	bne.n	8002580 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d837      	bhi.n	80025b2 <DMA_CheckFifoParam+0xda>
 8002542:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <DMA_CheckFifoParam+0x70>)
 8002544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002548:	08002559 	.word	0x08002559
 800254c:	0800255f 	.word	0x0800255f
 8002550:	08002559 	.word	0x08002559
 8002554:	08002571 	.word	0x08002571
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      break;
 800255c:	e030      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d025      	beq.n	80025b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256e:	e022      	b.n	80025b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002578:	d11f      	bne.n	80025ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800257e:	e01c      	b.n	80025ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d903      	bls.n	800258e <DMA_CheckFifoParam+0xb6>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d003      	beq.n	8002594 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800258c:	e018      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
      break;
 8002592:	e015      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00e      	beq.n	80025be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      break;
 80025a4:	e00b      	b.n	80025be <DMA_CheckFifoParam+0xe6>
      break;
 80025a6:	bf00      	nop
 80025a8:	e00a      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025aa:	bf00      	nop
 80025ac:	e008      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ae:	bf00      	nop
 80025b0:	e006      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025b2:	bf00      	nop
 80025b4:	e004      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025b6:	bf00      	nop
 80025b8:	e002      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ba:	bf00      	nop
 80025bc:	e000      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025be:	bf00      	nop
    }
  } 
  
  return status; 
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	e165      	b.n	80028b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	429a      	cmp	r2, r3
 8002606:	f040 8154 	bne.w	80028b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d005      	beq.n	8002622 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261e:	2b02      	cmp	r3, #2
 8002620:	d130      	bne.n	8002684 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	2203      	movs	r2, #3
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 0201 	and.w	r2, r3, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b03      	cmp	r3, #3
 800268e:	d017      	beq.n	80026c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d123      	bne.n	8002714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	08da      	lsrs	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3208      	adds	r2, #8
 80026d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	08da      	lsrs	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3208      	adds	r2, #8
 800270e:	69b9      	ldr	r1, [r7, #24]
 8002710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0203 	and.w	r2, r3, #3
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80ae 	beq.w	80028b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4b5d      	ldr	r3, [pc, #372]	; (80028d0 <HAL_GPIO_Init+0x300>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4a5c      	ldr	r2, [pc, #368]	; (80028d0 <HAL_GPIO_Init+0x300>)
 8002760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002764:	6453      	str	r3, [r2, #68]	; 0x44
 8002766:	4b5a      	ldr	r3, [pc, #360]	; (80028d0 <HAL_GPIO_Init+0x300>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002772:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_GPIO_Init+0x304>)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	3302      	adds	r3, #2
 800277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	220f      	movs	r2, #15
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a4f      	ldr	r2, [pc, #316]	; (80028d8 <HAL_GPIO_Init+0x308>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d025      	beq.n	80027ea <HAL_GPIO_Init+0x21a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4e      	ldr	r2, [pc, #312]	; (80028dc <HAL_GPIO_Init+0x30c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d01f      	beq.n	80027e6 <HAL_GPIO_Init+0x216>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4d      	ldr	r2, [pc, #308]	; (80028e0 <HAL_GPIO_Init+0x310>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d019      	beq.n	80027e2 <HAL_GPIO_Init+0x212>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4c      	ldr	r2, [pc, #304]	; (80028e4 <HAL_GPIO_Init+0x314>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_GPIO_Init+0x20e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4b      	ldr	r2, [pc, #300]	; (80028e8 <HAL_GPIO_Init+0x318>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00d      	beq.n	80027da <HAL_GPIO_Init+0x20a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4a      	ldr	r2, [pc, #296]	; (80028ec <HAL_GPIO_Init+0x31c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <HAL_GPIO_Init+0x206>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a49      	ldr	r2, [pc, #292]	; (80028f0 <HAL_GPIO_Init+0x320>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_GPIO_Init+0x202>
 80027ce:	2306      	movs	r3, #6
 80027d0:	e00c      	b.n	80027ec <HAL_GPIO_Init+0x21c>
 80027d2:	2307      	movs	r3, #7
 80027d4:	e00a      	b.n	80027ec <HAL_GPIO_Init+0x21c>
 80027d6:	2305      	movs	r3, #5
 80027d8:	e008      	b.n	80027ec <HAL_GPIO_Init+0x21c>
 80027da:	2304      	movs	r3, #4
 80027dc:	e006      	b.n	80027ec <HAL_GPIO_Init+0x21c>
 80027de:	2303      	movs	r3, #3
 80027e0:	e004      	b.n	80027ec <HAL_GPIO_Init+0x21c>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e002      	b.n	80027ec <HAL_GPIO_Init+0x21c>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_GPIO_Init+0x21c>
 80027ea:	2300      	movs	r3, #0
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	f002 0203 	and.w	r2, r2, #3
 80027f2:	0092      	lsls	r2, r2, #2
 80027f4:	4093      	lsls	r3, r2
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027fc:	4935      	ldr	r1, [pc, #212]	; (80028d4 <HAL_GPIO_Init+0x304>)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	3302      	adds	r3, #2
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800280a:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <HAL_GPIO_Init+0x324>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800282e:	4a31      	ldr	r2, [pc, #196]	; (80028f4 <HAL_GPIO_Init+0x324>)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002834:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <HAL_GPIO_Init+0x324>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002858:	4a26      	ldr	r2, [pc, #152]	; (80028f4 <HAL_GPIO_Init+0x324>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800285e:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <HAL_GPIO_Init+0x324>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002882:	4a1c      	ldr	r2, [pc, #112]	; (80028f4 <HAL_GPIO_Init+0x324>)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002888:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <HAL_GPIO_Init+0x324>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028ac:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <HAL_GPIO_Init+0x324>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3301      	adds	r3, #1
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2b0f      	cmp	r3, #15
 80028bc:	f67f ae96 	bls.w	80025ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3724      	adds	r7, #36	; 0x24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40013800 	.word	0x40013800
 80028d8:	40020000 	.word	0x40020000
 80028dc:	40020400 	.word	0x40020400
 80028e0:	40020800 	.word	0x40020800
 80028e4:	40020c00 	.word	0x40020c00
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40021400 	.word	0x40021400
 80028f0:	40021800 	.word	0x40021800
 80028f4:	40013c00 	.word	0x40013c00

080028f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0cc      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800290c:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d90c      	bls.n	8002934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b65      	ldr	r3, [pc, #404]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0b8      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002964:	4b53      	ldr	r3, [pc, #332]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800296e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002970:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	494d      	ldr	r1, [pc, #308]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d044      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d119      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e07f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b6:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e06f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e067      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d6:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4934      	ldr	r1, [pc, #208]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e8:	f7ff f91e 	bl	8001c28 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f0:	f7ff f91a 	bl	8001c28 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e04f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 020c 	and.w	r2, r3, #12
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1eb      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d20c      	bcs.n	8002a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e032      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4916      	ldr	r1, [pc, #88]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a7e:	f000 f855 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002a82:	4602      	mov	r2, r0
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	490a      	ldr	r1, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	5ccb      	ldrb	r3, [r1, r3]
 8002a92:	fa22 f303 	lsr.w	r3, r2, r3
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f87e 	bl	8001ba0 <HAL_InitTick>

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023c00 	.word	0x40023c00
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	08006820 	.word	0x08006820
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000004 	.word	0x20000004

08002ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000000 	.word	0x20000000

08002adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ae0:	f7ff fff0 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	0a9b      	lsrs	r3, r3, #10
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4903      	ldr	r1, [pc, #12]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40023800 	.word	0x40023800
 8002b00:	08006830 	.word	0x08006830

08002b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b08:	f7ff ffdc 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0b5b      	lsrs	r3, r3, #13
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4903      	ldr	r1, [pc, #12]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	08006830 	.word	0x08006830

08002b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b30:	b0ae      	sub	sp, #184	; 0xb8
 8002b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b52:	4bcb      	ldr	r3, [pc, #812]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	f200 8206 	bhi.w	8002f6c <HAL_RCC_GetSysClockFreq+0x440>
 8002b60:	a201      	add	r2, pc, #4	; (adr r2, 8002b68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b66:	bf00      	nop
 8002b68:	08002b9d 	.word	0x08002b9d
 8002b6c:	08002f6d 	.word	0x08002f6d
 8002b70:	08002f6d 	.word	0x08002f6d
 8002b74:	08002f6d 	.word	0x08002f6d
 8002b78:	08002ba5 	.word	0x08002ba5
 8002b7c:	08002f6d 	.word	0x08002f6d
 8002b80:	08002f6d 	.word	0x08002f6d
 8002b84:	08002f6d 	.word	0x08002f6d
 8002b88:	08002bad 	.word	0x08002bad
 8002b8c:	08002f6d 	.word	0x08002f6d
 8002b90:	08002f6d 	.word	0x08002f6d
 8002b94:	08002f6d 	.word	0x08002f6d
 8002b98:	08002d9d 	.word	0x08002d9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b9c:	4bb9      	ldr	r3, [pc, #740]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ba2:	e1e7      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ba4:	4bb8      	ldr	r3, [pc, #736]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002baa:	e1e3      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bac:	4bb4      	ldr	r3, [pc, #720]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bb8:	4bb1      	ldr	r3, [pc, #708]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d071      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc4:	4bae      	ldr	r3, [pc, #696]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bd0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bea:	4622      	mov	r2, r4
 8002bec:	462b      	mov	r3, r5
 8002bee:	f04f 0000 	mov.w	r0, #0
 8002bf2:	f04f 0100 	mov.w	r1, #0
 8002bf6:	0159      	lsls	r1, r3, #5
 8002bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfc:	0150      	lsls	r0, r2, #5
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4621      	mov	r1, r4
 8002c04:	1a51      	subs	r1, r2, r1
 8002c06:	6439      	str	r1, [r7, #64]	; 0x40
 8002c08:	4629      	mov	r1, r5
 8002c0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	018b      	lsls	r3, r1, #6
 8002c20:	4641      	mov	r1, r8
 8002c22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c26:	4641      	mov	r1, r8
 8002c28:	018a      	lsls	r2, r1, #6
 8002c2a:	4641      	mov	r1, r8
 8002c2c:	1a51      	subs	r1, r2, r1
 8002c2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c30:	4649      	mov	r1, r9
 8002c32:	eb63 0301 	sbc.w	r3, r3, r1
 8002c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002c44:	4649      	mov	r1, r9
 8002c46:	00cb      	lsls	r3, r1, #3
 8002c48:	4641      	mov	r1, r8
 8002c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c4e:	4641      	mov	r1, r8
 8002c50:	00ca      	lsls	r2, r1, #3
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	4622      	mov	r2, r4
 8002c5a:	189b      	adds	r3, r3, r2
 8002c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c5e:	462b      	mov	r3, r5
 8002c60:	460a      	mov	r2, r1
 8002c62:	eb42 0303 	adc.w	r3, r2, r3
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c74:	4629      	mov	r1, r5
 8002c76:	024b      	lsls	r3, r1, #9
 8002c78:	4621      	mov	r1, r4
 8002c7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c7e:	4621      	mov	r1, r4
 8002c80:	024a      	lsls	r2, r1, #9
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002c98:	f7fd ffa4 	bl	8000be4 <__aeabi_uldivmod>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ca6:	e067      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca8:	4b75      	ldr	r3, [pc, #468]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cb4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002cb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cc6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002cca:	4622      	mov	r2, r4
 8002ccc:	462b      	mov	r3, r5
 8002cce:	f04f 0000 	mov.w	r0, #0
 8002cd2:	f04f 0100 	mov.w	r1, #0
 8002cd6:	0159      	lsls	r1, r3, #5
 8002cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cdc:	0150      	lsls	r0, r2, #5
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	1a51      	subs	r1, r2, r1
 8002ce6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ce8:	4629      	mov	r1, r5
 8002cea:	eb63 0301 	sbc.w	r3, r3, r1
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002cfc:	4649      	mov	r1, r9
 8002cfe:	018b      	lsls	r3, r1, #6
 8002d00:	4641      	mov	r1, r8
 8002d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d06:	4641      	mov	r1, r8
 8002d08:	018a      	lsls	r2, r1, #6
 8002d0a:	4641      	mov	r1, r8
 8002d0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d10:	4649      	mov	r1, r9
 8002d12:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d2a:	4692      	mov	sl, r2
 8002d2c:	469b      	mov	fp, r3
 8002d2e:	4623      	mov	r3, r4
 8002d30:	eb1a 0303 	adds.w	r3, sl, r3
 8002d34:	623b      	str	r3, [r7, #32]
 8002d36:	462b      	mov	r3, r5
 8002d38:	eb4b 0303 	adc.w	r3, fp, r3
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	028b      	lsls	r3, r1, #10
 8002d4e:	4621      	mov	r1, r4
 8002d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d54:	4621      	mov	r1, r4
 8002d56:	028a      	lsls	r2, r1, #10
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d60:	2200      	movs	r2, #0
 8002d62:	673b      	str	r3, [r7, #112]	; 0x70
 8002d64:	677a      	str	r2, [r7, #116]	; 0x74
 8002d66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002d6a:	f7fd ff3b 	bl	8000be4 <__aeabi_uldivmod>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4613      	mov	r3, r2
 8002d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d78:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	3301      	adds	r3, #1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d9a:	e0eb      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d9c:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002da8:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d06b      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db4:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	2200      	movs	r2, #0
 8002dbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc6:	663b      	str	r3, [r7, #96]	; 0x60
 8002dc8:	2300      	movs	r3, #0
 8002dca:	667b      	str	r3, [r7, #100]	; 0x64
 8002dcc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002dd0:	4622      	mov	r2, r4
 8002dd2:	462b      	mov	r3, r5
 8002dd4:	f04f 0000 	mov.w	r0, #0
 8002dd8:	f04f 0100 	mov.w	r1, #0
 8002ddc:	0159      	lsls	r1, r3, #5
 8002dde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de2:	0150      	lsls	r0, r2, #5
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4621      	mov	r1, r4
 8002dea:	1a51      	subs	r1, r2, r1
 8002dec:	61b9      	str	r1, [r7, #24]
 8002dee:	4629      	mov	r1, r5
 8002df0:	eb63 0301 	sbc.w	r3, r3, r1
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e02:	4659      	mov	r1, fp
 8002e04:	018b      	lsls	r3, r1, #6
 8002e06:	4651      	mov	r1, sl
 8002e08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e0c:	4651      	mov	r1, sl
 8002e0e:	018a      	lsls	r2, r1, #6
 8002e10:	4651      	mov	r1, sl
 8002e12:	ebb2 0801 	subs.w	r8, r2, r1
 8002e16:	4659      	mov	r1, fp
 8002e18:	eb63 0901 	sbc.w	r9, r3, r1
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e30:	4690      	mov	r8, r2
 8002e32:	4699      	mov	r9, r3
 8002e34:	4623      	mov	r3, r4
 8002e36:	eb18 0303 	adds.w	r3, r8, r3
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	462b      	mov	r3, r5
 8002e3e:	eb49 0303 	adc.w	r3, r9, r3
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e50:	4629      	mov	r1, r5
 8002e52:	024b      	lsls	r3, r1, #9
 8002e54:	4621      	mov	r1, r4
 8002e56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	024a      	lsls	r2, r1, #9
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e66:	2200      	movs	r2, #0
 8002e68:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e6a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e70:	f7fd feb8 	bl	8000be4 <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4613      	mov	r3, r2
 8002e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e7e:	e065      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x420>
 8002e80:	40023800 	.word	0x40023800
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8c:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	2200      	movs	r2, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	4611      	mov	r1, r2
 8002e98:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e9c:	653b      	str	r3, [r7, #80]	; 0x50
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	657b      	str	r3, [r7, #84]	; 0x54
 8002ea2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002ea6:	4642      	mov	r2, r8
 8002ea8:	464b      	mov	r3, r9
 8002eaa:	f04f 0000 	mov.w	r0, #0
 8002eae:	f04f 0100 	mov.w	r1, #0
 8002eb2:	0159      	lsls	r1, r3, #5
 8002eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb8:	0150      	lsls	r0, r2, #5
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	1a51      	subs	r1, r2, r1
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ed8:	4659      	mov	r1, fp
 8002eda:	018b      	lsls	r3, r1, #6
 8002edc:	4651      	mov	r1, sl
 8002ede:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ee2:	4651      	mov	r1, sl
 8002ee4:	018a      	lsls	r2, r1, #6
 8002ee6:	4651      	mov	r1, sl
 8002ee8:	1a54      	subs	r4, r2, r1
 8002eea:	4659      	mov	r1, fp
 8002eec:	eb63 0501 	sbc.w	r5, r3, r1
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	00eb      	lsls	r3, r5, #3
 8002efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002efe:	00e2      	lsls	r2, r4, #3
 8002f00:	4614      	mov	r4, r2
 8002f02:	461d      	mov	r5, r3
 8002f04:	4643      	mov	r3, r8
 8002f06:	18e3      	adds	r3, r4, r3
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	eb45 0303 	adc.w	r3, r5, r3
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	028b      	lsls	r3, r1, #10
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f28:	4621      	mov	r1, r4
 8002f2a:	028a      	lsls	r2, r1, #10
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f34:	2200      	movs	r2, #0
 8002f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f38:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f3e:	f7fd fe51 	bl	8000be4 <__aeabi_uldivmod>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4613      	mov	r3, r2
 8002f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f4c:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	0f1b      	lsrs	r3, r3, #28
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f6a:	e003      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	37b8      	adds	r7, #184	; 0xb8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	00f42400 	.word	0x00f42400

08002f8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e28d      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8083 	beq.w	80030b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fac:	4b94      	ldr	r3, [pc, #592]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d019      	beq.n	8002fec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fb8:	4b91      	ldr	r3, [pc, #580]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fc4:	4b8e      	ldr	r3, [pc, #568]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd0:	d00c      	beq.n	8002fec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd2:	4b8b      	ldr	r3, [pc, #556]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	d112      	bne.n	8003004 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fde:	4b88      	ldr	r3, [pc, #544]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fea:	d10b      	bne.n	8003004 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	4b84      	ldr	r3, [pc, #528]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d05b      	beq.n	80030b0 <HAL_RCC_OscConfig+0x124>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d157      	bne.n	80030b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e25a      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300c:	d106      	bne.n	800301c <HAL_RCC_OscConfig+0x90>
 800300e:	4b7c      	ldr	r3, [pc, #496]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7b      	ldr	r2, [pc, #492]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e01d      	b.n	8003058 <HAL_RCC_OscConfig+0xcc>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0xb4>
 8003026:	4b76      	ldr	r3, [pc, #472]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a75      	ldr	r2, [pc, #468]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 800302c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b73      	ldr	r3, [pc, #460]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a72      	ldr	r2, [pc, #456]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0xcc>
 8003040:	4b6f      	ldr	r3, [pc, #444]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a6e      	ldr	r2, [pc, #440]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8003046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b6c      	ldr	r3, [pc, #432]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a6b      	ldr	r2, [pc, #428]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8003052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fde2 	bl	8001c28 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003068:	f7fe fdde 	bl	8001c28 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e21f      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	4b61      	ldr	r3, [pc, #388]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0xdc>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fdce 	bl	8001c28 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003090:	f7fe fdca 	bl	8001c28 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e20b      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	4b57      	ldr	r3, [pc, #348]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x104>
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d06f      	beq.n	800319e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030be:	4b50      	ldr	r3, [pc, #320]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d017      	beq.n	80030fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030ca:	4b4d      	ldr	r3, [pc, #308]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d105      	bne.n	80030e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030d6:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d11c      	bne.n	8003128 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ee:	4b44      	ldr	r3, [pc, #272]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	4b41      	ldr	r3, [pc, #260]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_RCC_OscConfig+0x186>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d001      	beq.n	8003112 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e1d3      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003112:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4937      	ldr	r1, [pc, #220]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	e03a      	b.n	800319e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003130:	4b34      	ldr	r3, [pc, #208]	; (8003204 <HAL_RCC_OscConfig+0x278>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003136:	f7fe fd77 	bl	8001c28 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313e:	f7fe fd73 	bl	8001c28 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e1b4      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4925      	ldr	r1, [pc, #148]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 800316c:	4313      	orrs	r3, r2
 800316e:	600b      	str	r3, [r1, #0]
 8003170:	e015      	b.n	800319e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCC_OscConfig+0x278>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe fd56 	bl	8001c28 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003180:	f7fe fd52 	bl	8001c28 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e193      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d036      	beq.n	8003218 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7fe fd36 	bl	8001c28 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c0:	f7fe fd32 	bl	8001c28 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e173      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_OscConfig+0x274>)
 80031d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x234>
 80031de:	e01b      	b.n	8003218 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e0:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fe fd1f 	bl	8001c28 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ec:	e00e      	b.n	800320c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ee:	f7fe fd1b 	bl	8001c28 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d907      	bls.n	800320c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e15c      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
 8003200:	40023800 	.word	0x40023800
 8003204:	42470000 	.word	0x42470000
 8003208:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	4b8a      	ldr	r3, [pc, #552]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800320e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ea      	bne.n	80031ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8097 	beq.w	8003354 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322a:	4b83      	ldr	r3, [pc, #524]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10f      	bne.n	8003256 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	4b7f      	ldr	r3, [pc, #508]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	4a7e      	ldr	r2, [pc, #504]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 8003240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003244:	6413      	str	r3, [r2, #64]	; 0x40
 8003246:	4b7c      	ldr	r3, [pc, #496]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	4b79      	ldr	r3, [pc, #484]	; (800343c <HAL_RCC_OscConfig+0x4b0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d118      	bne.n	8003294 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003262:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_RCC_OscConfig+0x4b0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a75      	ldr	r2, [pc, #468]	; (800343c <HAL_RCC_OscConfig+0x4b0>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326e:	f7fe fcdb 	bl	8001c28 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003276:	f7fe fcd7 	bl	8001c28 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e118      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	4b6c      	ldr	r3, [pc, #432]	; (800343c <HAL_RCC_OscConfig+0x4b0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x31e>
 800329c:	4b66      	ldr	r3, [pc, #408]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a65      	ldr	r2, [pc, #404]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	e01c      	b.n	80032e4 <HAL_RCC_OscConfig+0x358>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x340>
 80032b2:	4b61      	ldr	r3, [pc, #388]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a60      	ldr	r2, [pc, #384]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	4b5e      	ldr	r3, [pc, #376]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a5d      	ldr	r2, [pc, #372]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0x358>
 80032cc:	4b5a      	ldr	r3, [pc, #360]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a59      	ldr	r2, [pc, #356]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032d2:	f023 0301 	bic.w	r3, r3, #1
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
 80032d8:	4b57      	ldr	r3, [pc, #348]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	4a56      	ldr	r2, [pc, #344]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032de:	f023 0304 	bic.w	r3, r3, #4
 80032e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d015      	beq.n	8003318 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fe fc9c 	bl	8001c28 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f2:	e00a      	b.n	800330a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f4:	f7fe fc98 	bl	8001c28 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e0d7      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330a:	4b4b      	ldr	r3, [pc, #300]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0ee      	beq.n	80032f4 <HAL_RCC_OscConfig+0x368>
 8003316:	e014      	b.n	8003342 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fe fc86 	bl	8001c28 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331e:	e00a      	b.n	8003336 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7fe fc82 	bl	8001c28 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	; 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e0c1      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003336:	4b40      	ldr	r3, [pc, #256]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1ee      	bne.n	8003320 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d105      	bne.n	8003354 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003348:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	4a3a      	ldr	r2, [pc, #232]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800334e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003352:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80ad 	beq.w	80034b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800335e:	4b36      	ldr	r3, [pc, #216]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b08      	cmp	r3, #8
 8003368:	d060      	beq.n	800342c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d145      	bne.n	80033fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b33      	ldr	r3, [pc, #204]	; (8003440 <HAL_RCC_OscConfig+0x4b4>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe fc56 	bl	8001c28 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003380:	f7fe fc52 	bl	8001c28 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e093      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	4b29      	ldr	r3, [pc, #164]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	019b      	lsls	r3, r3, #6
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	3b01      	subs	r3, #1
 80033b8:	041b      	lsls	r3, r3, #16
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	071b      	lsls	r3, r3, #28
 80033ca:	491b      	ldr	r1, [pc, #108]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <HAL_RCC_OscConfig+0x4b4>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fe fc27 	bl	8001c28 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033de:	f7fe fc23 	bl	8001c28 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e064      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x452>
 80033fc:	e05c      	b.n	80034b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_RCC_OscConfig+0x4b4>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe fc10 	bl	8001c28 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340c:	f7fe fc0c 	bl	8001c28 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04d      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_OscConfig+0x4ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x480>
 800342a:	e045      	b.n	80034b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e040      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
 8003438:	40023800 	.word	0x40023800
 800343c:	40007000 	.word	0x40007000
 8003440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003444:	4b1f      	ldr	r3, [pc, #124]	; (80034c4 <HAL_RCC_OscConfig+0x538>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d030      	beq.n	80034b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d129      	bne.n	80034b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d122      	bne.n	80034b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800347a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800347c:	4293      	cmp	r3, r2
 800347e:	d119      	bne.n	80034b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	3b01      	subs	r3, #1
 800348e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d10f      	bne.n	80034b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d107      	bne.n	80034b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800

080034c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e041      	b.n	800355e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fe f94a 	bl	8001788 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f000 fc70 	bl	8003dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	e022      	b.n	80035da <HAL_TIM_PWM_Start_DMA+0x72>
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b04      	cmp	r3, #4
 8003598:	d109      	bne.n	80035ae <HAL_TIM_PWM_Start_DMA+0x46>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	bf0c      	ite	eq
 80035a6:	2301      	moveq	r3, #1
 80035a8:	2300      	movne	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	e015      	b.n	80035da <HAL_TIM_PWM_Start_DMA+0x72>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d109      	bne.n	80035c8 <HAL_TIM_PWM_Start_DMA+0x60>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	bf0c      	ite	eq
 80035c0:	2301      	moveq	r3, #1
 80035c2:	2300      	movne	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	e008      	b.n	80035da <HAL_TIM_PWM_Start_DMA+0x72>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
 80035e0:	e171      	b.n	80038c6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_TIM_PWM_Start_DMA+0x94>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	e022      	b.n	8003642 <HAL_TIM_PWM_Start_DMA+0xda>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d109      	bne.n	8003616 <HAL_TIM_PWM_Start_DMA+0xae>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b01      	cmp	r3, #1
 800360c:	bf0c      	ite	eq
 800360e:	2301      	moveq	r3, #1
 8003610:	2300      	movne	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	e015      	b.n	8003642 <HAL_TIM_PWM_Start_DMA+0xda>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b08      	cmp	r3, #8
 800361a:	d109      	bne.n	8003630 <HAL_TIM_PWM_Start_DMA+0xc8>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e008      	b.n	8003642 <HAL_TIM_PWM_Start_DMA+0xda>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d024      	beq.n	8003690 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <HAL_TIM_PWM_Start_DMA+0xee>
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e137      	b.n	80038c6 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d104      	bne.n	8003666 <HAL_TIM_PWM_Start_DMA+0xfe>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003664:	e016      	b.n	8003694 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d104      	bne.n	8003676 <HAL_TIM_PWM_Start_DMA+0x10e>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003674:	e00e      	b.n	8003694 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d104      	bne.n	8003686 <HAL_TIM_PWM_Start_DMA+0x11e>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003684:	e006      	b.n	8003694 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800368e:	e001      	b.n	8003694 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e118      	b.n	80038c6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	f200 80ae 	bhi.w	80037f8 <HAL_TIM_PWM_Start_DMA+0x290>
 800369c:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800369e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a2:	bf00      	nop
 80036a4:	080036d9 	.word	0x080036d9
 80036a8:	080037f9 	.word	0x080037f9
 80036ac:	080037f9 	.word	0x080037f9
 80036b0:	080037f9 	.word	0x080037f9
 80036b4:	08003721 	.word	0x08003721
 80036b8:	080037f9 	.word	0x080037f9
 80036bc:	080037f9 	.word	0x080037f9
 80036c0:	080037f9 	.word	0x080037f9
 80036c4:	08003769 	.word	0x08003769
 80036c8:	080037f9 	.word	0x080037f9
 80036cc:	080037f9 	.word	0x080037f9
 80036d0:	080037f9 	.word	0x080037f9
 80036d4:	080037b1 	.word	0x080037b1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	4a7c      	ldr	r2, [pc, #496]	; (80038d0 <HAL_TIM_PWM_Start_DMA+0x368>)
 80036de:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	4a7b      	ldr	r2, [pc, #492]	; (80038d4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	4a7a      	ldr	r2, [pc, #488]	; (80038d8 <HAL_TIM_PWM_Start_DMA+0x370>)
 80036ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3334      	adds	r3, #52	; 0x34
 80036fc:	461a      	mov	r2, r3
 80036fe:	887b      	ldrh	r3, [r7, #2]
 8003700:	f7fe fc82 	bl	8002008 <HAL_DMA_Start_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e0db      	b.n	80038c6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371c:	60da      	str	r2, [r3, #12]
      break;
 800371e:	e06e      	b.n	80037fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	4a6a      	ldr	r2, [pc, #424]	; (80038d0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003726:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	4a69      	ldr	r2, [pc, #420]	; (80038d4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800372e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	4a68      	ldr	r2, [pc, #416]	; (80038d8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003736:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3338      	adds	r3, #56	; 0x38
 8003744:	461a      	mov	r2, r3
 8003746:	887b      	ldrh	r3, [r7, #2]
 8003748:	f7fe fc5e 	bl	8002008 <HAL_DMA_Start_IT>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0b7      	b.n	80038c6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003764:	60da      	str	r2, [r3, #12]
      break;
 8003766:	e04a      	b.n	80037fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	4a58      	ldr	r2, [pc, #352]	; (80038d0 <HAL_TIM_PWM_Start_DMA+0x368>)
 800376e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	4a57      	ldr	r2, [pc, #348]	; (80038d4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003776:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	4a56      	ldr	r2, [pc, #344]	; (80038d8 <HAL_TIM_PWM_Start_DMA+0x370>)
 800377e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	333c      	adds	r3, #60	; 0x3c
 800378c:	461a      	mov	r2, r3
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	f7fe fc3a 	bl	8002008 <HAL_DMA_Start_IT>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e093      	b.n	80038c6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ac:	60da      	str	r2, [r3, #12]
      break;
 80037ae:	e026      	b.n	80037fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	4a46      	ldr	r2, [pc, #280]	; (80038d0 <HAL_TIM_PWM_Start_DMA+0x368>)
 80037b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	4a45      	ldr	r2, [pc, #276]	; (80038d4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	4a44      	ldr	r2, [pc, #272]	; (80038d8 <HAL_TIM_PWM_Start_DMA+0x370>)
 80037c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3340      	adds	r3, #64	; 0x40
 80037d4:	461a      	mov	r2, r3
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	f7fe fc16 	bl	8002008 <HAL_DMA_Start_IT>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e06f      	b.n	80038c6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037f4:	60da      	str	r2, [r3, #12]
      break;
 80037f6:	e002      	b.n	80037fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	75fb      	strb	r3, [r7, #23]
      break;
 80037fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d15f      	bne.n	80038c4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fd3d 	bl	800428c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a31      	ldr	r2, [pc, #196]	; (80038dc <HAL_TIM_PWM_Start_DMA+0x374>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_TIM_PWM_Start_DMA+0x2be>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a2f      	ldr	r2, [pc, #188]	; (80038e0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <HAL_TIM_PWM_Start_DMA+0x2c4>
 800382a:	2300      	movs	r3, #0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a25      	ldr	r2, [pc, #148]	; (80038dc <HAL_TIM_PWM_Start_DMA+0x374>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d022      	beq.n	8003890 <HAL_TIM_PWM_Start_DMA+0x328>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003852:	d01d      	beq.n	8003890 <HAL_TIM_PWM_Start_DMA+0x328>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a22      	ldr	r2, [pc, #136]	; (80038e4 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d018      	beq.n	8003890 <HAL_TIM_PWM_Start_DMA+0x328>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a21      	ldr	r2, [pc, #132]	; (80038e8 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d013      	beq.n	8003890 <HAL_TIM_PWM_Start_DMA+0x328>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1f      	ldr	r2, [pc, #124]	; (80038ec <HAL_TIM_PWM_Start_DMA+0x384>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00e      	beq.n	8003890 <HAL_TIM_PWM_Start_DMA+0x328>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1a      	ldr	r2, [pc, #104]	; (80038e0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d009      	beq.n	8003890 <HAL_TIM_PWM_Start_DMA+0x328>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d004      	beq.n	8003890 <HAL_TIM_PWM_Start_DMA+0x328>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1a      	ldr	r2, [pc, #104]	; (80038f4 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d111      	bne.n	80038b4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d010      	beq.n	80038c4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b2:	e007      	b.n	80038c4 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	08003cdb 	.word	0x08003cdb
 80038d4:	08003d83 	.word	0x08003d83
 80038d8:	08003c49 	.word	0x08003c49
 80038dc:	40010000 	.word	0x40010000
 80038e0:	40010400 	.word	0x40010400
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40014000 	.word	0x40014000
 80038f4:	40001800 	.word	0x40001800

080038f8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	d855      	bhi.n	80039b8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	08003949 	.word	0x08003949
 8003918:	080039b9 	.word	0x080039b9
 800391c:	080039b9 	.word	0x080039b9
 8003920:	080039b9 	.word	0x080039b9
 8003924:	08003965 	.word	0x08003965
 8003928:	080039b9 	.word	0x080039b9
 800392c:	080039b9 	.word	0x080039b9
 8003930:	080039b9 	.word	0x080039b9
 8003934:	08003981 	.word	0x08003981
 8003938:	080039b9 	.word	0x080039b9
 800393c:	080039b9 	.word	0x080039b9
 8003940:	080039b9 	.word	0x080039b9
 8003944:	0800399d 	.word	0x0800399d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003956:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe fbab 	bl	80020b8 <HAL_DMA_Abort_IT>
      break;
 8003962:	e02c      	b.n	80039be <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003972:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe fb9d 	bl	80020b8 <HAL_DMA_Abort_IT>
      break;
 800397e:	e01e      	b.n	80039be <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800398e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fb8f 	bl	80020b8 <HAL_DMA_Abort_IT>
      break;
 800399a:	e010      	b.n	80039be <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fb81 	bl	80020b8 <HAL_DMA_Abort_IT>
      break;
 80039b6:	e002      	b.n	80039be <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      break;
 80039bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d161      	bne.n	8003a88 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2200      	movs	r2, #0
 80039ca:	6839      	ldr	r1, [r7, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fc5d 	bl	800428c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a2f      	ldr	r2, [pc, #188]	; (8003a94 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_TIM_PWM_Stop_DMA+0xee>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a2d      	ldr	r2, [pc, #180]	; (8003a98 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <HAL_TIM_PWM_Stop_DMA+0xf2>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_TIM_PWM_Stop_DMA+0xf4>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d017      	beq.n	8003a20 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6a1a      	ldr	r2, [r3, #32]
 80039f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10f      	bne.n	8003a20 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6a1a      	ldr	r2, [r3, #32]
 8003a06:	f240 4344 	movw	r3, #1092	; 0x444
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d107      	bne.n	8003a20 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a1e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a1a      	ldr	r2, [r3, #32]
 8003a26:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10f      	bne.n	8003a50 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6a1a      	ldr	r2, [r3, #32]
 8003a36:	f240 4344 	movw	r3, #1092	; 0x444
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d107      	bne.n	8003a50 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d104      	bne.n	8003a60 <HAL_TIM_PWM_Stop_DMA+0x168>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a5e:	e013      	b.n	8003a88 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d104      	bne.n	8003a70 <HAL_TIM_PWM_Stop_DMA+0x178>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a6e:	e00b      	b.n	8003a88 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d104      	bne.n	8003a80 <HAL_TIM_PWM_Stop_DMA+0x188>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a7e:	e003      	b.n	8003a88 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40010400 	.word	0x40010400

08003a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e0ae      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b0c      	cmp	r3, #12
 8003ac6:	f200 809f 	bhi.w	8003c08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003aca:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad0:	08003b05 	.word	0x08003b05
 8003ad4:	08003c09 	.word	0x08003c09
 8003ad8:	08003c09 	.word	0x08003c09
 8003adc:	08003c09 	.word	0x08003c09
 8003ae0:	08003b45 	.word	0x08003b45
 8003ae4:	08003c09 	.word	0x08003c09
 8003ae8:	08003c09 	.word	0x08003c09
 8003aec:	08003c09 	.word	0x08003c09
 8003af0:	08003b87 	.word	0x08003b87
 8003af4:	08003c09 	.word	0x08003c09
 8003af8:	08003c09 	.word	0x08003c09
 8003afc:	08003c09 	.word	0x08003c09
 8003b00:	08003bc7 	.word	0x08003bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fa0e 	bl	8003f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0208 	orr.w	r2, r2, #8
 8003b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6999      	ldr	r1, [r3, #24]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	619a      	str	r2, [r3, #24]
      break;
 8003b42:	e064      	b.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fa5e 	bl	800400c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6999      	ldr	r1, [r3, #24]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	619a      	str	r2, [r3, #24]
      break;
 8003b84:	e043      	b.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fab3 	bl	80040f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0208 	orr.w	r2, r2, #8
 8003ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0204 	bic.w	r2, r2, #4
 8003bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69d9      	ldr	r1, [r3, #28]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	61da      	str	r2, [r3, #28]
      break;
 8003bc4:	e023      	b.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fb07 	bl	80041e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69d9      	ldr	r1, [r3, #28]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	021a      	lsls	r2, r3, #8
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	61da      	str	r2, [r3, #28]
      break;
 8003c06:	e002      	b.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d107      	bne.n	8003c70 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c6e:	e02a      	b.n	8003cc6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d107      	bne.n	8003c8a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c88:	e01d      	b.n	8003cc6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d107      	bne.n	8003ca4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2204      	movs	r2, #4
 8003c98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca2:	e010      	b.n	8003cc6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d107      	bne.n	8003cbe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cbc:	e003      	b.n	8003cc6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f7ff ffb4 	bl	8003c34 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	771a      	strb	r2, [r3, #28]
}
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d10b      	bne.n	8003d0a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d136      	bne.n	8003d6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d08:	e031      	b.n	8003d6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d10b      	bne.n	8003d2c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2202      	movs	r2, #2
 8003d18:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d125      	bne.n	8003d6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d2a:	e020      	b.n	8003d6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d10b      	bne.n	8003d4e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2204      	movs	r2, #4
 8003d3a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d114      	bne.n	8003d6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d4c:	e00f      	b.n	8003d6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d10a      	bne.n	8003d6e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2208      	movs	r2, #8
 8003d5c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f7fd f8d6 	bl	8000f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	771a      	strb	r2, [r3, #28]
}
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d103      	bne.n	8003da2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	771a      	strb	r2, [r3, #28]
 8003da0:	e019      	b.n	8003dd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d103      	bne.n	8003db4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2202      	movs	r2, #2
 8003db0:	771a      	strb	r2, [r3, #28]
 8003db2:	e010      	b.n	8003dd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d103      	bne.n	8003dc6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	771a      	strb	r2, [r3, #28]
 8003dc4:	e007      	b.n	8003dd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d102      	bne.n	8003dd6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7ff ff22 	bl	8003c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	771a      	strb	r2, [r3, #28]
}
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a40      	ldr	r2, [pc, #256]	; (8003f00 <TIM_Base_SetConfig+0x114>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0a:	d00f      	beq.n	8003e2c <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3d      	ldr	r2, [pc, #244]	; (8003f04 <TIM_Base_SetConfig+0x118>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00b      	beq.n	8003e2c <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3c      	ldr	r2, [pc, #240]	; (8003f08 <TIM_Base_SetConfig+0x11c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d007      	beq.n	8003e2c <TIM_Base_SetConfig+0x40>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a3b      	ldr	r2, [pc, #236]	; (8003f0c <TIM_Base_SetConfig+0x120>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3a      	ldr	r2, [pc, #232]	; (8003f10 <TIM_Base_SetConfig+0x124>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d108      	bne.n	8003e3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2f      	ldr	r2, [pc, #188]	; (8003f00 <TIM_Base_SetConfig+0x114>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d02b      	beq.n	8003e9e <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4c:	d027      	beq.n	8003e9e <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a2c      	ldr	r2, [pc, #176]	; (8003f04 <TIM_Base_SetConfig+0x118>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d023      	beq.n	8003e9e <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a2b      	ldr	r2, [pc, #172]	; (8003f08 <TIM_Base_SetConfig+0x11c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d01f      	beq.n	8003e9e <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2a      	ldr	r2, [pc, #168]	; (8003f0c <TIM_Base_SetConfig+0x120>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01b      	beq.n	8003e9e <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a29      	ldr	r2, [pc, #164]	; (8003f10 <TIM_Base_SetConfig+0x124>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d017      	beq.n	8003e9e <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a28      	ldr	r2, [pc, #160]	; (8003f14 <TIM_Base_SetConfig+0x128>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a27      	ldr	r2, [pc, #156]	; (8003f18 <TIM_Base_SetConfig+0x12c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00f      	beq.n	8003e9e <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a26      	ldr	r2, [pc, #152]	; (8003f1c <TIM_Base_SetConfig+0x130>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00b      	beq.n	8003e9e <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a25      	ldr	r2, [pc, #148]	; (8003f20 <TIM_Base_SetConfig+0x134>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a24      	ldr	r2, [pc, #144]	; (8003f24 <TIM_Base_SetConfig+0x138>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a23      	ldr	r2, [pc, #140]	; (8003f28 <TIM_Base_SetConfig+0x13c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d108      	bne.n	8003eb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <TIM_Base_SetConfig+0x114>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <TIM_Base_SetConfig+0xf8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a0c      	ldr	r2, [pc, #48]	; (8003f10 <TIM_Base_SetConfig+0x124>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d103      	bne.n	8003eec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	615a      	str	r2, [r3, #20]
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40010000 	.word	0x40010000
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	40000c00 	.word	0x40000c00
 8003f10:	40010400 	.word	0x40010400
 8003f14:	40014000 	.word	0x40014000
 8003f18:	40014400 	.word	0x40014400
 8003f1c:	40014800 	.word	0x40014800
 8003f20:	40001800 	.word	0x40001800
 8003f24:	40001c00 	.word	0x40001c00
 8003f28:	40002000 	.word	0x40002000

08003f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f023 0201 	bic.w	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0303 	bic.w	r3, r3, #3
 8003f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f023 0302 	bic.w	r3, r3, #2
 8003f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a20      	ldr	r2, [pc, #128]	; (8004004 <TIM_OC1_SetConfig+0xd8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_OC1_SetConfig+0x64>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a1f      	ldr	r2, [pc, #124]	; (8004008 <TIM_OC1_SetConfig+0xdc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d10c      	bne.n	8003faa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0308 	bic.w	r3, r3, #8
 8003f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 0304 	bic.w	r3, r3, #4
 8003fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a15      	ldr	r2, [pc, #84]	; (8004004 <TIM_OC1_SetConfig+0xd8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d003      	beq.n	8003fba <TIM_OC1_SetConfig+0x8e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <TIM_OC1_SetConfig+0xdc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d111      	bne.n	8003fde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	621a      	str	r2, [r3, #32]
}
 8003ff8:	bf00      	nop
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	40010000 	.word	0x40010000
 8004008:	40010400 	.word	0x40010400

0800400c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f023 0210 	bic.w	r2, r3, #16
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f023 0320 	bic.w	r3, r3, #32
 8004056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a22      	ldr	r2, [pc, #136]	; (80040f0 <TIM_OC2_SetConfig+0xe4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d003      	beq.n	8004074 <TIM_OC2_SetConfig+0x68>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a21      	ldr	r2, [pc, #132]	; (80040f4 <TIM_OC2_SetConfig+0xe8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10d      	bne.n	8004090 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800407a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <TIM_OC2_SetConfig+0xe4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_OC2_SetConfig+0x94>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <TIM_OC2_SetConfig+0xe8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d113      	bne.n	80040c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	621a      	str	r2, [r3, #32]
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40010400 	.word	0x40010400

080040f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0303 	bic.w	r3, r3, #3
 800412e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a21      	ldr	r2, [pc, #132]	; (80041d8 <TIM_OC3_SetConfig+0xe0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_OC3_SetConfig+0x66>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a20      	ldr	r2, [pc, #128]	; (80041dc <TIM_OC3_SetConfig+0xe4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d10d      	bne.n	800417a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <TIM_OC3_SetConfig+0xe0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <TIM_OC3_SetConfig+0x92>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a15      	ldr	r2, [pc, #84]	; (80041dc <TIM_OC3_SetConfig+0xe4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d113      	bne.n	80041b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	621a      	str	r2, [r3, #32]
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	40010000 	.word	0x40010000
 80041dc:	40010400 	.word	0x40010400

080041e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800422a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	031b      	lsls	r3, r3, #12
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a12      	ldr	r2, [pc, #72]	; (8004284 <TIM_OC4_SetConfig+0xa4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_OC4_SetConfig+0x68>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a11      	ldr	r2, [pc, #68]	; (8004288 <TIM_OC4_SetConfig+0xa8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d109      	bne.n	800425c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800424e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	019b      	lsls	r3, r3, #6
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40010000 	.word	0x40010000
 8004288:	40010400 	.word	0x40010400

0800428c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	2201      	movs	r2, #1
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a1a      	ldr	r2, [r3, #32]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	43db      	mvns	r3, r3
 80042ae:	401a      	ands	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1a      	ldr	r2, [r3, #32]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	431a      	orrs	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	621a      	str	r2, [r3, #32]
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e05a      	b.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d022      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433c:	d01d      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1d      	ldr	r2, [pc, #116]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d018      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1b      	ldr	r2, [pc, #108]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d013      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1a      	ldr	r2, [pc, #104]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d00e      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a18      	ldr	r2, [pc, #96]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d009      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a17      	ldr	r2, [pc, #92]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d004      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a15      	ldr	r2, [pc, #84]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d10c      	bne.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	4313      	orrs	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40010000 	.word	0x40010000
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000800 	.word	0x40000800
 80043c0:	40000c00 	.word	0x40000c00
 80043c4:	40010400 	.word	0x40010400
 80043c8:	40014000 	.word	0x40014000
 80043cc:	40001800 	.word	0x40001800

080043d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e03d      	b.n	8004468 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e03f      	b.n	8004506 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fd fa02 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2224      	movs	r2, #36	; 0x24
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f9cb 	bl	8004854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b08a      	sub	sp, #40	; 0x28
 8004512:	af02      	add	r7, sp, #8
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	4613      	mov	r3, r2
 800451c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b20      	cmp	r3, #32
 800452c:	d17c      	bne.n	8004628 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_UART_Transmit+0x2c>
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e075      	b.n	800462a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_UART_Transmit+0x3e>
 8004548:	2302      	movs	r3, #2
 800454a:	e06e      	b.n	800462a <HAL_UART_Transmit+0x11c>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2221      	movs	r2, #33	; 0x21
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004562:	f7fd fb61 	bl	8001c28 <HAL_GetTick>
 8004566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	88fa      	ldrh	r2, [r7, #6]
 800456c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	88fa      	ldrh	r2, [r7, #6]
 8004572:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457c:	d108      	bne.n	8004590 <HAL_UART_Transmit+0x82>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d104      	bne.n	8004590 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	e003      	b.n	8004598 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004594:	2300      	movs	r3, #0
 8004596:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045a0:	e02a      	b.n	80045f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2180      	movs	r1, #128	; 0x80
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f8e2 	bl	8004776 <UART_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e036      	b.n	800462a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10b      	bne.n	80045da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	3302      	adds	r3, #2
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	e007      	b.n	80045ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	781a      	ldrb	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	3301      	adds	r3, #1
 80045e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1cf      	bne.n	80045a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2200      	movs	r2, #0
 800460a:	2140      	movs	r1, #64	; 0x40
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f8b2 	bl	8004776 <UART_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e006      	b.n	800462a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	e000      	b.n	800462a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004628:	2302      	movs	r3, #2
  }
}
 800462a:	4618      	mov	r0, r3
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b08a      	sub	sp, #40	; 0x28
 8004636:	af02      	add	r7, sp, #8
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b20      	cmp	r3, #32
 8004650:	f040 808c 	bne.w	800476c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_UART_Receive+0x2e>
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e084      	b.n	800476e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_UART_Receive+0x40>
 800466e:	2302      	movs	r3, #2
 8004670:	e07d      	b.n	800476e <HAL_UART_Receive+0x13c>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2222      	movs	r2, #34	; 0x22
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800468e:	f7fd facb 	bl	8001c28 <HAL_GetTick>
 8004692:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	88fa      	ldrh	r2, [r7, #6]
 8004698:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	88fa      	ldrh	r2, [r7, #6]
 800469e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a8:	d108      	bne.n	80046bc <HAL_UART_Receive+0x8a>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d104      	bne.n	80046bc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e003      	b.n	80046c4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80046cc:	e043      	b.n	8004756 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2200      	movs	r2, #0
 80046d6:	2120      	movs	r1, #32
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f84c 	bl	8004776 <UART_WaitOnFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e042      	b.n	800476e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10c      	bne.n	8004708 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	3302      	adds	r3, #2
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	e01f      	b.n	8004748 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004710:	d007      	beq.n	8004722 <HAL_UART_Receive+0xf0>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <HAL_UART_Receive+0xfe>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	e008      	b.n	8004742 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800473c:	b2da      	uxtb	r2, r3
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3301      	adds	r3, #1
 8004746:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1b6      	bne.n	80046ce <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b090      	sub	sp, #64	; 0x40
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	603b      	str	r3, [r7, #0]
 8004782:	4613      	mov	r3, r2
 8004784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004786:	e050      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478e:	d04c      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004796:	f7fd fa47 	bl	8001c28 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d241      	bcs.n	800482a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	330c      	adds	r3, #12
 80047ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	330c      	adds	r3, #12
 80047c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047c6:	637a      	str	r2, [r7, #52]	; 0x34
 80047c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e5      	bne.n	80047a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3314      	adds	r3, #20
 80047e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	613b      	str	r3, [r7, #16]
   return(result);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f023 0301 	bic.w	r3, r3, #1
 80047f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3314      	adds	r3, #20
 80047f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047fa:	623a      	str	r2, [r7, #32]
 80047fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	69f9      	ldr	r1, [r7, #28]
 8004800:	6a3a      	ldr	r2, [r7, #32]
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	61bb      	str	r3, [r7, #24]
   return(result);
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e5      	bne.n	80047da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e00f      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	429a      	cmp	r2, r3
 8004846:	d09f      	beq.n	8004788 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3740      	adds	r7, #64	; 0x40
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004858:	b0c0      	sub	sp, #256	; 0x100
 800485a:	af00      	add	r7, sp, #0
 800485c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	68d9      	ldr	r1, [r3, #12]
 8004872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	ea40 0301 	orr.w	r3, r0, r1
 800487c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	431a      	orrs	r2, r3
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	431a      	orrs	r2, r3
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048ac:	f021 010c 	bic.w	r1, r1, #12
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048ba:	430b      	orrs	r3, r1
 80048bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ce:	6999      	ldr	r1, [r3, #24]
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	ea40 0301 	orr.w	r3, r0, r1
 80048da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b8f      	ldr	r3, [pc, #572]	; (8004b20 <UART_SetConfig+0x2cc>)
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d005      	beq.n	80048f4 <UART_SetConfig+0xa0>
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b8d      	ldr	r3, [pc, #564]	; (8004b24 <UART_SetConfig+0x2d0>)
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d104      	bne.n	80048fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048f4:	f7fe f906 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 80048f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048fc:	e003      	b.n	8004906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048fe:	f7fe f8ed 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8004902:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004910:	f040 810c 	bne.w	8004b2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004918:	2200      	movs	r2, #0
 800491a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800491e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004926:	4622      	mov	r2, r4
 8004928:	462b      	mov	r3, r5
 800492a:	1891      	adds	r1, r2, r2
 800492c:	65b9      	str	r1, [r7, #88]	; 0x58
 800492e:	415b      	adcs	r3, r3
 8004930:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004936:	4621      	mov	r1, r4
 8004938:	eb12 0801 	adds.w	r8, r2, r1
 800493c:	4629      	mov	r1, r5
 800493e:	eb43 0901 	adc.w	r9, r3, r1
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800494e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004956:	4690      	mov	r8, r2
 8004958:	4699      	mov	r9, r3
 800495a:	4623      	mov	r3, r4
 800495c:	eb18 0303 	adds.w	r3, r8, r3
 8004960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004964:	462b      	mov	r3, r5
 8004966:	eb49 0303 	adc.w	r3, r9, r3
 800496a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800496e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800497a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800497e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004982:	460b      	mov	r3, r1
 8004984:	18db      	adds	r3, r3, r3
 8004986:	653b      	str	r3, [r7, #80]	; 0x50
 8004988:	4613      	mov	r3, r2
 800498a:	eb42 0303 	adc.w	r3, r2, r3
 800498e:	657b      	str	r3, [r7, #84]	; 0x54
 8004990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004994:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004998:	f7fc f924 	bl	8000be4 <__aeabi_uldivmod>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4b61      	ldr	r3, [pc, #388]	; (8004b28 <UART_SetConfig+0x2d4>)
 80049a2:	fba3 2302 	umull	r2, r3, r3, r2
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	011c      	lsls	r4, r3, #4
 80049aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049bc:	4642      	mov	r2, r8
 80049be:	464b      	mov	r3, r9
 80049c0:	1891      	adds	r1, r2, r2
 80049c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80049c4:	415b      	adcs	r3, r3
 80049c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049cc:	4641      	mov	r1, r8
 80049ce:	eb12 0a01 	adds.w	sl, r2, r1
 80049d2:	4649      	mov	r1, r9
 80049d4:	eb43 0b01 	adc.w	fp, r3, r1
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049ec:	4692      	mov	sl, r2
 80049ee:	469b      	mov	fp, r3
 80049f0:	4643      	mov	r3, r8
 80049f2:	eb1a 0303 	adds.w	r3, sl, r3
 80049f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049fa:	464b      	mov	r3, r9
 80049fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004a00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	18db      	adds	r3, r3, r3
 8004a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a1e:	4613      	mov	r3, r2
 8004a20:	eb42 0303 	adc.w	r3, r2, r3
 8004a24:	647b      	str	r3, [r7, #68]	; 0x44
 8004a26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a2e:	f7fc f8d9 	bl	8000be4 <__aeabi_uldivmod>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4611      	mov	r1, r2
 8004a38:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <UART_SetConfig+0x2d4>)
 8004a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	2264      	movs	r2, #100	; 0x64
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
 8004a46:	1acb      	subs	r3, r1, r3
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a4e:	4b36      	ldr	r3, [pc, #216]	; (8004b28 <UART_SetConfig+0x2d4>)
 8004a50:	fba3 2302 	umull	r2, r3, r3, r2
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a5c:	441c      	add	r4, r3
 8004a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a70:	4642      	mov	r2, r8
 8004a72:	464b      	mov	r3, r9
 8004a74:	1891      	adds	r1, r2, r2
 8004a76:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a78:	415b      	adcs	r3, r3
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a80:	4641      	mov	r1, r8
 8004a82:	1851      	adds	r1, r2, r1
 8004a84:	6339      	str	r1, [r7, #48]	; 0x30
 8004a86:	4649      	mov	r1, r9
 8004a88:	414b      	adcs	r3, r1
 8004a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a98:	4659      	mov	r1, fp
 8004a9a:	00cb      	lsls	r3, r1, #3
 8004a9c:	4651      	mov	r1, sl
 8004a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa2:	4651      	mov	r1, sl
 8004aa4:	00ca      	lsls	r2, r1, #3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4642      	mov	r2, r8
 8004aae:	189b      	adds	r3, r3, r2
 8004ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ab4:	464b      	mov	r3, r9
 8004ab6:	460a      	mov	r2, r1
 8004ab8:	eb42 0303 	adc.w	r3, r2, r3
 8004abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004acc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	18db      	adds	r3, r3, r3
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ada:	4613      	mov	r3, r2
 8004adc:	eb42 0303 	adc.w	r3, r2, r3
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ae6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004aea:	f7fc f87b 	bl	8000be4 <__aeabi_uldivmod>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <UART_SetConfig+0x2d4>)
 8004af4:	fba3 1302 	umull	r1, r3, r3, r2
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	2164      	movs	r1, #100	; 0x64
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	3332      	adds	r3, #50	; 0x32
 8004b06:	4a08      	ldr	r2, [pc, #32]	; (8004b28 <UART_SetConfig+0x2d4>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	f003 0207 	and.w	r2, r3, #7
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4422      	add	r2, r4
 8004b1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b1c:	e106      	b.n	8004d2c <UART_SetConfig+0x4d8>
 8004b1e:	bf00      	nop
 8004b20:	40011000 	.word	0x40011000
 8004b24:	40011400 	.word	0x40011400
 8004b28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b30:	2200      	movs	r2, #0
 8004b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b3e:	4642      	mov	r2, r8
 8004b40:	464b      	mov	r3, r9
 8004b42:	1891      	adds	r1, r2, r2
 8004b44:	6239      	str	r1, [r7, #32]
 8004b46:	415b      	adcs	r3, r3
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b4e:	4641      	mov	r1, r8
 8004b50:	1854      	adds	r4, r2, r1
 8004b52:	4649      	mov	r1, r9
 8004b54:	eb43 0501 	adc.w	r5, r3, r1
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	00eb      	lsls	r3, r5, #3
 8004b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b66:	00e2      	lsls	r2, r4, #3
 8004b68:	4614      	mov	r4, r2
 8004b6a:	461d      	mov	r5, r3
 8004b6c:	4643      	mov	r3, r8
 8004b6e:	18e3      	adds	r3, r4, r3
 8004b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b74:	464b      	mov	r3, r9
 8004b76:	eb45 0303 	adc.w	r3, r5, r3
 8004b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b9a:	4629      	mov	r1, r5
 8004b9c:	008b      	lsls	r3, r1, #2
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	008a      	lsls	r2, r1, #2
 8004ba8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bac:	f7fc f81a 	bl	8000be4 <__aeabi_uldivmod>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4b60      	ldr	r3, [pc, #384]	; (8004d38 <UART_SetConfig+0x4e4>)
 8004bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	011c      	lsls	r4, r3, #4
 8004bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	1891      	adds	r1, r2, r2
 8004bd6:	61b9      	str	r1, [r7, #24]
 8004bd8:	415b      	adcs	r3, r3
 8004bda:	61fb      	str	r3, [r7, #28]
 8004bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be0:	4641      	mov	r1, r8
 8004be2:	1851      	adds	r1, r2, r1
 8004be4:	6139      	str	r1, [r7, #16]
 8004be6:	4649      	mov	r1, r9
 8004be8:	414b      	adcs	r3, r1
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bf8:	4659      	mov	r1, fp
 8004bfa:	00cb      	lsls	r3, r1, #3
 8004bfc:	4651      	mov	r1, sl
 8004bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c02:	4651      	mov	r1, sl
 8004c04:	00ca      	lsls	r2, r1, #3
 8004c06:	4610      	mov	r0, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4642      	mov	r2, r8
 8004c0e:	189b      	adds	r3, r3, r2
 8004c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c14:	464b      	mov	r3, r9
 8004c16:	460a      	mov	r2, r1
 8004c18:	eb42 0303 	adc.w	r3, r2, r3
 8004c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c38:	4649      	mov	r1, r9
 8004c3a:	008b      	lsls	r3, r1, #2
 8004c3c:	4641      	mov	r1, r8
 8004c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c42:	4641      	mov	r1, r8
 8004c44:	008a      	lsls	r2, r1, #2
 8004c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c4a:	f7fb ffcb 	bl	8000be4 <__aeabi_uldivmod>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	4b38      	ldr	r3, [pc, #224]	; (8004d38 <UART_SetConfig+0x4e4>)
 8004c56:	fba3 2301 	umull	r2, r3, r3, r1
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	2264      	movs	r2, #100	; 0x64
 8004c5e:	fb02 f303 	mul.w	r3, r2, r3
 8004c62:	1acb      	subs	r3, r1, r3
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	3332      	adds	r3, #50	; 0x32
 8004c68:	4a33      	ldr	r2, [pc, #204]	; (8004d38 <UART_SetConfig+0x4e4>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c74:	441c      	add	r4, r3
 8004c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	673b      	str	r3, [r7, #112]	; 0x70
 8004c7e:	677a      	str	r2, [r7, #116]	; 0x74
 8004c80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c84:	4642      	mov	r2, r8
 8004c86:	464b      	mov	r3, r9
 8004c88:	1891      	adds	r1, r2, r2
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	415b      	adcs	r3, r3
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c94:	4641      	mov	r1, r8
 8004c96:	1851      	adds	r1, r2, r1
 8004c98:	6039      	str	r1, [r7, #0]
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	414b      	adcs	r3, r1
 8004c9e:	607b      	str	r3, [r7, #4]
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cac:	4659      	mov	r1, fp
 8004cae:	00cb      	lsls	r3, r1, #3
 8004cb0:	4651      	mov	r1, sl
 8004cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cb6:	4651      	mov	r1, sl
 8004cb8:	00ca      	lsls	r2, r1, #3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	189b      	adds	r3, r3, r2
 8004cc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	460a      	mov	r2, r1
 8004cca:	eb42 0303 	adc.w	r3, r2, r3
 8004cce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8004cda:	667a      	str	r2, [r7, #100]	; 0x64
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ce8:	4649      	mov	r1, r9
 8004cea:	008b      	lsls	r3, r1, #2
 8004cec:	4641      	mov	r1, r8
 8004cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	008a      	lsls	r2, r1, #2
 8004cf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cfa:	f7fb ff73 	bl	8000be4 <__aeabi_uldivmod>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <UART_SetConfig+0x4e4>)
 8004d04:	fba3 1302 	umull	r1, r3, r3, r2
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	2164      	movs	r1, #100	; 0x64
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	3332      	adds	r3, #50	; 0x32
 8004d16:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <UART_SetConfig+0x4e4>)
 8004d18:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	f003 020f 	and.w	r2, r3, #15
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4422      	add	r2, r4
 8004d2a:	609a      	str	r2, [r3, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d32:	46bd      	mov	sp, r7
 8004d34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d38:	51eb851f 	.word	0x51eb851f

08004d3c <std>:
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	b510      	push	{r4, lr}
 8004d40:	4604      	mov	r4, r0
 8004d42:	e9c0 3300 	strd	r3, r3, [r0]
 8004d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d4a:	6083      	str	r3, [r0, #8]
 8004d4c:	8181      	strh	r1, [r0, #12]
 8004d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d50:	81c2      	strh	r2, [r0, #14]
 8004d52:	6183      	str	r3, [r0, #24]
 8004d54:	4619      	mov	r1, r3
 8004d56:	2208      	movs	r2, #8
 8004d58:	305c      	adds	r0, #92	; 0x5c
 8004d5a:	f000 f9e5 	bl	8005128 <memset>
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <std+0x58>)
 8004d60:	6263      	str	r3, [r4, #36]	; 0x24
 8004d62:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <std+0x5c>)
 8004d64:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d66:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <std+0x60>)
 8004d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <std+0x64>)
 8004d6c:	6323      	str	r3, [r4, #48]	; 0x30
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <std+0x68>)
 8004d70:	6224      	str	r4, [r4, #32]
 8004d72:	429c      	cmp	r4, r3
 8004d74:	d006      	beq.n	8004d84 <std+0x48>
 8004d76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004d7a:	4294      	cmp	r4, r2
 8004d7c:	d002      	beq.n	8004d84 <std+0x48>
 8004d7e:	33d0      	adds	r3, #208	; 0xd0
 8004d80:	429c      	cmp	r4, r3
 8004d82:	d105      	bne.n	8004d90 <std+0x54>
 8004d84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d8c:	f000 ba44 	b.w	8005218 <__retarget_lock_init_recursive>
 8004d90:	bd10      	pop	{r4, pc}
 8004d92:	bf00      	nop
 8004d94:	08004f79 	.word	0x08004f79
 8004d98:	08004f9b 	.word	0x08004f9b
 8004d9c:	08004fd3 	.word	0x08004fd3
 8004da0:	08004ff7 	.word	0x08004ff7
 8004da4:	20000f00 	.word	0x20000f00

08004da8 <stdio_exit_handler>:
 8004da8:	4a02      	ldr	r2, [pc, #8]	; (8004db4 <stdio_exit_handler+0xc>)
 8004daa:	4903      	ldr	r1, [pc, #12]	; (8004db8 <stdio_exit_handler+0x10>)
 8004dac:	4803      	ldr	r0, [pc, #12]	; (8004dbc <stdio_exit_handler+0x14>)
 8004dae:	f000 b869 	b.w	8004e84 <_fwalk_sglue>
 8004db2:	bf00      	nop
 8004db4:	2000000c 	.word	0x2000000c
 8004db8:	0800551d 	.word	0x0800551d
 8004dbc:	20000018 	.word	0x20000018

08004dc0 <cleanup_stdio>:
 8004dc0:	6841      	ldr	r1, [r0, #4]
 8004dc2:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <cleanup_stdio+0x34>)
 8004dc4:	4299      	cmp	r1, r3
 8004dc6:	b510      	push	{r4, lr}
 8004dc8:	4604      	mov	r4, r0
 8004dca:	d001      	beq.n	8004dd0 <cleanup_stdio+0x10>
 8004dcc:	f000 fba6 	bl	800551c <_fflush_r>
 8004dd0:	68a1      	ldr	r1, [r4, #8]
 8004dd2:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <cleanup_stdio+0x38>)
 8004dd4:	4299      	cmp	r1, r3
 8004dd6:	d002      	beq.n	8004dde <cleanup_stdio+0x1e>
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f000 fb9f 	bl	800551c <_fflush_r>
 8004dde:	68e1      	ldr	r1, [r4, #12]
 8004de0:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <cleanup_stdio+0x3c>)
 8004de2:	4299      	cmp	r1, r3
 8004de4:	d004      	beq.n	8004df0 <cleanup_stdio+0x30>
 8004de6:	4620      	mov	r0, r4
 8004de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dec:	f000 bb96 	b.w	800551c <_fflush_r>
 8004df0:	bd10      	pop	{r4, pc}
 8004df2:	bf00      	nop
 8004df4:	20000f00 	.word	0x20000f00
 8004df8:	20000f68 	.word	0x20000f68
 8004dfc:	20000fd0 	.word	0x20000fd0

08004e00 <global_stdio_init.part.0>:
 8004e00:	b510      	push	{r4, lr}
 8004e02:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <global_stdio_init.part.0+0x30>)
 8004e04:	4c0b      	ldr	r4, [pc, #44]	; (8004e34 <global_stdio_init.part.0+0x34>)
 8004e06:	4a0c      	ldr	r2, [pc, #48]	; (8004e38 <global_stdio_init.part.0+0x38>)
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2104      	movs	r1, #4
 8004e10:	f7ff ff94 	bl	8004d3c <std>
 8004e14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004e18:	2201      	movs	r2, #1
 8004e1a:	2109      	movs	r1, #9
 8004e1c:	f7ff ff8e 	bl	8004d3c <std>
 8004e20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e24:	2202      	movs	r2, #2
 8004e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e2a:	2112      	movs	r1, #18
 8004e2c:	f7ff bf86 	b.w	8004d3c <std>
 8004e30:	20001038 	.word	0x20001038
 8004e34:	20000f00 	.word	0x20000f00
 8004e38:	08004da9 	.word	0x08004da9

08004e3c <__sfp_lock_acquire>:
 8004e3c:	4801      	ldr	r0, [pc, #4]	; (8004e44 <__sfp_lock_acquire+0x8>)
 8004e3e:	f000 b9ec 	b.w	800521a <__retarget_lock_acquire_recursive>
 8004e42:	bf00      	nop
 8004e44:	20001041 	.word	0x20001041

08004e48 <__sfp_lock_release>:
 8004e48:	4801      	ldr	r0, [pc, #4]	; (8004e50 <__sfp_lock_release+0x8>)
 8004e4a:	f000 b9e7 	b.w	800521c <__retarget_lock_release_recursive>
 8004e4e:	bf00      	nop
 8004e50:	20001041 	.word	0x20001041

08004e54 <__sinit>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	4604      	mov	r4, r0
 8004e58:	f7ff fff0 	bl	8004e3c <__sfp_lock_acquire>
 8004e5c:	6a23      	ldr	r3, [r4, #32]
 8004e5e:	b11b      	cbz	r3, 8004e68 <__sinit+0x14>
 8004e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e64:	f7ff bff0 	b.w	8004e48 <__sfp_lock_release>
 8004e68:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <__sinit+0x28>)
 8004e6a:	6223      	str	r3, [r4, #32]
 8004e6c:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <__sinit+0x2c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f5      	bne.n	8004e60 <__sinit+0xc>
 8004e74:	f7ff ffc4 	bl	8004e00 <global_stdio_init.part.0>
 8004e78:	e7f2      	b.n	8004e60 <__sinit+0xc>
 8004e7a:	bf00      	nop
 8004e7c:	08004dc1 	.word	0x08004dc1
 8004e80:	20001038 	.word	0x20001038

08004e84 <_fwalk_sglue>:
 8004e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e88:	4607      	mov	r7, r0
 8004e8a:	4688      	mov	r8, r1
 8004e8c:	4614      	mov	r4, r2
 8004e8e:	2600      	movs	r6, #0
 8004e90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e94:	f1b9 0901 	subs.w	r9, r9, #1
 8004e98:	d505      	bpl.n	8004ea6 <_fwalk_sglue+0x22>
 8004e9a:	6824      	ldr	r4, [r4, #0]
 8004e9c:	2c00      	cmp	r4, #0
 8004e9e:	d1f7      	bne.n	8004e90 <_fwalk_sglue+0xc>
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ea6:	89ab      	ldrh	r3, [r5, #12]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d907      	bls.n	8004ebc <_fwalk_sglue+0x38>
 8004eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	d003      	beq.n	8004ebc <_fwalk_sglue+0x38>
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	47c0      	blx	r8
 8004eba:	4306      	orrs	r6, r0
 8004ebc:	3568      	adds	r5, #104	; 0x68
 8004ebe:	e7e9      	b.n	8004e94 <_fwalk_sglue+0x10>

08004ec0 <_puts_r>:
 8004ec0:	6a03      	ldr	r3, [r0, #32]
 8004ec2:	b570      	push	{r4, r5, r6, lr}
 8004ec4:	6884      	ldr	r4, [r0, #8]
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	460e      	mov	r6, r1
 8004eca:	b90b      	cbnz	r3, 8004ed0 <_puts_r+0x10>
 8004ecc:	f7ff ffc2 	bl	8004e54 <__sinit>
 8004ed0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ed2:	07db      	lsls	r3, r3, #31
 8004ed4:	d405      	bmi.n	8004ee2 <_puts_r+0x22>
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	0598      	lsls	r0, r3, #22
 8004eda:	d402      	bmi.n	8004ee2 <_puts_r+0x22>
 8004edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ede:	f000 f99c 	bl	800521a <__retarget_lock_acquire_recursive>
 8004ee2:	89a3      	ldrh	r3, [r4, #12]
 8004ee4:	0719      	lsls	r1, r3, #28
 8004ee6:	d513      	bpl.n	8004f10 <_puts_r+0x50>
 8004ee8:	6923      	ldr	r3, [r4, #16]
 8004eea:	b18b      	cbz	r3, 8004f10 <_puts_r+0x50>
 8004eec:	3e01      	subs	r6, #1
 8004eee:	68a3      	ldr	r3, [r4, #8]
 8004ef0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	60a3      	str	r3, [r4, #8]
 8004ef8:	b9e9      	cbnz	r1, 8004f36 <_puts_r+0x76>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	da2e      	bge.n	8004f5c <_puts_r+0x9c>
 8004efe:	4622      	mov	r2, r4
 8004f00:	210a      	movs	r1, #10
 8004f02:	4628      	mov	r0, r5
 8004f04:	f000 f87b 	bl	8004ffe <__swbuf_r>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d007      	beq.n	8004f1c <_puts_r+0x5c>
 8004f0c:	250a      	movs	r5, #10
 8004f0e:	e007      	b.n	8004f20 <_puts_r+0x60>
 8004f10:	4621      	mov	r1, r4
 8004f12:	4628      	mov	r0, r5
 8004f14:	f000 f8b0 	bl	8005078 <__swsetup_r>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d0e7      	beq.n	8004eec <_puts_r+0x2c>
 8004f1c:	f04f 35ff 	mov.w	r5, #4294967295
 8004f20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f22:	07da      	lsls	r2, r3, #31
 8004f24:	d405      	bmi.n	8004f32 <_puts_r+0x72>
 8004f26:	89a3      	ldrh	r3, [r4, #12]
 8004f28:	059b      	lsls	r3, r3, #22
 8004f2a:	d402      	bmi.n	8004f32 <_puts_r+0x72>
 8004f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f2e:	f000 f975 	bl	800521c <__retarget_lock_release_recursive>
 8004f32:	4628      	mov	r0, r5
 8004f34:	bd70      	pop	{r4, r5, r6, pc}
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	da04      	bge.n	8004f44 <_puts_r+0x84>
 8004f3a:	69a2      	ldr	r2, [r4, #24]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	dc06      	bgt.n	8004f4e <_puts_r+0x8e>
 8004f40:	290a      	cmp	r1, #10
 8004f42:	d004      	beq.n	8004f4e <_puts_r+0x8e>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	6022      	str	r2, [r4, #0]
 8004f4a:	7019      	strb	r1, [r3, #0]
 8004f4c:	e7cf      	b.n	8004eee <_puts_r+0x2e>
 8004f4e:	4622      	mov	r2, r4
 8004f50:	4628      	mov	r0, r5
 8004f52:	f000 f854 	bl	8004ffe <__swbuf_r>
 8004f56:	3001      	adds	r0, #1
 8004f58:	d1c9      	bne.n	8004eee <_puts_r+0x2e>
 8004f5a:	e7df      	b.n	8004f1c <_puts_r+0x5c>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	250a      	movs	r5, #10
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	6022      	str	r2, [r4, #0]
 8004f64:	701d      	strb	r5, [r3, #0]
 8004f66:	e7db      	b.n	8004f20 <_puts_r+0x60>

08004f68 <puts>:
 8004f68:	4b02      	ldr	r3, [pc, #8]	; (8004f74 <puts+0xc>)
 8004f6a:	4601      	mov	r1, r0
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	f7ff bfa7 	b.w	8004ec0 <_puts_r>
 8004f72:	bf00      	nop
 8004f74:	20000064 	.word	0x20000064

08004f78 <__sread>:
 8004f78:	b510      	push	{r4, lr}
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f80:	f000 f8fc 	bl	800517c <_read_r>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	bfab      	itete	ge
 8004f88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f8c:	181b      	addge	r3, r3, r0
 8004f8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f92:	bfac      	ite	ge
 8004f94:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f96:	81a3      	strhlt	r3, [r4, #12]
 8004f98:	bd10      	pop	{r4, pc}

08004f9a <__swrite>:
 8004f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f9e:	461f      	mov	r7, r3
 8004fa0:	898b      	ldrh	r3, [r1, #12]
 8004fa2:	05db      	lsls	r3, r3, #23
 8004fa4:	4605      	mov	r5, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	4616      	mov	r6, r2
 8004faa:	d505      	bpl.n	8004fb8 <__swrite+0x1e>
 8004fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f000 f8d0 	bl	8005158 <_lseek_r>
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fc2:	81a3      	strh	r3, [r4, #12]
 8004fc4:	4632      	mov	r2, r6
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	4628      	mov	r0, r5
 8004fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fce:	f000 b8e7 	b.w	80051a0 <_write_r>

08004fd2 <__sseek>:
 8004fd2:	b510      	push	{r4, lr}
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fda:	f000 f8bd 	bl	8005158 <_lseek_r>
 8004fde:	1c43      	adds	r3, r0, #1
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	bf15      	itete	ne
 8004fe4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fee:	81a3      	strheq	r3, [r4, #12]
 8004ff0:	bf18      	it	ne
 8004ff2:	81a3      	strhne	r3, [r4, #12]
 8004ff4:	bd10      	pop	{r4, pc}

08004ff6 <__sclose>:
 8004ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ffa:	f000 b89d 	b.w	8005138 <_close_r>

08004ffe <__swbuf_r>:
 8004ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005000:	460e      	mov	r6, r1
 8005002:	4614      	mov	r4, r2
 8005004:	4605      	mov	r5, r0
 8005006:	b118      	cbz	r0, 8005010 <__swbuf_r+0x12>
 8005008:	6a03      	ldr	r3, [r0, #32]
 800500a:	b90b      	cbnz	r3, 8005010 <__swbuf_r+0x12>
 800500c:	f7ff ff22 	bl	8004e54 <__sinit>
 8005010:	69a3      	ldr	r3, [r4, #24]
 8005012:	60a3      	str	r3, [r4, #8]
 8005014:	89a3      	ldrh	r3, [r4, #12]
 8005016:	071a      	lsls	r2, r3, #28
 8005018:	d525      	bpl.n	8005066 <__swbuf_r+0x68>
 800501a:	6923      	ldr	r3, [r4, #16]
 800501c:	b31b      	cbz	r3, 8005066 <__swbuf_r+0x68>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	6922      	ldr	r2, [r4, #16]
 8005022:	1a98      	subs	r0, r3, r2
 8005024:	6963      	ldr	r3, [r4, #20]
 8005026:	b2f6      	uxtb	r6, r6
 8005028:	4283      	cmp	r3, r0
 800502a:	4637      	mov	r7, r6
 800502c:	dc04      	bgt.n	8005038 <__swbuf_r+0x3a>
 800502e:	4621      	mov	r1, r4
 8005030:	4628      	mov	r0, r5
 8005032:	f000 fa73 	bl	800551c <_fflush_r>
 8005036:	b9e0      	cbnz	r0, 8005072 <__swbuf_r+0x74>
 8005038:	68a3      	ldr	r3, [r4, #8]
 800503a:	3b01      	subs	r3, #1
 800503c:	60a3      	str	r3, [r4, #8]
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	6022      	str	r2, [r4, #0]
 8005044:	701e      	strb	r6, [r3, #0]
 8005046:	6962      	ldr	r2, [r4, #20]
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	429a      	cmp	r2, r3
 800504c:	d004      	beq.n	8005058 <__swbuf_r+0x5a>
 800504e:	89a3      	ldrh	r3, [r4, #12]
 8005050:	07db      	lsls	r3, r3, #31
 8005052:	d506      	bpl.n	8005062 <__swbuf_r+0x64>
 8005054:	2e0a      	cmp	r6, #10
 8005056:	d104      	bne.n	8005062 <__swbuf_r+0x64>
 8005058:	4621      	mov	r1, r4
 800505a:	4628      	mov	r0, r5
 800505c:	f000 fa5e 	bl	800551c <_fflush_r>
 8005060:	b938      	cbnz	r0, 8005072 <__swbuf_r+0x74>
 8005062:	4638      	mov	r0, r7
 8005064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005066:	4621      	mov	r1, r4
 8005068:	4628      	mov	r0, r5
 800506a:	f000 f805 	bl	8005078 <__swsetup_r>
 800506e:	2800      	cmp	r0, #0
 8005070:	d0d5      	beq.n	800501e <__swbuf_r+0x20>
 8005072:	f04f 37ff 	mov.w	r7, #4294967295
 8005076:	e7f4      	b.n	8005062 <__swbuf_r+0x64>

08005078 <__swsetup_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4b2a      	ldr	r3, [pc, #168]	; (8005124 <__swsetup_r+0xac>)
 800507c:	4605      	mov	r5, r0
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	460c      	mov	r4, r1
 8005082:	b118      	cbz	r0, 800508c <__swsetup_r+0x14>
 8005084:	6a03      	ldr	r3, [r0, #32]
 8005086:	b90b      	cbnz	r3, 800508c <__swsetup_r+0x14>
 8005088:	f7ff fee4 	bl	8004e54 <__sinit>
 800508c:	89a3      	ldrh	r3, [r4, #12]
 800508e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005092:	0718      	lsls	r0, r3, #28
 8005094:	d422      	bmi.n	80050dc <__swsetup_r+0x64>
 8005096:	06d9      	lsls	r1, r3, #27
 8005098:	d407      	bmi.n	80050aa <__swsetup_r+0x32>
 800509a:	2309      	movs	r3, #9
 800509c:	602b      	str	r3, [r5, #0]
 800509e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050a2:	81a3      	strh	r3, [r4, #12]
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295
 80050a8:	e034      	b.n	8005114 <__swsetup_r+0x9c>
 80050aa:	0758      	lsls	r0, r3, #29
 80050ac:	d512      	bpl.n	80050d4 <__swsetup_r+0x5c>
 80050ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050b0:	b141      	cbz	r1, 80050c4 <__swsetup_r+0x4c>
 80050b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050b6:	4299      	cmp	r1, r3
 80050b8:	d002      	beq.n	80050c0 <__swsetup_r+0x48>
 80050ba:	4628      	mov	r0, r5
 80050bc:	f000 f8b0 	bl	8005220 <_free_r>
 80050c0:	2300      	movs	r3, #0
 80050c2:	6363      	str	r3, [r4, #52]	; 0x34
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050ca:	81a3      	strh	r3, [r4, #12]
 80050cc:	2300      	movs	r3, #0
 80050ce:	6063      	str	r3, [r4, #4]
 80050d0:	6923      	ldr	r3, [r4, #16]
 80050d2:	6023      	str	r3, [r4, #0]
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	f043 0308 	orr.w	r3, r3, #8
 80050da:	81a3      	strh	r3, [r4, #12]
 80050dc:	6923      	ldr	r3, [r4, #16]
 80050de:	b94b      	cbnz	r3, 80050f4 <__swsetup_r+0x7c>
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ea:	d003      	beq.n	80050f4 <__swsetup_r+0x7c>
 80050ec:	4621      	mov	r1, r4
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 fa62 	bl	80055b8 <__smakebuf_r>
 80050f4:	89a0      	ldrh	r0, [r4, #12]
 80050f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050fa:	f010 0301 	ands.w	r3, r0, #1
 80050fe:	d00a      	beq.n	8005116 <__swsetup_r+0x9e>
 8005100:	2300      	movs	r3, #0
 8005102:	60a3      	str	r3, [r4, #8]
 8005104:	6963      	ldr	r3, [r4, #20]
 8005106:	425b      	negs	r3, r3
 8005108:	61a3      	str	r3, [r4, #24]
 800510a:	6923      	ldr	r3, [r4, #16]
 800510c:	b943      	cbnz	r3, 8005120 <__swsetup_r+0xa8>
 800510e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005112:	d1c4      	bne.n	800509e <__swsetup_r+0x26>
 8005114:	bd38      	pop	{r3, r4, r5, pc}
 8005116:	0781      	lsls	r1, r0, #30
 8005118:	bf58      	it	pl
 800511a:	6963      	ldrpl	r3, [r4, #20]
 800511c:	60a3      	str	r3, [r4, #8]
 800511e:	e7f4      	b.n	800510a <__swsetup_r+0x92>
 8005120:	2000      	movs	r0, #0
 8005122:	e7f7      	b.n	8005114 <__swsetup_r+0x9c>
 8005124:	20000064 	.word	0x20000064

08005128 <memset>:
 8005128:	4402      	add	r2, r0
 800512a:	4603      	mov	r3, r0
 800512c:	4293      	cmp	r3, r2
 800512e:	d100      	bne.n	8005132 <memset+0xa>
 8005130:	4770      	bx	lr
 8005132:	f803 1b01 	strb.w	r1, [r3], #1
 8005136:	e7f9      	b.n	800512c <memset+0x4>

08005138 <_close_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	4d06      	ldr	r5, [pc, #24]	; (8005154 <_close_r+0x1c>)
 800513c:	2300      	movs	r3, #0
 800513e:	4604      	mov	r4, r0
 8005140:	4608      	mov	r0, r1
 8005142:	602b      	str	r3, [r5, #0]
 8005144:	f7fc fc63 	bl	8001a0e <_close>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d102      	bne.n	8005152 <_close_r+0x1a>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	b103      	cbz	r3, 8005152 <_close_r+0x1a>
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	2000103c 	.word	0x2000103c

08005158 <_lseek_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4d07      	ldr	r5, [pc, #28]	; (8005178 <_lseek_r+0x20>)
 800515c:	4604      	mov	r4, r0
 800515e:	4608      	mov	r0, r1
 8005160:	4611      	mov	r1, r2
 8005162:	2200      	movs	r2, #0
 8005164:	602a      	str	r2, [r5, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	f7fc fc78 	bl	8001a5c <_lseek>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	d102      	bne.n	8005176 <_lseek_r+0x1e>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	b103      	cbz	r3, 8005176 <_lseek_r+0x1e>
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	2000103c 	.word	0x2000103c

0800517c <_read_r>:
 800517c:	b538      	push	{r3, r4, r5, lr}
 800517e:	4d07      	ldr	r5, [pc, #28]	; (800519c <_read_r+0x20>)
 8005180:	4604      	mov	r4, r0
 8005182:	4608      	mov	r0, r1
 8005184:	4611      	mov	r1, r2
 8005186:	2200      	movs	r2, #0
 8005188:	602a      	str	r2, [r5, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	f7fc fc06 	bl	800199c <_read>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d102      	bne.n	800519a <_read_r+0x1e>
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	b103      	cbz	r3, 800519a <_read_r+0x1e>
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	2000103c 	.word	0x2000103c

080051a0 <_write_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4d07      	ldr	r5, [pc, #28]	; (80051c0 <_write_r+0x20>)
 80051a4:	4604      	mov	r4, r0
 80051a6:	4608      	mov	r0, r1
 80051a8:	4611      	mov	r1, r2
 80051aa:	2200      	movs	r2, #0
 80051ac:	602a      	str	r2, [r5, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	f7fc fc11 	bl	80019d6 <_write>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d102      	bne.n	80051be <_write_r+0x1e>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	b103      	cbz	r3, 80051be <_write_r+0x1e>
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	2000103c 	.word	0x2000103c

080051c4 <__errno>:
 80051c4:	4b01      	ldr	r3, [pc, #4]	; (80051cc <__errno+0x8>)
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000064 	.word	0x20000064

080051d0 <__libc_init_array>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	4d0d      	ldr	r5, [pc, #52]	; (8005208 <__libc_init_array+0x38>)
 80051d4:	4c0d      	ldr	r4, [pc, #52]	; (800520c <__libc_init_array+0x3c>)
 80051d6:	1b64      	subs	r4, r4, r5
 80051d8:	10a4      	asrs	r4, r4, #2
 80051da:	2600      	movs	r6, #0
 80051dc:	42a6      	cmp	r6, r4
 80051de:	d109      	bne.n	80051f4 <__libc_init_array+0x24>
 80051e0:	4d0b      	ldr	r5, [pc, #44]	; (8005210 <__libc_init_array+0x40>)
 80051e2:	4c0c      	ldr	r4, [pc, #48]	; (8005214 <__libc_init_array+0x44>)
 80051e4:	f001 faf8 	bl	80067d8 <_init>
 80051e8:	1b64      	subs	r4, r4, r5
 80051ea:	10a4      	asrs	r4, r4, #2
 80051ec:	2600      	movs	r6, #0
 80051ee:	42a6      	cmp	r6, r4
 80051f0:	d105      	bne.n	80051fe <__libc_init_array+0x2e>
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f8:	4798      	blx	r3
 80051fa:	3601      	adds	r6, #1
 80051fc:	e7ee      	b.n	80051dc <__libc_init_array+0xc>
 80051fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005202:	4798      	blx	r3
 8005204:	3601      	adds	r6, #1
 8005206:	e7f2      	b.n	80051ee <__libc_init_array+0x1e>
 8005208:	08006a20 	.word	0x08006a20
 800520c:	08006a20 	.word	0x08006a20
 8005210:	08006a20 	.word	0x08006a20
 8005214:	08006a24 	.word	0x08006a24

08005218 <__retarget_lock_init_recursive>:
 8005218:	4770      	bx	lr

0800521a <__retarget_lock_acquire_recursive>:
 800521a:	4770      	bx	lr

0800521c <__retarget_lock_release_recursive>:
 800521c:	4770      	bx	lr
	...

08005220 <_free_r>:
 8005220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005222:	2900      	cmp	r1, #0
 8005224:	d044      	beq.n	80052b0 <_free_r+0x90>
 8005226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522a:	9001      	str	r0, [sp, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f1a1 0404 	sub.w	r4, r1, #4
 8005232:	bfb8      	it	lt
 8005234:	18e4      	addlt	r4, r4, r3
 8005236:	f000 f8df 	bl	80053f8 <__malloc_lock>
 800523a:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <_free_r+0x94>)
 800523c:	9801      	ldr	r0, [sp, #4]
 800523e:	6813      	ldr	r3, [r2, #0]
 8005240:	b933      	cbnz	r3, 8005250 <_free_r+0x30>
 8005242:	6063      	str	r3, [r4, #4]
 8005244:	6014      	str	r4, [r2, #0]
 8005246:	b003      	add	sp, #12
 8005248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800524c:	f000 b8da 	b.w	8005404 <__malloc_unlock>
 8005250:	42a3      	cmp	r3, r4
 8005252:	d908      	bls.n	8005266 <_free_r+0x46>
 8005254:	6825      	ldr	r5, [r4, #0]
 8005256:	1961      	adds	r1, r4, r5
 8005258:	428b      	cmp	r3, r1
 800525a:	bf01      	itttt	eq
 800525c:	6819      	ldreq	r1, [r3, #0]
 800525e:	685b      	ldreq	r3, [r3, #4]
 8005260:	1949      	addeq	r1, r1, r5
 8005262:	6021      	streq	r1, [r4, #0]
 8005264:	e7ed      	b.n	8005242 <_free_r+0x22>
 8005266:	461a      	mov	r2, r3
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	b10b      	cbz	r3, 8005270 <_free_r+0x50>
 800526c:	42a3      	cmp	r3, r4
 800526e:	d9fa      	bls.n	8005266 <_free_r+0x46>
 8005270:	6811      	ldr	r1, [r2, #0]
 8005272:	1855      	adds	r5, r2, r1
 8005274:	42a5      	cmp	r5, r4
 8005276:	d10b      	bne.n	8005290 <_free_r+0x70>
 8005278:	6824      	ldr	r4, [r4, #0]
 800527a:	4421      	add	r1, r4
 800527c:	1854      	adds	r4, r2, r1
 800527e:	42a3      	cmp	r3, r4
 8005280:	6011      	str	r1, [r2, #0]
 8005282:	d1e0      	bne.n	8005246 <_free_r+0x26>
 8005284:	681c      	ldr	r4, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	6053      	str	r3, [r2, #4]
 800528a:	440c      	add	r4, r1
 800528c:	6014      	str	r4, [r2, #0]
 800528e:	e7da      	b.n	8005246 <_free_r+0x26>
 8005290:	d902      	bls.n	8005298 <_free_r+0x78>
 8005292:	230c      	movs	r3, #12
 8005294:	6003      	str	r3, [r0, #0]
 8005296:	e7d6      	b.n	8005246 <_free_r+0x26>
 8005298:	6825      	ldr	r5, [r4, #0]
 800529a:	1961      	adds	r1, r4, r5
 800529c:	428b      	cmp	r3, r1
 800529e:	bf04      	itt	eq
 80052a0:	6819      	ldreq	r1, [r3, #0]
 80052a2:	685b      	ldreq	r3, [r3, #4]
 80052a4:	6063      	str	r3, [r4, #4]
 80052a6:	bf04      	itt	eq
 80052a8:	1949      	addeq	r1, r1, r5
 80052aa:	6021      	streq	r1, [r4, #0]
 80052ac:	6054      	str	r4, [r2, #4]
 80052ae:	e7ca      	b.n	8005246 <_free_r+0x26>
 80052b0:	b003      	add	sp, #12
 80052b2:	bd30      	pop	{r4, r5, pc}
 80052b4:	20001044 	.word	0x20001044

080052b8 <sbrk_aligned>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	4e0e      	ldr	r6, [pc, #56]	; (80052f4 <sbrk_aligned+0x3c>)
 80052bc:	460c      	mov	r4, r1
 80052be:	6831      	ldr	r1, [r6, #0]
 80052c0:	4605      	mov	r5, r0
 80052c2:	b911      	cbnz	r1, 80052ca <sbrk_aligned+0x12>
 80052c4:	f000 f9d6 	bl	8005674 <_sbrk_r>
 80052c8:	6030      	str	r0, [r6, #0]
 80052ca:	4621      	mov	r1, r4
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 f9d1 	bl	8005674 <_sbrk_r>
 80052d2:	1c43      	adds	r3, r0, #1
 80052d4:	d00a      	beq.n	80052ec <sbrk_aligned+0x34>
 80052d6:	1cc4      	adds	r4, r0, #3
 80052d8:	f024 0403 	bic.w	r4, r4, #3
 80052dc:	42a0      	cmp	r0, r4
 80052de:	d007      	beq.n	80052f0 <sbrk_aligned+0x38>
 80052e0:	1a21      	subs	r1, r4, r0
 80052e2:	4628      	mov	r0, r5
 80052e4:	f000 f9c6 	bl	8005674 <_sbrk_r>
 80052e8:	3001      	adds	r0, #1
 80052ea:	d101      	bne.n	80052f0 <sbrk_aligned+0x38>
 80052ec:	f04f 34ff 	mov.w	r4, #4294967295
 80052f0:	4620      	mov	r0, r4
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	20001048 	.word	0x20001048

080052f8 <_malloc_r>:
 80052f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052fc:	1ccd      	adds	r5, r1, #3
 80052fe:	f025 0503 	bic.w	r5, r5, #3
 8005302:	3508      	adds	r5, #8
 8005304:	2d0c      	cmp	r5, #12
 8005306:	bf38      	it	cc
 8005308:	250c      	movcc	r5, #12
 800530a:	2d00      	cmp	r5, #0
 800530c:	4607      	mov	r7, r0
 800530e:	db01      	blt.n	8005314 <_malloc_r+0x1c>
 8005310:	42a9      	cmp	r1, r5
 8005312:	d905      	bls.n	8005320 <_malloc_r+0x28>
 8005314:	230c      	movs	r3, #12
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	2600      	movs	r6, #0
 800531a:	4630      	mov	r0, r6
 800531c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005320:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053f4 <_malloc_r+0xfc>
 8005324:	f000 f868 	bl	80053f8 <__malloc_lock>
 8005328:	f8d8 3000 	ldr.w	r3, [r8]
 800532c:	461c      	mov	r4, r3
 800532e:	bb5c      	cbnz	r4, 8005388 <_malloc_r+0x90>
 8005330:	4629      	mov	r1, r5
 8005332:	4638      	mov	r0, r7
 8005334:	f7ff ffc0 	bl	80052b8 <sbrk_aligned>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	4604      	mov	r4, r0
 800533c:	d155      	bne.n	80053ea <_malloc_r+0xf2>
 800533e:	f8d8 4000 	ldr.w	r4, [r8]
 8005342:	4626      	mov	r6, r4
 8005344:	2e00      	cmp	r6, #0
 8005346:	d145      	bne.n	80053d4 <_malloc_r+0xdc>
 8005348:	2c00      	cmp	r4, #0
 800534a:	d048      	beq.n	80053de <_malloc_r+0xe6>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	4631      	mov	r1, r6
 8005350:	4638      	mov	r0, r7
 8005352:	eb04 0903 	add.w	r9, r4, r3
 8005356:	f000 f98d 	bl	8005674 <_sbrk_r>
 800535a:	4581      	cmp	r9, r0
 800535c:	d13f      	bne.n	80053de <_malloc_r+0xe6>
 800535e:	6821      	ldr	r1, [r4, #0]
 8005360:	1a6d      	subs	r5, r5, r1
 8005362:	4629      	mov	r1, r5
 8005364:	4638      	mov	r0, r7
 8005366:	f7ff ffa7 	bl	80052b8 <sbrk_aligned>
 800536a:	3001      	adds	r0, #1
 800536c:	d037      	beq.n	80053de <_malloc_r+0xe6>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	442b      	add	r3, r5
 8005372:	6023      	str	r3, [r4, #0]
 8005374:	f8d8 3000 	ldr.w	r3, [r8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d038      	beq.n	80053ee <_malloc_r+0xf6>
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	42a2      	cmp	r2, r4
 8005380:	d12b      	bne.n	80053da <_malloc_r+0xe2>
 8005382:	2200      	movs	r2, #0
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	e00f      	b.n	80053a8 <_malloc_r+0xb0>
 8005388:	6822      	ldr	r2, [r4, #0]
 800538a:	1b52      	subs	r2, r2, r5
 800538c:	d41f      	bmi.n	80053ce <_malloc_r+0xd6>
 800538e:	2a0b      	cmp	r2, #11
 8005390:	d917      	bls.n	80053c2 <_malloc_r+0xca>
 8005392:	1961      	adds	r1, r4, r5
 8005394:	42a3      	cmp	r3, r4
 8005396:	6025      	str	r5, [r4, #0]
 8005398:	bf18      	it	ne
 800539a:	6059      	strne	r1, [r3, #4]
 800539c:	6863      	ldr	r3, [r4, #4]
 800539e:	bf08      	it	eq
 80053a0:	f8c8 1000 	streq.w	r1, [r8]
 80053a4:	5162      	str	r2, [r4, r5]
 80053a6:	604b      	str	r3, [r1, #4]
 80053a8:	4638      	mov	r0, r7
 80053aa:	f104 060b 	add.w	r6, r4, #11
 80053ae:	f000 f829 	bl	8005404 <__malloc_unlock>
 80053b2:	f026 0607 	bic.w	r6, r6, #7
 80053b6:	1d23      	adds	r3, r4, #4
 80053b8:	1af2      	subs	r2, r6, r3
 80053ba:	d0ae      	beq.n	800531a <_malloc_r+0x22>
 80053bc:	1b9b      	subs	r3, r3, r6
 80053be:	50a3      	str	r3, [r4, r2]
 80053c0:	e7ab      	b.n	800531a <_malloc_r+0x22>
 80053c2:	42a3      	cmp	r3, r4
 80053c4:	6862      	ldr	r2, [r4, #4]
 80053c6:	d1dd      	bne.n	8005384 <_malloc_r+0x8c>
 80053c8:	f8c8 2000 	str.w	r2, [r8]
 80053cc:	e7ec      	b.n	80053a8 <_malloc_r+0xb0>
 80053ce:	4623      	mov	r3, r4
 80053d0:	6864      	ldr	r4, [r4, #4]
 80053d2:	e7ac      	b.n	800532e <_malloc_r+0x36>
 80053d4:	4634      	mov	r4, r6
 80053d6:	6876      	ldr	r6, [r6, #4]
 80053d8:	e7b4      	b.n	8005344 <_malloc_r+0x4c>
 80053da:	4613      	mov	r3, r2
 80053dc:	e7cc      	b.n	8005378 <_malloc_r+0x80>
 80053de:	230c      	movs	r3, #12
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	4638      	mov	r0, r7
 80053e4:	f000 f80e 	bl	8005404 <__malloc_unlock>
 80053e8:	e797      	b.n	800531a <_malloc_r+0x22>
 80053ea:	6025      	str	r5, [r4, #0]
 80053ec:	e7dc      	b.n	80053a8 <_malloc_r+0xb0>
 80053ee:	605b      	str	r3, [r3, #4]
 80053f0:	deff      	udf	#255	; 0xff
 80053f2:	bf00      	nop
 80053f4:	20001044 	.word	0x20001044

080053f8 <__malloc_lock>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__malloc_lock+0x8>)
 80053fa:	f7ff bf0e 	b.w	800521a <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	20001040 	.word	0x20001040

08005404 <__malloc_unlock>:
 8005404:	4801      	ldr	r0, [pc, #4]	; (800540c <__malloc_unlock+0x8>)
 8005406:	f7ff bf09 	b.w	800521c <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	20001040 	.word	0x20001040

08005410 <__sflush_r>:
 8005410:	898a      	ldrh	r2, [r1, #12]
 8005412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005416:	4605      	mov	r5, r0
 8005418:	0710      	lsls	r0, r2, #28
 800541a:	460c      	mov	r4, r1
 800541c:	d458      	bmi.n	80054d0 <__sflush_r+0xc0>
 800541e:	684b      	ldr	r3, [r1, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	dc05      	bgt.n	8005430 <__sflush_r+0x20>
 8005424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	dc02      	bgt.n	8005430 <__sflush_r+0x20>
 800542a:	2000      	movs	r0, #0
 800542c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005432:	2e00      	cmp	r6, #0
 8005434:	d0f9      	beq.n	800542a <__sflush_r+0x1a>
 8005436:	2300      	movs	r3, #0
 8005438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800543c:	682f      	ldr	r7, [r5, #0]
 800543e:	6a21      	ldr	r1, [r4, #32]
 8005440:	602b      	str	r3, [r5, #0]
 8005442:	d032      	beq.n	80054aa <__sflush_r+0x9a>
 8005444:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	075a      	lsls	r2, r3, #29
 800544a:	d505      	bpl.n	8005458 <__sflush_r+0x48>
 800544c:	6863      	ldr	r3, [r4, #4]
 800544e:	1ac0      	subs	r0, r0, r3
 8005450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005452:	b10b      	cbz	r3, 8005458 <__sflush_r+0x48>
 8005454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005456:	1ac0      	subs	r0, r0, r3
 8005458:	2300      	movs	r3, #0
 800545a:	4602      	mov	r2, r0
 800545c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800545e:	6a21      	ldr	r1, [r4, #32]
 8005460:	4628      	mov	r0, r5
 8005462:	47b0      	blx	r6
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	d106      	bne.n	8005478 <__sflush_r+0x68>
 800546a:	6829      	ldr	r1, [r5, #0]
 800546c:	291d      	cmp	r1, #29
 800546e:	d82b      	bhi.n	80054c8 <__sflush_r+0xb8>
 8005470:	4a29      	ldr	r2, [pc, #164]	; (8005518 <__sflush_r+0x108>)
 8005472:	410a      	asrs	r2, r1
 8005474:	07d6      	lsls	r6, r2, #31
 8005476:	d427      	bmi.n	80054c8 <__sflush_r+0xb8>
 8005478:	2200      	movs	r2, #0
 800547a:	6062      	str	r2, [r4, #4]
 800547c:	04d9      	lsls	r1, r3, #19
 800547e:	6922      	ldr	r2, [r4, #16]
 8005480:	6022      	str	r2, [r4, #0]
 8005482:	d504      	bpl.n	800548e <__sflush_r+0x7e>
 8005484:	1c42      	adds	r2, r0, #1
 8005486:	d101      	bne.n	800548c <__sflush_r+0x7c>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b903      	cbnz	r3, 800548e <__sflush_r+0x7e>
 800548c:	6560      	str	r0, [r4, #84]	; 0x54
 800548e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005490:	602f      	str	r7, [r5, #0]
 8005492:	2900      	cmp	r1, #0
 8005494:	d0c9      	beq.n	800542a <__sflush_r+0x1a>
 8005496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800549a:	4299      	cmp	r1, r3
 800549c:	d002      	beq.n	80054a4 <__sflush_r+0x94>
 800549e:	4628      	mov	r0, r5
 80054a0:	f7ff febe 	bl	8005220 <_free_r>
 80054a4:	2000      	movs	r0, #0
 80054a6:	6360      	str	r0, [r4, #52]	; 0x34
 80054a8:	e7c0      	b.n	800542c <__sflush_r+0x1c>
 80054aa:	2301      	movs	r3, #1
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b0      	blx	r6
 80054b0:	1c41      	adds	r1, r0, #1
 80054b2:	d1c8      	bne.n	8005446 <__sflush_r+0x36>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0c5      	beq.n	8005446 <__sflush_r+0x36>
 80054ba:	2b1d      	cmp	r3, #29
 80054bc:	d001      	beq.n	80054c2 <__sflush_r+0xb2>
 80054be:	2b16      	cmp	r3, #22
 80054c0:	d101      	bne.n	80054c6 <__sflush_r+0xb6>
 80054c2:	602f      	str	r7, [r5, #0]
 80054c4:	e7b1      	b.n	800542a <__sflush_r+0x1a>
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054cc:	81a3      	strh	r3, [r4, #12]
 80054ce:	e7ad      	b.n	800542c <__sflush_r+0x1c>
 80054d0:	690f      	ldr	r7, [r1, #16]
 80054d2:	2f00      	cmp	r7, #0
 80054d4:	d0a9      	beq.n	800542a <__sflush_r+0x1a>
 80054d6:	0793      	lsls	r3, r2, #30
 80054d8:	680e      	ldr	r6, [r1, #0]
 80054da:	bf08      	it	eq
 80054dc:	694b      	ldreq	r3, [r1, #20]
 80054de:	600f      	str	r7, [r1, #0]
 80054e0:	bf18      	it	ne
 80054e2:	2300      	movne	r3, #0
 80054e4:	eba6 0807 	sub.w	r8, r6, r7
 80054e8:	608b      	str	r3, [r1, #8]
 80054ea:	f1b8 0f00 	cmp.w	r8, #0
 80054ee:	dd9c      	ble.n	800542a <__sflush_r+0x1a>
 80054f0:	6a21      	ldr	r1, [r4, #32]
 80054f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054f4:	4643      	mov	r3, r8
 80054f6:	463a      	mov	r2, r7
 80054f8:	4628      	mov	r0, r5
 80054fa:	47b0      	blx	r6
 80054fc:	2800      	cmp	r0, #0
 80054fe:	dc06      	bgt.n	800550e <__sflush_r+0xfe>
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005506:	81a3      	strh	r3, [r4, #12]
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	e78e      	b.n	800542c <__sflush_r+0x1c>
 800550e:	4407      	add	r7, r0
 8005510:	eba8 0800 	sub.w	r8, r8, r0
 8005514:	e7e9      	b.n	80054ea <__sflush_r+0xda>
 8005516:	bf00      	nop
 8005518:	dfbffffe 	.word	0xdfbffffe

0800551c <_fflush_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	690b      	ldr	r3, [r1, #16]
 8005520:	4605      	mov	r5, r0
 8005522:	460c      	mov	r4, r1
 8005524:	b913      	cbnz	r3, 800552c <_fflush_r+0x10>
 8005526:	2500      	movs	r5, #0
 8005528:	4628      	mov	r0, r5
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	b118      	cbz	r0, 8005536 <_fflush_r+0x1a>
 800552e:	6a03      	ldr	r3, [r0, #32]
 8005530:	b90b      	cbnz	r3, 8005536 <_fflush_r+0x1a>
 8005532:	f7ff fc8f 	bl	8004e54 <__sinit>
 8005536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f3      	beq.n	8005526 <_fflush_r+0xa>
 800553e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005540:	07d0      	lsls	r0, r2, #31
 8005542:	d404      	bmi.n	800554e <_fflush_r+0x32>
 8005544:	0599      	lsls	r1, r3, #22
 8005546:	d402      	bmi.n	800554e <_fflush_r+0x32>
 8005548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800554a:	f7ff fe66 	bl	800521a <__retarget_lock_acquire_recursive>
 800554e:	4628      	mov	r0, r5
 8005550:	4621      	mov	r1, r4
 8005552:	f7ff ff5d 	bl	8005410 <__sflush_r>
 8005556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005558:	07da      	lsls	r2, r3, #31
 800555a:	4605      	mov	r5, r0
 800555c:	d4e4      	bmi.n	8005528 <_fflush_r+0xc>
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	059b      	lsls	r3, r3, #22
 8005562:	d4e1      	bmi.n	8005528 <_fflush_r+0xc>
 8005564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005566:	f7ff fe59 	bl	800521c <__retarget_lock_release_recursive>
 800556a:	e7dd      	b.n	8005528 <_fflush_r+0xc>

0800556c <__swhatbuf_r>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	460c      	mov	r4, r1
 8005570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005574:	2900      	cmp	r1, #0
 8005576:	b096      	sub	sp, #88	; 0x58
 8005578:	4615      	mov	r5, r2
 800557a:	461e      	mov	r6, r3
 800557c:	da0d      	bge.n	800559a <__swhatbuf_r+0x2e>
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005584:	f04f 0100 	mov.w	r1, #0
 8005588:	bf0c      	ite	eq
 800558a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800558e:	2340      	movne	r3, #64	; 0x40
 8005590:	2000      	movs	r0, #0
 8005592:	6031      	str	r1, [r6, #0]
 8005594:	602b      	str	r3, [r5, #0]
 8005596:	b016      	add	sp, #88	; 0x58
 8005598:	bd70      	pop	{r4, r5, r6, pc}
 800559a:	466a      	mov	r2, sp
 800559c:	f000 f848 	bl	8005630 <_fstat_r>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	dbec      	blt.n	800557e <__swhatbuf_r+0x12>
 80055a4:	9901      	ldr	r1, [sp, #4]
 80055a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80055aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80055ae:	4259      	negs	r1, r3
 80055b0:	4159      	adcs	r1, r3
 80055b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b6:	e7eb      	b.n	8005590 <__swhatbuf_r+0x24>

080055b8 <__smakebuf_r>:
 80055b8:	898b      	ldrh	r3, [r1, #12]
 80055ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055bc:	079d      	lsls	r5, r3, #30
 80055be:	4606      	mov	r6, r0
 80055c0:	460c      	mov	r4, r1
 80055c2:	d507      	bpl.n	80055d4 <__smakebuf_r+0x1c>
 80055c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	6123      	str	r3, [r4, #16]
 80055cc:	2301      	movs	r3, #1
 80055ce:	6163      	str	r3, [r4, #20]
 80055d0:	b002      	add	sp, #8
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	ab01      	add	r3, sp, #4
 80055d6:	466a      	mov	r2, sp
 80055d8:	f7ff ffc8 	bl	800556c <__swhatbuf_r>
 80055dc:	9900      	ldr	r1, [sp, #0]
 80055de:	4605      	mov	r5, r0
 80055e0:	4630      	mov	r0, r6
 80055e2:	f7ff fe89 	bl	80052f8 <_malloc_r>
 80055e6:	b948      	cbnz	r0, 80055fc <__smakebuf_r+0x44>
 80055e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ec:	059a      	lsls	r2, r3, #22
 80055ee:	d4ef      	bmi.n	80055d0 <__smakebuf_r+0x18>
 80055f0:	f023 0303 	bic.w	r3, r3, #3
 80055f4:	f043 0302 	orr.w	r3, r3, #2
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	e7e3      	b.n	80055c4 <__smakebuf_r+0xc>
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	6020      	str	r0, [r4, #0]
 8005600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005604:	81a3      	strh	r3, [r4, #12]
 8005606:	9b00      	ldr	r3, [sp, #0]
 8005608:	6163      	str	r3, [r4, #20]
 800560a:	9b01      	ldr	r3, [sp, #4]
 800560c:	6120      	str	r0, [r4, #16]
 800560e:	b15b      	cbz	r3, 8005628 <__smakebuf_r+0x70>
 8005610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005614:	4630      	mov	r0, r6
 8005616:	f000 f81d 	bl	8005654 <_isatty_r>
 800561a:	b128      	cbz	r0, 8005628 <__smakebuf_r+0x70>
 800561c:	89a3      	ldrh	r3, [r4, #12]
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	81a3      	strh	r3, [r4, #12]
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	431d      	orrs	r5, r3
 800562c:	81a5      	strh	r5, [r4, #12]
 800562e:	e7cf      	b.n	80055d0 <__smakebuf_r+0x18>

08005630 <_fstat_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	4d07      	ldr	r5, [pc, #28]	; (8005650 <_fstat_r+0x20>)
 8005634:	2300      	movs	r3, #0
 8005636:	4604      	mov	r4, r0
 8005638:	4608      	mov	r0, r1
 800563a:	4611      	mov	r1, r2
 800563c:	602b      	str	r3, [r5, #0]
 800563e:	f7fc f9f2 	bl	8001a26 <_fstat>
 8005642:	1c43      	adds	r3, r0, #1
 8005644:	d102      	bne.n	800564c <_fstat_r+0x1c>
 8005646:	682b      	ldr	r3, [r5, #0]
 8005648:	b103      	cbz	r3, 800564c <_fstat_r+0x1c>
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	bd38      	pop	{r3, r4, r5, pc}
 800564e:	bf00      	nop
 8005650:	2000103c 	.word	0x2000103c

08005654 <_isatty_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4d06      	ldr	r5, [pc, #24]	; (8005670 <_isatty_r+0x1c>)
 8005658:	2300      	movs	r3, #0
 800565a:	4604      	mov	r4, r0
 800565c:	4608      	mov	r0, r1
 800565e:	602b      	str	r3, [r5, #0]
 8005660:	f7fc f9f1 	bl	8001a46 <_isatty>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d102      	bne.n	800566e <_isatty_r+0x1a>
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	b103      	cbz	r3, 800566e <_isatty_r+0x1a>
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	bd38      	pop	{r3, r4, r5, pc}
 8005670:	2000103c 	.word	0x2000103c

08005674 <_sbrk_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4d06      	ldr	r5, [pc, #24]	; (8005690 <_sbrk_r+0x1c>)
 8005678:	2300      	movs	r3, #0
 800567a:	4604      	mov	r4, r0
 800567c:	4608      	mov	r0, r1
 800567e:	602b      	str	r3, [r5, #0]
 8005680:	f7fc f9fa 	bl	8001a78 <_sbrk>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d102      	bne.n	800568e <_sbrk_r+0x1a>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	b103      	cbz	r3, 800568e <_sbrk_r+0x1a>
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	2000103c 	.word	0x2000103c
 8005694:	00000000 	.word	0x00000000

08005698 <tan>:
 8005698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800569a:	ec53 2b10 	vmov	r2, r3, d0
 800569e:	4816      	ldr	r0, [pc, #88]	; (80056f8 <tan+0x60>)
 80056a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80056a4:	4281      	cmp	r1, r0
 80056a6:	dc07      	bgt.n	80056b8 <tan+0x20>
 80056a8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80056f0 <tan+0x58>
 80056ac:	2001      	movs	r0, #1
 80056ae:	b005      	add	sp, #20
 80056b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056b4:	f000 b824 	b.w	8005700 <__kernel_tan>
 80056b8:	4810      	ldr	r0, [pc, #64]	; (80056fc <tan+0x64>)
 80056ba:	4281      	cmp	r1, r0
 80056bc:	dd09      	ble.n	80056d2 <tan+0x3a>
 80056be:	ee10 0a10 	vmov	r0, s0
 80056c2:	4619      	mov	r1, r3
 80056c4:	f7fa fda4 	bl	8000210 <__aeabi_dsub>
 80056c8:	ec41 0b10 	vmov	d0, r0, r1
 80056cc:	b005      	add	sp, #20
 80056ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80056d2:	4668      	mov	r0, sp
 80056d4:	f000 fa20 	bl	8005b18 <__ieee754_rem_pio2>
 80056d8:	0040      	lsls	r0, r0, #1
 80056da:	f000 0002 	and.w	r0, r0, #2
 80056de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80056e2:	ed9d 0b00 	vldr	d0, [sp]
 80056e6:	f1c0 0001 	rsb	r0, r0, #1
 80056ea:	f000 f809 	bl	8005700 <__kernel_tan>
 80056ee:	e7ed      	b.n	80056cc <tan+0x34>
	...
 80056f8:	3fe921fb 	.word	0x3fe921fb
 80056fc:	7fefffff 	.word	0x7fefffff

08005700 <__kernel_tan>:
 8005700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005704:	ed2d 8b06 	vpush	{d8-d10}
 8005708:	ec5b ab10 	vmov	sl, fp, d0
 800570c:	4be0      	ldr	r3, [pc, #896]	; (8005a90 <__kernel_tan+0x390>)
 800570e:	b083      	sub	sp, #12
 8005710:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8005714:	429f      	cmp	r7, r3
 8005716:	ec59 8b11 	vmov	r8, r9, d1
 800571a:	4606      	mov	r6, r0
 800571c:	f8cd b000 	str.w	fp, [sp]
 8005720:	dc61      	bgt.n	80057e6 <__kernel_tan+0xe6>
 8005722:	ee10 0a10 	vmov	r0, s0
 8005726:	4659      	mov	r1, fp
 8005728:	f7fb f9c4 	bl	8000ab4 <__aeabi_d2iz>
 800572c:	4605      	mov	r5, r0
 800572e:	2800      	cmp	r0, #0
 8005730:	f040 8083 	bne.w	800583a <__kernel_tan+0x13a>
 8005734:	1c73      	adds	r3, r6, #1
 8005736:	4652      	mov	r2, sl
 8005738:	4313      	orrs	r3, r2
 800573a:	433b      	orrs	r3, r7
 800573c:	d112      	bne.n	8005764 <__kernel_tan+0x64>
 800573e:	ec4b ab10 	vmov	d0, sl, fp
 8005742:	f000 fbef 	bl	8005f24 <fabs>
 8005746:	49d3      	ldr	r1, [pc, #844]	; (8005a94 <__kernel_tan+0x394>)
 8005748:	ec53 2b10 	vmov	r2, r3, d0
 800574c:	2000      	movs	r0, #0
 800574e:	f7fb f841 	bl	80007d4 <__aeabi_ddiv>
 8005752:	4682      	mov	sl, r0
 8005754:	468b      	mov	fp, r1
 8005756:	ec4b ab10 	vmov	d0, sl, fp
 800575a:	b003      	add	sp, #12
 800575c:	ecbd 8b06 	vpop	{d8-d10}
 8005760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005764:	2e01      	cmp	r6, #1
 8005766:	d0f6      	beq.n	8005756 <__kernel_tan+0x56>
 8005768:	4642      	mov	r2, r8
 800576a:	464b      	mov	r3, r9
 800576c:	4650      	mov	r0, sl
 800576e:	4659      	mov	r1, fp
 8005770:	f7fa fd50 	bl	8000214 <__adddf3>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	460f      	mov	r7, r1
 800577a:	2000      	movs	r0, #0
 800577c:	49c6      	ldr	r1, [pc, #792]	; (8005a98 <__kernel_tan+0x398>)
 800577e:	f7fb f829 	bl	80007d4 <__aeabi_ddiv>
 8005782:	e9cd 0100 	strd	r0, r1, [sp]
 8005786:	e9dd 2300 	ldrd	r2, r3, [sp]
 800578a:	462e      	mov	r6, r5
 800578c:	4652      	mov	r2, sl
 800578e:	462c      	mov	r4, r5
 8005790:	4630      	mov	r0, r6
 8005792:	461d      	mov	r5, r3
 8005794:	4639      	mov	r1, r7
 8005796:	465b      	mov	r3, fp
 8005798:	f7fa fd3a 	bl	8000210 <__aeabi_dsub>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4640      	mov	r0, r8
 80057a2:	4649      	mov	r1, r9
 80057a4:	f7fa fd34 	bl	8000210 <__aeabi_dsub>
 80057a8:	4632      	mov	r2, r6
 80057aa:	462b      	mov	r3, r5
 80057ac:	f7fa fee8 	bl	8000580 <__aeabi_dmul>
 80057b0:	4632      	mov	r2, r6
 80057b2:	4680      	mov	r8, r0
 80057b4:	4689      	mov	r9, r1
 80057b6:	462b      	mov	r3, r5
 80057b8:	4630      	mov	r0, r6
 80057ba:	4639      	mov	r1, r7
 80057bc:	f7fa fee0 	bl	8000580 <__aeabi_dmul>
 80057c0:	4bb4      	ldr	r3, [pc, #720]	; (8005a94 <__kernel_tan+0x394>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	f7fa fd26 	bl	8000214 <__adddf3>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4640      	mov	r0, r8
 80057ce:	4649      	mov	r1, r9
 80057d0:	f7fa fd20 	bl	8000214 <__adddf3>
 80057d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057d8:	f7fa fed2 	bl	8000580 <__aeabi_dmul>
 80057dc:	4622      	mov	r2, r4
 80057de:	462b      	mov	r3, r5
 80057e0:	f7fa fd18 	bl	8000214 <__adddf3>
 80057e4:	e7b5      	b.n	8005752 <__kernel_tan+0x52>
 80057e6:	4bad      	ldr	r3, [pc, #692]	; (8005a9c <__kernel_tan+0x39c>)
 80057e8:	429f      	cmp	r7, r3
 80057ea:	dd26      	ble.n	800583a <__kernel_tan+0x13a>
 80057ec:	9b00      	ldr	r3, [sp, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	da09      	bge.n	8005806 <__kernel_tan+0x106>
 80057f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80057f6:	469b      	mov	fp, r3
 80057f8:	ee10 aa10 	vmov	sl, s0
 80057fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005800:	ee11 8a10 	vmov	r8, s2
 8005804:	4699      	mov	r9, r3
 8005806:	4652      	mov	r2, sl
 8005808:	465b      	mov	r3, fp
 800580a:	a183      	add	r1, pc, #524	; (adr r1, 8005a18 <__kernel_tan+0x318>)
 800580c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005810:	f7fa fcfe 	bl	8000210 <__aeabi_dsub>
 8005814:	4642      	mov	r2, r8
 8005816:	464b      	mov	r3, r9
 8005818:	4604      	mov	r4, r0
 800581a:	460d      	mov	r5, r1
 800581c:	a180      	add	r1, pc, #512	; (adr r1, 8005a20 <__kernel_tan+0x320>)
 800581e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005822:	f7fa fcf5 	bl	8000210 <__aeabi_dsub>
 8005826:	4622      	mov	r2, r4
 8005828:	462b      	mov	r3, r5
 800582a:	f7fa fcf3 	bl	8000214 <__adddf3>
 800582e:	f04f 0800 	mov.w	r8, #0
 8005832:	4682      	mov	sl, r0
 8005834:	468b      	mov	fp, r1
 8005836:	f04f 0900 	mov.w	r9, #0
 800583a:	4652      	mov	r2, sl
 800583c:	465b      	mov	r3, fp
 800583e:	4650      	mov	r0, sl
 8005840:	4659      	mov	r1, fp
 8005842:	f7fa fe9d 	bl	8000580 <__aeabi_dmul>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	ec43 2b18 	vmov	d8, r2, r3
 800584e:	f7fa fe97 	bl	8000580 <__aeabi_dmul>
 8005852:	ec53 2b18 	vmov	r2, r3, d8
 8005856:	4604      	mov	r4, r0
 8005858:	460d      	mov	r5, r1
 800585a:	4650      	mov	r0, sl
 800585c:	4659      	mov	r1, fp
 800585e:	f7fa fe8f 	bl	8000580 <__aeabi_dmul>
 8005862:	a371      	add	r3, pc, #452	; (adr r3, 8005a28 <__kernel_tan+0x328>)
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	ec41 0b19 	vmov	d9, r0, r1
 800586c:	4620      	mov	r0, r4
 800586e:	4629      	mov	r1, r5
 8005870:	f7fa fe86 	bl	8000580 <__aeabi_dmul>
 8005874:	a36e      	add	r3, pc, #440	; (adr r3, 8005a30 <__kernel_tan+0x330>)
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	f7fa fccb 	bl	8000214 <__adddf3>
 800587e:	4622      	mov	r2, r4
 8005880:	462b      	mov	r3, r5
 8005882:	f7fa fe7d 	bl	8000580 <__aeabi_dmul>
 8005886:	a36c      	add	r3, pc, #432	; (adr r3, 8005a38 <__kernel_tan+0x338>)
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	f7fa fcc2 	bl	8000214 <__adddf3>
 8005890:	4622      	mov	r2, r4
 8005892:	462b      	mov	r3, r5
 8005894:	f7fa fe74 	bl	8000580 <__aeabi_dmul>
 8005898:	a369      	add	r3, pc, #420	; (adr r3, 8005a40 <__kernel_tan+0x340>)
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f7fa fcb9 	bl	8000214 <__adddf3>
 80058a2:	4622      	mov	r2, r4
 80058a4:	462b      	mov	r3, r5
 80058a6:	f7fa fe6b 	bl	8000580 <__aeabi_dmul>
 80058aa:	a367      	add	r3, pc, #412	; (adr r3, 8005a48 <__kernel_tan+0x348>)
 80058ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b0:	f7fa fcb0 	bl	8000214 <__adddf3>
 80058b4:	4622      	mov	r2, r4
 80058b6:	462b      	mov	r3, r5
 80058b8:	f7fa fe62 	bl	8000580 <__aeabi_dmul>
 80058bc:	a364      	add	r3, pc, #400	; (adr r3, 8005a50 <__kernel_tan+0x350>)
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	f7fa fca7 	bl	8000214 <__adddf3>
 80058c6:	ec53 2b18 	vmov	r2, r3, d8
 80058ca:	f7fa fe59 	bl	8000580 <__aeabi_dmul>
 80058ce:	a362      	add	r3, pc, #392	; (adr r3, 8005a58 <__kernel_tan+0x358>)
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	ec41 0b1a 	vmov	d10, r0, r1
 80058d8:	4620      	mov	r0, r4
 80058da:	4629      	mov	r1, r5
 80058dc:	f7fa fe50 	bl	8000580 <__aeabi_dmul>
 80058e0:	a35f      	add	r3, pc, #380	; (adr r3, 8005a60 <__kernel_tan+0x360>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fc95 	bl	8000214 <__adddf3>
 80058ea:	4622      	mov	r2, r4
 80058ec:	462b      	mov	r3, r5
 80058ee:	f7fa fe47 	bl	8000580 <__aeabi_dmul>
 80058f2:	a35d      	add	r3, pc, #372	; (adr r3, 8005a68 <__kernel_tan+0x368>)
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	f7fa fc8c 	bl	8000214 <__adddf3>
 80058fc:	4622      	mov	r2, r4
 80058fe:	462b      	mov	r3, r5
 8005900:	f7fa fe3e 	bl	8000580 <__aeabi_dmul>
 8005904:	a35a      	add	r3, pc, #360	; (adr r3, 8005a70 <__kernel_tan+0x370>)
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	f7fa fc83 	bl	8000214 <__adddf3>
 800590e:	4622      	mov	r2, r4
 8005910:	462b      	mov	r3, r5
 8005912:	f7fa fe35 	bl	8000580 <__aeabi_dmul>
 8005916:	a358      	add	r3, pc, #352	; (adr r3, 8005a78 <__kernel_tan+0x378>)
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	f7fa fc7a 	bl	8000214 <__adddf3>
 8005920:	4622      	mov	r2, r4
 8005922:	462b      	mov	r3, r5
 8005924:	f7fa fe2c 	bl	8000580 <__aeabi_dmul>
 8005928:	a355      	add	r3, pc, #340	; (adr r3, 8005a80 <__kernel_tan+0x380>)
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f7fa fc71 	bl	8000214 <__adddf3>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	ec51 0b1a 	vmov	r0, r1, d10
 800593a:	f7fa fc6b 	bl	8000214 <__adddf3>
 800593e:	ec53 2b19 	vmov	r2, r3, d9
 8005942:	f7fa fe1d 	bl	8000580 <__aeabi_dmul>
 8005946:	4642      	mov	r2, r8
 8005948:	464b      	mov	r3, r9
 800594a:	f7fa fc63 	bl	8000214 <__adddf3>
 800594e:	ec53 2b18 	vmov	r2, r3, d8
 8005952:	f7fa fe15 	bl	8000580 <__aeabi_dmul>
 8005956:	4642      	mov	r2, r8
 8005958:	464b      	mov	r3, r9
 800595a:	f7fa fc5b 	bl	8000214 <__adddf3>
 800595e:	a34a      	add	r3, pc, #296	; (adr r3, 8005a88 <__kernel_tan+0x388>)
 8005960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005964:	4604      	mov	r4, r0
 8005966:	460d      	mov	r5, r1
 8005968:	ec51 0b19 	vmov	r0, r1, d9
 800596c:	f7fa fe08 	bl	8000580 <__aeabi_dmul>
 8005970:	4622      	mov	r2, r4
 8005972:	462b      	mov	r3, r5
 8005974:	f7fa fc4e 	bl	8000214 <__adddf3>
 8005978:	460b      	mov	r3, r1
 800597a:	ec41 0b18 	vmov	d8, r0, r1
 800597e:	4602      	mov	r2, r0
 8005980:	4659      	mov	r1, fp
 8005982:	4650      	mov	r0, sl
 8005984:	f7fa fc46 	bl	8000214 <__adddf3>
 8005988:	4b44      	ldr	r3, [pc, #272]	; (8005a9c <__kernel_tan+0x39c>)
 800598a:	429f      	cmp	r7, r3
 800598c:	4604      	mov	r4, r0
 800598e:	460d      	mov	r5, r1
 8005990:	f340 8086 	ble.w	8005aa0 <__kernel_tan+0x3a0>
 8005994:	4630      	mov	r0, r6
 8005996:	f7fa fd89 	bl	80004ac <__aeabi_i2d>
 800599a:	4622      	mov	r2, r4
 800599c:	4680      	mov	r8, r0
 800599e:	4689      	mov	r9, r1
 80059a0:	462b      	mov	r3, r5
 80059a2:	4620      	mov	r0, r4
 80059a4:	4629      	mov	r1, r5
 80059a6:	f7fa fdeb 	bl	8000580 <__aeabi_dmul>
 80059aa:	4642      	mov	r2, r8
 80059ac:	4606      	mov	r6, r0
 80059ae:	460f      	mov	r7, r1
 80059b0:	464b      	mov	r3, r9
 80059b2:	4620      	mov	r0, r4
 80059b4:	4629      	mov	r1, r5
 80059b6:	f7fa fc2d 	bl	8000214 <__adddf3>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4630      	mov	r0, r6
 80059c0:	4639      	mov	r1, r7
 80059c2:	f7fa ff07 	bl	80007d4 <__aeabi_ddiv>
 80059c6:	ec53 2b18 	vmov	r2, r3, d8
 80059ca:	f7fa fc21 	bl	8000210 <__aeabi_dsub>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4650      	mov	r0, sl
 80059d4:	4659      	mov	r1, fp
 80059d6:	f7fa fc1b 	bl	8000210 <__aeabi_dsub>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	f7fa fc19 	bl	8000214 <__adddf3>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4640      	mov	r0, r8
 80059e8:	4649      	mov	r1, r9
 80059ea:	f7fa fc11 	bl	8000210 <__aeabi_dsub>
 80059ee:	9b00      	ldr	r3, [sp, #0]
 80059f0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80059f4:	f00a 0a02 	and.w	sl, sl, #2
 80059f8:	4604      	mov	r4, r0
 80059fa:	f1ca 0001 	rsb	r0, sl, #1
 80059fe:	460d      	mov	r5, r1
 8005a00:	f7fa fd54 	bl	80004ac <__aeabi_i2d>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4620      	mov	r0, r4
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	f7fa fdb8 	bl	8000580 <__aeabi_dmul>
 8005a10:	e69f      	b.n	8005752 <__kernel_tan+0x52>
 8005a12:	bf00      	nop
 8005a14:	f3af 8000 	nop.w
 8005a18:	54442d18 	.word	0x54442d18
 8005a1c:	3fe921fb 	.word	0x3fe921fb
 8005a20:	33145c07 	.word	0x33145c07
 8005a24:	3c81a626 	.word	0x3c81a626
 8005a28:	74bf7ad4 	.word	0x74bf7ad4
 8005a2c:	3efb2a70 	.word	0x3efb2a70
 8005a30:	32f0a7e9 	.word	0x32f0a7e9
 8005a34:	3f12b80f 	.word	0x3f12b80f
 8005a38:	1a8d1068 	.word	0x1a8d1068
 8005a3c:	3f3026f7 	.word	0x3f3026f7
 8005a40:	fee08315 	.word	0xfee08315
 8005a44:	3f57dbc8 	.word	0x3f57dbc8
 8005a48:	e96e8493 	.word	0xe96e8493
 8005a4c:	3f8226e3 	.word	0x3f8226e3
 8005a50:	1bb341fe 	.word	0x1bb341fe
 8005a54:	3faba1ba 	.word	0x3faba1ba
 8005a58:	db605373 	.word	0xdb605373
 8005a5c:	bef375cb 	.word	0xbef375cb
 8005a60:	a03792a6 	.word	0xa03792a6
 8005a64:	3f147e88 	.word	0x3f147e88
 8005a68:	f2f26501 	.word	0xf2f26501
 8005a6c:	3f4344d8 	.word	0x3f4344d8
 8005a70:	c9560328 	.word	0xc9560328
 8005a74:	3f6d6d22 	.word	0x3f6d6d22
 8005a78:	8406d637 	.word	0x8406d637
 8005a7c:	3f9664f4 	.word	0x3f9664f4
 8005a80:	1110fe7a 	.word	0x1110fe7a
 8005a84:	3fc11111 	.word	0x3fc11111
 8005a88:	55555563 	.word	0x55555563
 8005a8c:	3fd55555 	.word	0x3fd55555
 8005a90:	3e2fffff 	.word	0x3e2fffff
 8005a94:	3ff00000 	.word	0x3ff00000
 8005a98:	bff00000 	.word	0xbff00000
 8005a9c:	3fe59427 	.word	0x3fe59427
 8005aa0:	2e01      	cmp	r6, #1
 8005aa2:	d02f      	beq.n	8005b04 <__kernel_tan+0x404>
 8005aa4:	460f      	mov	r7, r1
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4689      	mov	r9, r1
 8005aac:	2000      	movs	r0, #0
 8005aae:	4917      	ldr	r1, [pc, #92]	; (8005b0c <__kernel_tan+0x40c>)
 8005ab0:	f7fa fe90 	bl	80007d4 <__aeabi_ddiv>
 8005ab4:	2600      	movs	r6, #0
 8005ab6:	e9cd 0100 	strd	r0, r1, [sp]
 8005aba:	4652      	mov	r2, sl
 8005abc:	465b      	mov	r3, fp
 8005abe:	4630      	mov	r0, r6
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	f7fa fba5 	bl	8000210 <__aeabi_dsub>
 8005ac6:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	ec51 0b18 	vmov	r0, r1, d8
 8005ad2:	f7fa fb9d 	bl	8000210 <__aeabi_dsub>
 8005ad6:	4632      	mov	r2, r6
 8005ad8:	462b      	mov	r3, r5
 8005ada:	f7fa fd51 	bl	8000580 <__aeabi_dmul>
 8005ade:	46b0      	mov	r8, r6
 8005ae0:	460f      	mov	r7, r1
 8005ae2:	4642      	mov	r2, r8
 8005ae4:	462b      	mov	r3, r5
 8005ae6:	4634      	mov	r4, r6
 8005ae8:	4649      	mov	r1, r9
 8005aea:	4606      	mov	r6, r0
 8005aec:	4640      	mov	r0, r8
 8005aee:	f7fa fd47 	bl	8000580 <__aeabi_dmul>
 8005af2:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <__kernel_tan+0x410>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	f7fa fb8d 	bl	8000214 <__adddf3>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4630      	mov	r0, r6
 8005b00:	4639      	mov	r1, r7
 8005b02:	e665      	b.n	80057d0 <__kernel_tan+0xd0>
 8005b04:	4682      	mov	sl, r0
 8005b06:	468b      	mov	fp, r1
 8005b08:	e625      	b.n	8005756 <__kernel_tan+0x56>
 8005b0a:	bf00      	nop
 8005b0c:	bff00000 	.word	0xbff00000
 8005b10:	3ff00000 	.word	0x3ff00000
 8005b14:	00000000 	.word	0x00000000

08005b18 <__ieee754_rem_pio2>:
 8005b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1c:	ed2d 8b02 	vpush	{d8}
 8005b20:	ec55 4b10 	vmov	r4, r5, d0
 8005b24:	4bca      	ldr	r3, [pc, #808]	; (8005e50 <__ieee754_rem_pio2+0x338>)
 8005b26:	b08b      	sub	sp, #44	; 0x2c
 8005b28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005b2c:	4598      	cmp	r8, r3
 8005b2e:	4682      	mov	sl, r0
 8005b30:	9502      	str	r5, [sp, #8]
 8005b32:	dc08      	bgt.n	8005b46 <__ieee754_rem_pio2+0x2e>
 8005b34:	2200      	movs	r2, #0
 8005b36:	2300      	movs	r3, #0
 8005b38:	ed80 0b00 	vstr	d0, [r0]
 8005b3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005b40:	f04f 0b00 	mov.w	fp, #0
 8005b44:	e028      	b.n	8005b98 <__ieee754_rem_pio2+0x80>
 8005b46:	4bc3      	ldr	r3, [pc, #780]	; (8005e54 <__ieee754_rem_pio2+0x33c>)
 8005b48:	4598      	cmp	r8, r3
 8005b4a:	dc78      	bgt.n	8005c3e <__ieee754_rem_pio2+0x126>
 8005b4c:	9b02      	ldr	r3, [sp, #8]
 8005b4e:	4ec2      	ldr	r6, [pc, #776]	; (8005e58 <__ieee754_rem_pio2+0x340>)
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	ee10 0a10 	vmov	r0, s0
 8005b56:	a3b0      	add	r3, pc, #704	; (adr r3, 8005e18 <__ieee754_rem_pio2+0x300>)
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	dd39      	ble.n	8005bd4 <__ieee754_rem_pio2+0xbc>
 8005b60:	f7fa fb56 	bl	8000210 <__aeabi_dsub>
 8005b64:	45b0      	cmp	r8, r6
 8005b66:	4604      	mov	r4, r0
 8005b68:	460d      	mov	r5, r1
 8005b6a:	d01b      	beq.n	8005ba4 <__ieee754_rem_pio2+0x8c>
 8005b6c:	a3ac      	add	r3, pc, #688	; (adr r3, 8005e20 <__ieee754_rem_pio2+0x308>)
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f7fa fb4d 	bl	8000210 <__aeabi_dsub>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	e9ca 2300 	strd	r2, r3, [sl]
 8005b7e:	4620      	mov	r0, r4
 8005b80:	4629      	mov	r1, r5
 8005b82:	f7fa fb45 	bl	8000210 <__aeabi_dsub>
 8005b86:	a3a6      	add	r3, pc, #664	; (adr r3, 8005e20 <__ieee754_rem_pio2+0x308>)
 8005b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8c:	f7fa fb40 	bl	8000210 <__aeabi_dsub>
 8005b90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005b94:	f04f 0b01 	mov.w	fp, #1
 8005b98:	4658      	mov	r0, fp
 8005b9a:	b00b      	add	sp, #44	; 0x2c
 8005b9c:	ecbd 8b02 	vpop	{d8}
 8005ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba4:	a3a0      	add	r3, pc, #640	; (adr r3, 8005e28 <__ieee754_rem_pio2+0x310>)
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	f7fa fb31 	bl	8000210 <__aeabi_dsub>
 8005bae:	a3a0      	add	r3, pc, #640	; (adr r3, 8005e30 <__ieee754_rem_pio2+0x318>)
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	f7fa fb2a 	bl	8000210 <__aeabi_dsub>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	e9ca 2300 	strd	r2, r3, [sl]
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	f7fa fb22 	bl	8000210 <__aeabi_dsub>
 8005bcc:	a398      	add	r3, pc, #608	; (adr r3, 8005e30 <__ieee754_rem_pio2+0x318>)
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	e7db      	b.n	8005b8c <__ieee754_rem_pio2+0x74>
 8005bd4:	f7fa fb1e 	bl	8000214 <__adddf3>
 8005bd8:	45b0      	cmp	r8, r6
 8005bda:	4604      	mov	r4, r0
 8005bdc:	460d      	mov	r5, r1
 8005bde:	d016      	beq.n	8005c0e <__ieee754_rem_pio2+0xf6>
 8005be0:	a38f      	add	r3, pc, #572	; (adr r3, 8005e20 <__ieee754_rem_pio2+0x308>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f7fa fb15 	bl	8000214 <__adddf3>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	e9ca 2300 	strd	r2, r3, [sl]
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	f7fa fb0b 	bl	8000210 <__aeabi_dsub>
 8005bfa:	a389      	add	r3, pc, #548	; (adr r3, 8005e20 <__ieee754_rem_pio2+0x308>)
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	f7fa fb08 	bl	8000214 <__adddf3>
 8005c04:	f04f 3bff 	mov.w	fp, #4294967295
 8005c08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c0c:	e7c4      	b.n	8005b98 <__ieee754_rem_pio2+0x80>
 8005c0e:	a386      	add	r3, pc, #536	; (adr r3, 8005e28 <__ieee754_rem_pio2+0x310>)
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	f7fa fafe 	bl	8000214 <__adddf3>
 8005c18:	a385      	add	r3, pc, #532	; (adr r3, 8005e30 <__ieee754_rem_pio2+0x318>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	4604      	mov	r4, r0
 8005c20:	460d      	mov	r5, r1
 8005c22:	f7fa faf7 	bl	8000214 <__adddf3>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	e9ca 2300 	strd	r2, r3, [sl]
 8005c2e:	4620      	mov	r0, r4
 8005c30:	4629      	mov	r1, r5
 8005c32:	f7fa faed 	bl	8000210 <__aeabi_dsub>
 8005c36:	a37e      	add	r3, pc, #504	; (adr r3, 8005e30 <__ieee754_rem_pio2+0x318>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	e7e0      	b.n	8005c00 <__ieee754_rem_pio2+0xe8>
 8005c3e:	4b87      	ldr	r3, [pc, #540]	; (8005e5c <__ieee754_rem_pio2+0x344>)
 8005c40:	4598      	cmp	r8, r3
 8005c42:	f300 80d8 	bgt.w	8005df6 <__ieee754_rem_pio2+0x2de>
 8005c46:	f000 f96d 	bl	8005f24 <fabs>
 8005c4a:	ec55 4b10 	vmov	r4, r5, d0
 8005c4e:	ee10 0a10 	vmov	r0, s0
 8005c52:	a379      	add	r3, pc, #484	; (adr r3, 8005e38 <__ieee754_rem_pio2+0x320>)
 8005c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c58:	4629      	mov	r1, r5
 8005c5a:	f7fa fc91 	bl	8000580 <__aeabi_dmul>
 8005c5e:	4b80      	ldr	r3, [pc, #512]	; (8005e60 <__ieee754_rem_pio2+0x348>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	f7fa fad7 	bl	8000214 <__adddf3>
 8005c66:	f7fa ff25 	bl	8000ab4 <__aeabi_d2iz>
 8005c6a:	4683      	mov	fp, r0
 8005c6c:	f7fa fc1e 	bl	80004ac <__aeabi_i2d>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	ec43 2b18 	vmov	d8, r2, r3
 8005c78:	a367      	add	r3, pc, #412	; (adr r3, 8005e18 <__ieee754_rem_pio2+0x300>)
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f7fa fc7f 	bl	8000580 <__aeabi_dmul>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4620      	mov	r0, r4
 8005c88:	4629      	mov	r1, r5
 8005c8a:	f7fa fac1 	bl	8000210 <__aeabi_dsub>
 8005c8e:	a364      	add	r3, pc, #400	; (adr r3, 8005e20 <__ieee754_rem_pio2+0x308>)
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	4606      	mov	r6, r0
 8005c96:	460f      	mov	r7, r1
 8005c98:	ec51 0b18 	vmov	r0, r1, d8
 8005c9c:	f7fa fc70 	bl	8000580 <__aeabi_dmul>
 8005ca0:	f1bb 0f1f 	cmp.w	fp, #31
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	460d      	mov	r5, r1
 8005ca8:	dc0d      	bgt.n	8005cc6 <__ieee754_rem_pio2+0x1ae>
 8005caa:	4b6e      	ldr	r3, [pc, #440]	; (8005e64 <__ieee754_rem_pio2+0x34c>)
 8005cac:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb4:	4543      	cmp	r3, r8
 8005cb6:	d006      	beq.n	8005cc6 <__ieee754_rem_pio2+0x1ae>
 8005cb8:	4622      	mov	r2, r4
 8005cba:	462b      	mov	r3, r5
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	f7fa faa6 	bl	8000210 <__aeabi_dsub>
 8005cc4:	e00e      	b.n	8005ce4 <__ieee754_rem_pio2+0x1cc>
 8005cc6:	462b      	mov	r3, r5
 8005cc8:	4622      	mov	r2, r4
 8005cca:	4630      	mov	r0, r6
 8005ccc:	4639      	mov	r1, r7
 8005cce:	f7fa fa9f 	bl	8000210 <__aeabi_dsub>
 8005cd2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005cd6:	9303      	str	r3, [sp, #12]
 8005cd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005cdc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	dc02      	bgt.n	8005cea <__ieee754_rem_pio2+0x1d2>
 8005ce4:	e9ca 0100 	strd	r0, r1, [sl]
 8005ce8:	e039      	b.n	8005d5e <__ieee754_rem_pio2+0x246>
 8005cea:	a34f      	add	r3, pc, #316	; (adr r3, 8005e28 <__ieee754_rem_pio2+0x310>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	ec51 0b18 	vmov	r0, r1, d8
 8005cf4:	f7fa fc44 	bl	8000580 <__aeabi_dmul>
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	460d      	mov	r5, r1
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4630      	mov	r0, r6
 8005d02:	4639      	mov	r1, r7
 8005d04:	f7fa fa84 	bl	8000210 <__aeabi_dsub>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4680      	mov	r8, r0
 8005d0e:	4689      	mov	r9, r1
 8005d10:	4630      	mov	r0, r6
 8005d12:	4639      	mov	r1, r7
 8005d14:	f7fa fa7c 	bl	8000210 <__aeabi_dsub>
 8005d18:	4622      	mov	r2, r4
 8005d1a:	462b      	mov	r3, r5
 8005d1c:	f7fa fa78 	bl	8000210 <__aeabi_dsub>
 8005d20:	a343      	add	r3, pc, #268	; (adr r3, 8005e30 <__ieee754_rem_pio2+0x318>)
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	4604      	mov	r4, r0
 8005d28:	460d      	mov	r5, r1
 8005d2a:	ec51 0b18 	vmov	r0, r1, d8
 8005d2e:	f7fa fc27 	bl	8000580 <__aeabi_dmul>
 8005d32:	4622      	mov	r2, r4
 8005d34:	462b      	mov	r3, r5
 8005d36:	f7fa fa6b 	bl	8000210 <__aeabi_dsub>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4604      	mov	r4, r0
 8005d40:	460d      	mov	r5, r1
 8005d42:	4640      	mov	r0, r8
 8005d44:	4649      	mov	r1, r9
 8005d46:	f7fa fa63 	bl	8000210 <__aeabi_dsub>
 8005d4a:	9a03      	ldr	r2, [sp, #12]
 8005d4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b31      	cmp	r3, #49	; 0x31
 8005d54:	dc24      	bgt.n	8005da0 <__ieee754_rem_pio2+0x288>
 8005d56:	e9ca 0100 	strd	r0, r1, [sl]
 8005d5a:	4646      	mov	r6, r8
 8005d5c:	464f      	mov	r7, r9
 8005d5e:	e9da 8900 	ldrd	r8, r9, [sl]
 8005d62:	4630      	mov	r0, r6
 8005d64:	4642      	mov	r2, r8
 8005d66:	464b      	mov	r3, r9
 8005d68:	4639      	mov	r1, r7
 8005d6a:	f7fa fa51 	bl	8000210 <__aeabi_dsub>
 8005d6e:	462b      	mov	r3, r5
 8005d70:	4622      	mov	r2, r4
 8005d72:	f7fa fa4d 	bl	8000210 <__aeabi_dsub>
 8005d76:	9b02      	ldr	r3, [sp, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005d7e:	f6bf af0b 	bge.w	8005b98 <__ieee754_rem_pio2+0x80>
 8005d82:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005d86:	f8ca 3004 	str.w	r3, [sl, #4]
 8005d8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d8e:	f8ca 8000 	str.w	r8, [sl]
 8005d92:	f8ca 0008 	str.w	r0, [sl, #8]
 8005d96:	f8ca 300c 	str.w	r3, [sl, #12]
 8005d9a:	f1cb 0b00 	rsb	fp, fp, #0
 8005d9e:	e6fb      	b.n	8005b98 <__ieee754_rem_pio2+0x80>
 8005da0:	a327      	add	r3, pc, #156	; (adr r3, 8005e40 <__ieee754_rem_pio2+0x328>)
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	ec51 0b18 	vmov	r0, r1, d8
 8005daa:	f7fa fbe9 	bl	8000580 <__aeabi_dmul>
 8005dae:	4604      	mov	r4, r0
 8005db0:	460d      	mov	r5, r1
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4640      	mov	r0, r8
 8005db8:	4649      	mov	r1, r9
 8005dba:	f7fa fa29 	bl	8000210 <__aeabi_dsub>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	460f      	mov	r7, r1
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	4649      	mov	r1, r9
 8005dca:	f7fa fa21 	bl	8000210 <__aeabi_dsub>
 8005dce:	4622      	mov	r2, r4
 8005dd0:	462b      	mov	r3, r5
 8005dd2:	f7fa fa1d 	bl	8000210 <__aeabi_dsub>
 8005dd6:	a31c      	add	r3, pc, #112	; (adr r3, 8005e48 <__ieee754_rem_pio2+0x330>)
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	4604      	mov	r4, r0
 8005dde:	460d      	mov	r5, r1
 8005de0:	ec51 0b18 	vmov	r0, r1, d8
 8005de4:	f7fa fbcc 	bl	8000580 <__aeabi_dmul>
 8005de8:	4622      	mov	r2, r4
 8005dea:	462b      	mov	r3, r5
 8005dec:	f7fa fa10 	bl	8000210 <__aeabi_dsub>
 8005df0:	4604      	mov	r4, r0
 8005df2:	460d      	mov	r5, r1
 8005df4:	e760      	b.n	8005cb8 <__ieee754_rem_pio2+0x1a0>
 8005df6:	4b1c      	ldr	r3, [pc, #112]	; (8005e68 <__ieee754_rem_pio2+0x350>)
 8005df8:	4598      	cmp	r8, r3
 8005dfa:	dd37      	ble.n	8005e6c <__ieee754_rem_pio2+0x354>
 8005dfc:	ee10 2a10 	vmov	r2, s0
 8005e00:	462b      	mov	r3, r5
 8005e02:	4620      	mov	r0, r4
 8005e04:	4629      	mov	r1, r5
 8005e06:	f7fa fa03 	bl	8000210 <__aeabi_dsub>
 8005e0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005e0e:	e9ca 0100 	strd	r0, r1, [sl]
 8005e12:	e695      	b.n	8005b40 <__ieee754_rem_pio2+0x28>
 8005e14:	f3af 8000 	nop.w
 8005e18:	54400000 	.word	0x54400000
 8005e1c:	3ff921fb 	.word	0x3ff921fb
 8005e20:	1a626331 	.word	0x1a626331
 8005e24:	3dd0b461 	.word	0x3dd0b461
 8005e28:	1a600000 	.word	0x1a600000
 8005e2c:	3dd0b461 	.word	0x3dd0b461
 8005e30:	2e037073 	.word	0x2e037073
 8005e34:	3ba3198a 	.word	0x3ba3198a
 8005e38:	6dc9c883 	.word	0x6dc9c883
 8005e3c:	3fe45f30 	.word	0x3fe45f30
 8005e40:	2e000000 	.word	0x2e000000
 8005e44:	3ba3198a 	.word	0x3ba3198a
 8005e48:	252049c1 	.word	0x252049c1
 8005e4c:	397b839a 	.word	0x397b839a
 8005e50:	3fe921fb 	.word	0x3fe921fb
 8005e54:	4002d97b 	.word	0x4002d97b
 8005e58:	3ff921fb 	.word	0x3ff921fb
 8005e5c:	413921fb 	.word	0x413921fb
 8005e60:	3fe00000 	.word	0x3fe00000
 8005e64:	08006840 	.word	0x08006840
 8005e68:	7fefffff 	.word	0x7fefffff
 8005e6c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005e70:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005e74:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005e78:	4620      	mov	r0, r4
 8005e7a:	460d      	mov	r5, r1
 8005e7c:	f7fa fe1a 	bl	8000ab4 <__aeabi_d2iz>
 8005e80:	f7fa fb14 	bl	80004ac <__aeabi_i2d>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4620      	mov	r0, r4
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e90:	f7fa f9be 	bl	8000210 <__aeabi_dsub>
 8005e94:	4b21      	ldr	r3, [pc, #132]	; (8005f1c <__ieee754_rem_pio2+0x404>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	f7fa fb72 	bl	8000580 <__aeabi_dmul>
 8005e9c:	460d      	mov	r5, r1
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	f7fa fe08 	bl	8000ab4 <__aeabi_d2iz>
 8005ea4:	f7fa fb02 	bl	80004ac <__aeabi_i2d>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4620      	mov	r0, r4
 8005eae:	4629      	mov	r1, r5
 8005eb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005eb4:	f7fa f9ac 	bl	8000210 <__aeabi_dsub>
 8005eb8:	4b18      	ldr	r3, [pc, #96]	; (8005f1c <__ieee754_rem_pio2+0x404>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f7fa fb60 	bl	8000580 <__aeabi_dmul>
 8005ec0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ec4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8005ec8:	2703      	movs	r7, #3
 8005eca:	2400      	movs	r4, #0
 8005ecc:	2500      	movs	r5, #0
 8005ece:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	462b      	mov	r3, r5
 8005ed6:	46b9      	mov	r9, r7
 8005ed8:	3f01      	subs	r7, #1
 8005eda:	f7fa fdb9 	bl	8000a50 <__aeabi_dcmpeq>
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	d1f5      	bne.n	8005ece <__ieee754_rem_pio2+0x3b6>
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <__ieee754_rem_pio2+0x408>)
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	4632      	mov	r2, r6
 8005eec:	464b      	mov	r3, r9
 8005eee:	4651      	mov	r1, sl
 8005ef0:	a804      	add	r0, sp, #16
 8005ef2:	f000 f821 	bl	8005f38 <__kernel_rem_pio2>
 8005ef6:	9b02      	ldr	r3, [sp, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	4683      	mov	fp, r0
 8005efc:	f6bf ae4c 	bge.w	8005b98 <__ieee754_rem_pio2+0x80>
 8005f00:	e9da 2100 	ldrd	r2, r1, [sl]
 8005f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f08:	e9ca 2300 	strd	r2, r3, [sl]
 8005f0c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005f10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f14:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005f18:	e73f      	b.n	8005d9a <__ieee754_rem_pio2+0x282>
 8005f1a:	bf00      	nop
 8005f1c:	41700000 	.word	0x41700000
 8005f20:	080068c0 	.word	0x080068c0

08005f24 <fabs>:
 8005f24:	ec51 0b10 	vmov	r0, r1, d0
 8005f28:	ee10 2a10 	vmov	r2, s0
 8005f2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f30:	ec43 2b10 	vmov	d0, r2, r3
 8005f34:	4770      	bx	lr
	...

08005f38 <__kernel_rem_pio2>:
 8005f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3c:	ed2d 8b02 	vpush	{d8}
 8005f40:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005f44:	f112 0f14 	cmn.w	r2, #20
 8005f48:	9306      	str	r3, [sp, #24]
 8005f4a:	9104      	str	r1, [sp, #16]
 8005f4c:	4bc2      	ldr	r3, [pc, #776]	; (8006258 <__kernel_rem_pio2+0x320>)
 8005f4e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005f50:	9009      	str	r0, [sp, #36]	; 0x24
 8005f52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	9b06      	ldr	r3, [sp, #24]
 8005f5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f5e:	bfa8      	it	ge
 8005f60:	1ed4      	subge	r4, r2, #3
 8005f62:	9305      	str	r3, [sp, #20]
 8005f64:	bfb2      	itee	lt
 8005f66:	2400      	movlt	r4, #0
 8005f68:	2318      	movge	r3, #24
 8005f6a:	fb94 f4f3 	sdivge	r4, r4, r3
 8005f6e:	f06f 0317 	mvn.w	r3, #23
 8005f72:	fb04 3303 	mla	r3, r4, r3, r3
 8005f76:	eb03 0a02 	add.w	sl, r3, r2
 8005f7a:	9b00      	ldr	r3, [sp, #0]
 8005f7c:	9a05      	ldr	r2, [sp, #20]
 8005f7e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006248 <__kernel_rem_pio2+0x310>
 8005f82:	eb03 0802 	add.w	r8, r3, r2
 8005f86:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005f88:	1aa7      	subs	r7, r4, r2
 8005f8a:	ae20      	add	r6, sp, #128	; 0x80
 8005f8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005f90:	2500      	movs	r5, #0
 8005f92:	4545      	cmp	r5, r8
 8005f94:	dd13      	ble.n	8005fbe <__kernel_rem_pio2+0x86>
 8005f96:	9b06      	ldr	r3, [sp, #24]
 8005f98:	aa20      	add	r2, sp, #128	; 0x80
 8005f9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005f9e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005fa2:	f04f 0800 	mov.w	r8, #0
 8005fa6:	9b00      	ldr	r3, [sp, #0]
 8005fa8:	4598      	cmp	r8, r3
 8005faa:	dc31      	bgt.n	8006010 <__kernel_rem_pio2+0xd8>
 8005fac:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006248 <__kernel_rem_pio2+0x310>
 8005fb0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005fb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005fb8:	462f      	mov	r7, r5
 8005fba:	2600      	movs	r6, #0
 8005fbc:	e01b      	b.n	8005ff6 <__kernel_rem_pio2+0xbe>
 8005fbe:	42ef      	cmn	r7, r5
 8005fc0:	d407      	bmi.n	8005fd2 <__kernel_rem_pio2+0x9a>
 8005fc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005fc6:	f7fa fa71 	bl	80004ac <__aeabi_i2d>
 8005fca:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005fce:	3501      	adds	r5, #1
 8005fd0:	e7df      	b.n	8005f92 <__kernel_rem_pio2+0x5a>
 8005fd2:	ec51 0b18 	vmov	r0, r1, d8
 8005fd6:	e7f8      	b.n	8005fca <__kernel_rem_pio2+0x92>
 8005fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005fe0:	f7fa face 	bl	8000580 <__aeabi_dmul>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fec:	f7fa f912 	bl	8000214 <__adddf3>
 8005ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ff4:	3601      	adds	r6, #1
 8005ff6:	9b05      	ldr	r3, [sp, #20]
 8005ff8:	429e      	cmp	r6, r3
 8005ffa:	f1a7 0708 	sub.w	r7, r7, #8
 8005ffe:	ddeb      	ble.n	8005fd8 <__kernel_rem_pio2+0xa0>
 8006000:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006004:	f108 0801 	add.w	r8, r8, #1
 8006008:	ecab 7b02 	vstmia	fp!, {d7}
 800600c:	3508      	adds	r5, #8
 800600e:	e7ca      	b.n	8005fa6 <__kernel_rem_pio2+0x6e>
 8006010:	9b00      	ldr	r3, [sp, #0]
 8006012:	aa0c      	add	r2, sp, #48	; 0x30
 8006014:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006018:	930b      	str	r3, [sp, #44]	; 0x2c
 800601a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800601c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006020:	9c00      	ldr	r4, [sp, #0]
 8006022:	930a      	str	r3, [sp, #40]	; 0x28
 8006024:	00e3      	lsls	r3, r4, #3
 8006026:	9308      	str	r3, [sp, #32]
 8006028:	ab98      	add	r3, sp, #608	; 0x260
 800602a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800602e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006032:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006036:	ab70      	add	r3, sp, #448	; 0x1c0
 8006038:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800603c:	46c3      	mov	fp, r8
 800603e:	46a1      	mov	r9, r4
 8006040:	f1b9 0f00 	cmp.w	r9, #0
 8006044:	f1a5 0508 	sub.w	r5, r5, #8
 8006048:	dc77      	bgt.n	800613a <__kernel_rem_pio2+0x202>
 800604a:	ec47 6b10 	vmov	d0, r6, r7
 800604e:	4650      	mov	r0, sl
 8006050:	f000 fac2 	bl	80065d8 <scalbn>
 8006054:	ec57 6b10 	vmov	r6, r7, d0
 8006058:	2200      	movs	r2, #0
 800605a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800605e:	ee10 0a10 	vmov	r0, s0
 8006062:	4639      	mov	r1, r7
 8006064:	f7fa fa8c 	bl	8000580 <__aeabi_dmul>
 8006068:	ec41 0b10 	vmov	d0, r0, r1
 800606c:	f000 fb34 	bl	80066d8 <floor>
 8006070:	4b7a      	ldr	r3, [pc, #488]	; (800625c <__kernel_rem_pio2+0x324>)
 8006072:	ec51 0b10 	vmov	r0, r1, d0
 8006076:	2200      	movs	r2, #0
 8006078:	f7fa fa82 	bl	8000580 <__aeabi_dmul>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4630      	mov	r0, r6
 8006082:	4639      	mov	r1, r7
 8006084:	f7fa f8c4 	bl	8000210 <__aeabi_dsub>
 8006088:	460f      	mov	r7, r1
 800608a:	4606      	mov	r6, r0
 800608c:	f7fa fd12 	bl	8000ab4 <__aeabi_d2iz>
 8006090:	9002      	str	r0, [sp, #8]
 8006092:	f7fa fa0b 	bl	80004ac <__aeabi_i2d>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4630      	mov	r0, r6
 800609c:	4639      	mov	r1, r7
 800609e:	f7fa f8b7 	bl	8000210 <__aeabi_dsub>
 80060a2:	f1ba 0f00 	cmp.w	sl, #0
 80060a6:	4606      	mov	r6, r0
 80060a8:	460f      	mov	r7, r1
 80060aa:	dd6d      	ble.n	8006188 <__kernel_rem_pio2+0x250>
 80060ac:	1e61      	subs	r1, r4, #1
 80060ae:	ab0c      	add	r3, sp, #48	; 0x30
 80060b0:	9d02      	ldr	r5, [sp, #8]
 80060b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060b6:	f1ca 0018 	rsb	r0, sl, #24
 80060ba:	fa43 f200 	asr.w	r2, r3, r0
 80060be:	4415      	add	r5, r2
 80060c0:	4082      	lsls	r2, r0
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	aa0c      	add	r2, sp, #48	; 0x30
 80060c6:	9502      	str	r5, [sp, #8]
 80060c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80060cc:	f1ca 0217 	rsb	r2, sl, #23
 80060d0:	fa43 fb02 	asr.w	fp, r3, r2
 80060d4:	f1bb 0f00 	cmp.w	fp, #0
 80060d8:	dd65      	ble.n	80061a6 <__kernel_rem_pio2+0x26e>
 80060da:	9b02      	ldr	r3, [sp, #8]
 80060dc:	2200      	movs	r2, #0
 80060de:	3301      	adds	r3, #1
 80060e0:	9302      	str	r3, [sp, #8]
 80060e2:	4615      	mov	r5, r2
 80060e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80060e8:	4294      	cmp	r4, r2
 80060ea:	f300 809f 	bgt.w	800622c <__kernel_rem_pio2+0x2f4>
 80060ee:	f1ba 0f00 	cmp.w	sl, #0
 80060f2:	dd07      	ble.n	8006104 <__kernel_rem_pio2+0x1cc>
 80060f4:	f1ba 0f01 	cmp.w	sl, #1
 80060f8:	f000 80c1 	beq.w	800627e <__kernel_rem_pio2+0x346>
 80060fc:	f1ba 0f02 	cmp.w	sl, #2
 8006100:	f000 80c7 	beq.w	8006292 <__kernel_rem_pio2+0x35a>
 8006104:	f1bb 0f02 	cmp.w	fp, #2
 8006108:	d14d      	bne.n	80061a6 <__kernel_rem_pio2+0x26e>
 800610a:	4632      	mov	r2, r6
 800610c:	463b      	mov	r3, r7
 800610e:	4954      	ldr	r1, [pc, #336]	; (8006260 <__kernel_rem_pio2+0x328>)
 8006110:	2000      	movs	r0, #0
 8006112:	f7fa f87d 	bl	8000210 <__aeabi_dsub>
 8006116:	4606      	mov	r6, r0
 8006118:	460f      	mov	r7, r1
 800611a:	2d00      	cmp	r5, #0
 800611c:	d043      	beq.n	80061a6 <__kernel_rem_pio2+0x26e>
 800611e:	4650      	mov	r0, sl
 8006120:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006250 <__kernel_rem_pio2+0x318>
 8006124:	f000 fa58 	bl	80065d8 <scalbn>
 8006128:	4630      	mov	r0, r6
 800612a:	4639      	mov	r1, r7
 800612c:	ec53 2b10 	vmov	r2, r3, d0
 8006130:	f7fa f86e 	bl	8000210 <__aeabi_dsub>
 8006134:	4606      	mov	r6, r0
 8006136:	460f      	mov	r7, r1
 8006138:	e035      	b.n	80061a6 <__kernel_rem_pio2+0x26e>
 800613a:	4b4a      	ldr	r3, [pc, #296]	; (8006264 <__kernel_rem_pio2+0x32c>)
 800613c:	2200      	movs	r2, #0
 800613e:	4630      	mov	r0, r6
 8006140:	4639      	mov	r1, r7
 8006142:	f7fa fa1d 	bl	8000580 <__aeabi_dmul>
 8006146:	f7fa fcb5 	bl	8000ab4 <__aeabi_d2iz>
 800614a:	f7fa f9af 	bl	80004ac <__aeabi_i2d>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	ec43 2b18 	vmov	d8, r2, r3
 8006156:	4b44      	ldr	r3, [pc, #272]	; (8006268 <__kernel_rem_pio2+0x330>)
 8006158:	2200      	movs	r2, #0
 800615a:	f7fa fa11 	bl	8000580 <__aeabi_dmul>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4630      	mov	r0, r6
 8006164:	4639      	mov	r1, r7
 8006166:	f7fa f853 	bl	8000210 <__aeabi_dsub>
 800616a:	f7fa fca3 	bl	8000ab4 <__aeabi_d2iz>
 800616e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006172:	f84b 0b04 	str.w	r0, [fp], #4
 8006176:	ec51 0b18 	vmov	r0, r1, d8
 800617a:	f7fa f84b 	bl	8000214 <__adddf3>
 800617e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006182:	4606      	mov	r6, r0
 8006184:	460f      	mov	r7, r1
 8006186:	e75b      	b.n	8006040 <__kernel_rem_pio2+0x108>
 8006188:	d106      	bne.n	8006198 <__kernel_rem_pio2+0x260>
 800618a:	1e63      	subs	r3, r4, #1
 800618c:	aa0c      	add	r2, sp, #48	; 0x30
 800618e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006192:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006196:	e79d      	b.n	80060d4 <__kernel_rem_pio2+0x19c>
 8006198:	4b34      	ldr	r3, [pc, #208]	; (800626c <__kernel_rem_pio2+0x334>)
 800619a:	2200      	movs	r2, #0
 800619c:	f7fa fc76 	bl	8000a8c <__aeabi_dcmpge>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d140      	bne.n	8006226 <__kernel_rem_pio2+0x2ee>
 80061a4:	4683      	mov	fp, r0
 80061a6:	2200      	movs	r2, #0
 80061a8:	2300      	movs	r3, #0
 80061aa:	4630      	mov	r0, r6
 80061ac:	4639      	mov	r1, r7
 80061ae:	f7fa fc4f 	bl	8000a50 <__aeabi_dcmpeq>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	f000 80c1 	beq.w	800633a <__kernel_rem_pio2+0x402>
 80061b8:	1e65      	subs	r5, r4, #1
 80061ba:	462b      	mov	r3, r5
 80061bc:	2200      	movs	r2, #0
 80061be:	9900      	ldr	r1, [sp, #0]
 80061c0:	428b      	cmp	r3, r1
 80061c2:	da6d      	bge.n	80062a0 <__kernel_rem_pio2+0x368>
 80061c4:	2a00      	cmp	r2, #0
 80061c6:	f000 808a 	beq.w	80062de <__kernel_rem_pio2+0x3a6>
 80061ca:	ab0c      	add	r3, sp, #48	; 0x30
 80061cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80061d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 80ae 	beq.w	8006336 <__kernel_rem_pio2+0x3fe>
 80061da:	4650      	mov	r0, sl
 80061dc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006250 <__kernel_rem_pio2+0x318>
 80061e0:	f000 f9fa 	bl	80065d8 <scalbn>
 80061e4:	1c6b      	adds	r3, r5, #1
 80061e6:	00da      	lsls	r2, r3, #3
 80061e8:	9205      	str	r2, [sp, #20]
 80061ea:	ec57 6b10 	vmov	r6, r7, d0
 80061ee:	aa70      	add	r2, sp, #448	; 0x1c0
 80061f0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006264 <__kernel_rem_pio2+0x32c>
 80061f4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80061f8:	462c      	mov	r4, r5
 80061fa:	f04f 0800 	mov.w	r8, #0
 80061fe:	2c00      	cmp	r4, #0
 8006200:	f280 80d4 	bge.w	80063ac <__kernel_rem_pio2+0x474>
 8006204:	462c      	mov	r4, r5
 8006206:	2c00      	cmp	r4, #0
 8006208:	f2c0 8102 	blt.w	8006410 <__kernel_rem_pio2+0x4d8>
 800620c:	4b18      	ldr	r3, [pc, #96]	; (8006270 <__kernel_rem_pio2+0x338>)
 800620e:	461e      	mov	r6, r3
 8006210:	ab70      	add	r3, sp, #448	; 0x1c0
 8006212:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8006216:	1b2b      	subs	r3, r5, r4
 8006218:	f04f 0900 	mov.w	r9, #0
 800621c:	f04f 0a00 	mov.w	sl, #0
 8006220:	2700      	movs	r7, #0
 8006222:	9306      	str	r3, [sp, #24]
 8006224:	e0e6      	b.n	80063f4 <__kernel_rem_pio2+0x4bc>
 8006226:	f04f 0b02 	mov.w	fp, #2
 800622a:	e756      	b.n	80060da <__kernel_rem_pio2+0x1a2>
 800622c:	f8d8 3000 	ldr.w	r3, [r8]
 8006230:	bb05      	cbnz	r5, 8006274 <__kernel_rem_pio2+0x33c>
 8006232:	b123      	cbz	r3, 800623e <__kernel_rem_pio2+0x306>
 8006234:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006238:	f8c8 3000 	str.w	r3, [r8]
 800623c:	2301      	movs	r3, #1
 800623e:	3201      	adds	r2, #1
 8006240:	f108 0804 	add.w	r8, r8, #4
 8006244:	461d      	mov	r5, r3
 8006246:	e74f      	b.n	80060e8 <__kernel_rem_pio2+0x1b0>
	...
 8006254:	3ff00000 	.word	0x3ff00000
 8006258:	08006a08 	.word	0x08006a08
 800625c:	40200000 	.word	0x40200000
 8006260:	3ff00000 	.word	0x3ff00000
 8006264:	3e700000 	.word	0x3e700000
 8006268:	41700000 	.word	0x41700000
 800626c:	3fe00000 	.word	0x3fe00000
 8006270:	080069c8 	.word	0x080069c8
 8006274:	1acb      	subs	r3, r1, r3
 8006276:	f8c8 3000 	str.w	r3, [r8]
 800627a:	462b      	mov	r3, r5
 800627c:	e7df      	b.n	800623e <__kernel_rem_pio2+0x306>
 800627e:	1e62      	subs	r2, r4, #1
 8006280:	ab0c      	add	r3, sp, #48	; 0x30
 8006282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006286:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800628a:	a90c      	add	r1, sp, #48	; 0x30
 800628c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006290:	e738      	b.n	8006104 <__kernel_rem_pio2+0x1cc>
 8006292:	1e62      	subs	r2, r4, #1
 8006294:	ab0c      	add	r3, sp, #48	; 0x30
 8006296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800629e:	e7f4      	b.n	800628a <__kernel_rem_pio2+0x352>
 80062a0:	a90c      	add	r1, sp, #48	; 0x30
 80062a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	430a      	orrs	r2, r1
 80062aa:	e788      	b.n	80061be <__kernel_rem_pio2+0x286>
 80062ac:	3301      	adds	r3, #1
 80062ae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80062b2:	2900      	cmp	r1, #0
 80062b4:	d0fa      	beq.n	80062ac <__kernel_rem_pio2+0x374>
 80062b6:	9a08      	ldr	r2, [sp, #32]
 80062b8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80062bc:	446a      	add	r2, sp
 80062be:	3a98      	subs	r2, #152	; 0x98
 80062c0:	9208      	str	r2, [sp, #32]
 80062c2:	9a06      	ldr	r2, [sp, #24]
 80062c4:	a920      	add	r1, sp, #128	; 0x80
 80062c6:	18a2      	adds	r2, r4, r2
 80062c8:	18e3      	adds	r3, r4, r3
 80062ca:	f104 0801 	add.w	r8, r4, #1
 80062ce:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80062d2:	9302      	str	r3, [sp, #8]
 80062d4:	9b02      	ldr	r3, [sp, #8]
 80062d6:	4543      	cmp	r3, r8
 80062d8:	da04      	bge.n	80062e4 <__kernel_rem_pio2+0x3ac>
 80062da:	461c      	mov	r4, r3
 80062dc:	e6a2      	b.n	8006024 <__kernel_rem_pio2+0xec>
 80062de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062e0:	2301      	movs	r3, #1
 80062e2:	e7e4      	b.n	80062ae <__kernel_rem_pio2+0x376>
 80062e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80062ea:	f7fa f8df 	bl	80004ac <__aeabi_i2d>
 80062ee:	e8e5 0102 	strd	r0, r1, [r5], #8
 80062f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f4:	46ab      	mov	fp, r5
 80062f6:	461c      	mov	r4, r3
 80062f8:	f04f 0900 	mov.w	r9, #0
 80062fc:	2600      	movs	r6, #0
 80062fe:	2700      	movs	r7, #0
 8006300:	9b05      	ldr	r3, [sp, #20]
 8006302:	4599      	cmp	r9, r3
 8006304:	dd06      	ble.n	8006314 <__kernel_rem_pio2+0x3dc>
 8006306:	9b08      	ldr	r3, [sp, #32]
 8006308:	e8e3 6702 	strd	r6, r7, [r3], #8
 800630c:	f108 0801 	add.w	r8, r8, #1
 8006310:	9308      	str	r3, [sp, #32]
 8006312:	e7df      	b.n	80062d4 <__kernel_rem_pio2+0x39c>
 8006314:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006318:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800631c:	f7fa f930 	bl	8000580 <__aeabi_dmul>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4630      	mov	r0, r6
 8006326:	4639      	mov	r1, r7
 8006328:	f7f9 ff74 	bl	8000214 <__adddf3>
 800632c:	f109 0901 	add.w	r9, r9, #1
 8006330:	4606      	mov	r6, r0
 8006332:	460f      	mov	r7, r1
 8006334:	e7e4      	b.n	8006300 <__kernel_rem_pio2+0x3c8>
 8006336:	3d01      	subs	r5, #1
 8006338:	e747      	b.n	80061ca <__kernel_rem_pio2+0x292>
 800633a:	ec47 6b10 	vmov	d0, r6, r7
 800633e:	f1ca 0000 	rsb	r0, sl, #0
 8006342:	f000 f949 	bl	80065d8 <scalbn>
 8006346:	ec57 6b10 	vmov	r6, r7, d0
 800634a:	4ba0      	ldr	r3, [pc, #640]	; (80065cc <__kernel_rem_pio2+0x694>)
 800634c:	ee10 0a10 	vmov	r0, s0
 8006350:	2200      	movs	r2, #0
 8006352:	4639      	mov	r1, r7
 8006354:	f7fa fb9a 	bl	8000a8c <__aeabi_dcmpge>
 8006358:	b1f8      	cbz	r0, 800639a <__kernel_rem_pio2+0x462>
 800635a:	4b9d      	ldr	r3, [pc, #628]	; (80065d0 <__kernel_rem_pio2+0x698>)
 800635c:	2200      	movs	r2, #0
 800635e:	4630      	mov	r0, r6
 8006360:	4639      	mov	r1, r7
 8006362:	f7fa f90d 	bl	8000580 <__aeabi_dmul>
 8006366:	f7fa fba5 	bl	8000ab4 <__aeabi_d2iz>
 800636a:	4680      	mov	r8, r0
 800636c:	f7fa f89e 	bl	80004ac <__aeabi_i2d>
 8006370:	4b96      	ldr	r3, [pc, #600]	; (80065cc <__kernel_rem_pio2+0x694>)
 8006372:	2200      	movs	r2, #0
 8006374:	f7fa f904 	bl	8000580 <__aeabi_dmul>
 8006378:	460b      	mov	r3, r1
 800637a:	4602      	mov	r2, r0
 800637c:	4639      	mov	r1, r7
 800637e:	4630      	mov	r0, r6
 8006380:	f7f9 ff46 	bl	8000210 <__aeabi_dsub>
 8006384:	f7fa fb96 	bl	8000ab4 <__aeabi_d2iz>
 8006388:	1c65      	adds	r5, r4, #1
 800638a:	ab0c      	add	r3, sp, #48	; 0x30
 800638c:	f10a 0a18 	add.w	sl, sl, #24
 8006390:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006394:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006398:	e71f      	b.n	80061da <__kernel_rem_pio2+0x2a2>
 800639a:	4630      	mov	r0, r6
 800639c:	4639      	mov	r1, r7
 800639e:	f7fa fb89 	bl	8000ab4 <__aeabi_d2iz>
 80063a2:	ab0c      	add	r3, sp, #48	; 0x30
 80063a4:	4625      	mov	r5, r4
 80063a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80063aa:	e716      	b.n	80061da <__kernel_rem_pio2+0x2a2>
 80063ac:	ab0c      	add	r3, sp, #48	; 0x30
 80063ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80063b2:	f7fa f87b 	bl	80004ac <__aeabi_i2d>
 80063b6:	4632      	mov	r2, r6
 80063b8:	463b      	mov	r3, r7
 80063ba:	f7fa f8e1 	bl	8000580 <__aeabi_dmul>
 80063be:	4642      	mov	r2, r8
 80063c0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80063c4:	464b      	mov	r3, r9
 80063c6:	4630      	mov	r0, r6
 80063c8:	4639      	mov	r1, r7
 80063ca:	f7fa f8d9 	bl	8000580 <__aeabi_dmul>
 80063ce:	3c01      	subs	r4, #1
 80063d0:	4606      	mov	r6, r0
 80063d2:	460f      	mov	r7, r1
 80063d4:	e713      	b.n	80061fe <__kernel_rem_pio2+0x2c6>
 80063d6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80063da:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80063de:	f7fa f8cf 	bl	8000580 <__aeabi_dmul>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4648      	mov	r0, r9
 80063e8:	4651      	mov	r1, sl
 80063ea:	f7f9 ff13 	bl	8000214 <__adddf3>
 80063ee:	3701      	adds	r7, #1
 80063f0:	4681      	mov	r9, r0
 80063f2:	468a      	mov	sl, r1
 80063f4:	9b00      	ldr	r3, [sp, #0]
 80063f6:	429f      	cmp	r7, r3
 80063f8:	dc02      	bgt.n	8006400 <__kernel_rem_pio2+0x4c8>
 80063fa:	9b06      	ldr	r3, [sp, #24]
 80063fc:	429f      	cmp	r7, r3
 80063fe:	ddea      	ble.n	80063d6 <__kernel_rem_pio2+0x49e>
 8006400:	9a06      	ldr	r2, [sp, #24]
 8006402:	ab48      	add	r3, sp, #288	; 0x120
 8006404:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006408:	e9c6 9a00 	strd	r9, sl, [r6]
 800640c:	3c01      	subs	r4, #1
 800640e:	e6fa      	b.n	8006206 <__kernel_rem_pio2+0x2ce>
 8006410:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006412:	2b02      	cmp	r3, #2
 8006414:	dc0b      	bgt.n	800642e <__kernel_rem_pio2+0x4f6>
 8006416:	2b00      	cmp	r3, #0
 8006418:	dc39      	bgt.n	800648e <__kernel_rem_pio2+0x556>
 800641a:	d05d      	beq.n	80064d8 <__kernel_rem_pio2+0x5a0>
 800641c:	9b02      	ldr	r3, [sp, #8]
 800641e:	f003 0007 	and.w	r0, r3, #7
 8006422:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006426:	ecbd 8b02 	vpop	{d8}
 800642a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006430:	2b03      	cmp	r3, #3
 8006432:	d1f3      	bne.n	800641c <__kernel_rem_pio2+0x4e4>
 8006434:	9b05      	ldr	r3, [sp, #20]
 8006436:	9500      	str	r5, [sp, #0]
 8006438:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800643c:	eb0d 0403 	add.w	r4, sp, r3
 8006440:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8006444:	46a2      	mov	sl, r4
 8006446:	9b00      	ldr	r3, [sp, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	f1aa 0a08 	sub.w	sl, sl, #8
 800644e:	dc69      	bgt.n	8006524 <__kernel_rem_pio2+0x5ec>
 8006450:	46aa      	mov	sl, r5
 8006452:	f1ba 0f01 	cmp.w	sl, #1
 8006456:	f1a4 0408 	sub.w	r4, r4, #8
 800645a:	f300 8083 	bgt.w	8006564 <__kernel_rem_pio2+0x62c>
 800645e:	9c05      	ldr	r4, [sp, #20]
 8006460:	ab48      	add	r3, sp, #288	; 0x120
 8006462:	441c      	add	r4, r3
 8006464:	2000      	movs	r0, #0
 8006466:	2100      	movs	r1, #0
 8006468:	2d01      	cmp	r5, #1
 800646a:	f300 809a 	bgt.w	80065a2 <__kernel_rem_pio2+0x66a>
 800646e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006472:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006476:	f1bb 0f00 	cmp.w	fp, #0
 800647a:	f040 8098 	bne.w	80065ae <__kernel_rem_pio2+0x676>
 800647e:	9b04      	ldr	r3, [sp, #16]
 8006480:	e9c3 7800 	strd	r7, r8, [r3]
 8006484:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006488:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800648c:	e7c6      	b.n	800641c <__kernel_rem_pio2+0x4e4>
 800648e:	9e05      	ldr	r6, [sp, #20]
 8006490:	ab48      	add	r3, sp, #288	; 0x120
 8006492:	441e      	add	r6, r3
 8006494:	462c      	mov	r4, r5
 8006496:	2000      	movs	r0, #0
 8006498:	2100      	movs	r1, #0
 800649a:	2c00      	cmp	r4, #0
 800649c:	da33      	bge.n	8006506 <__kernel_rem_pio2+0x5ce>
 800649e:	f1bb 0f00 	cmp.w	fp, #0
 80064a2:	d036      	beq.n	8006512 <__kernel_rem_pio2+0x5da>
 80064a4:	4602      	mov	r2, r0
 80064a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064aa:	9c04      	ldr	r4, [sp, #16]
 80064ac:	e9c4 2300 	strd	r2, r3, [r4]
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80064b8:	f7f9 feaa 	bl	8000210 <__aeabi_dsub>
 80064bc:	ae4a      	add	r6, sp, #296	; 0x128
 80064be:	2401      	movs	r4, #1
 80064c0:	42a5      	cmp	r5, r4
 80064c2:	da29      	bge.n	8006518 <__kernel_rem_pio2+0x5e0>
 80064c4:	f1bb 0f00 	cmp.w	fp, #0
 80064c8:	d002      	beq.n	80064d0 <__kernel_rem_pio2+0x598>
 80064ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064ce:	4619      	mov	r1, r3
 80064d0:	9b04      	ldr	r3, [sp, #16]
 80064d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80064d6:	e7a1      	b.n	800641c <__kernel_rem_pio2+0x4e4>
 80064d8:	9c05      	ldr	r4, [sp, #20]
 80064da:	ab48      	add	r3, sp, #288	; 0x120
 80064dc:	441c      	add	r4, r3
 80064de:	2000      	movs	r0, #0
 80064e0:	2100      	movs	r1, #0
 80064e2:	2d00      	cmp	r5, #0
 80064e4:	da09      	bge.n	80064fa <__kernel_rem_pio2+0x5c2>
 80064e6:	f1bb 0f00 	cmp.w	fp, #0
 80064ea:	d002      	beq.n	80064f2 <__kernel_rem_pio2+0x5ba>
 80064ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064f0:	4619      	mov	r1, r3
 80064f2:	9b04      	ldr	r3, [sp, #16]
 80064f4:	e9c3 0100 	strd	r0, r1, [r3]
 80064f8:	e790      	b.n	800641c <__kernel_rem_pio2+0x4e4>
 80064fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80064fe:	f7f9 fe89 	bl	8000214 <__adddf3>
 8006502:	3d01      	subs	r5, #1
 8006504:	e7ed      	b.n	80064e2 <__kernel_rem_pio2+0x5aa>
 8006506:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800650a:	f7f9 fe83 	bl	8000214 <__adddf3>
 800650e:	3c01      	subs	r4, #1
 8006510:	e7c3      	b.n	800649a <__kernel_rem_pio2+0x562>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	e7c8      	b.n	80064aa <__kernel_rem_pio2+0x572>
 8006518:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800651c:	f7f9 fe7a 	bl	8000214 <__adddf3>
 8006520:	3401      	adds	r4, #1
 8006522:	e7cd      	b.n	80064c0 <__kernel_rem_pio2+0x588>
 8006524:	e9da 8900 	ldrd	r8, r9, [sl]
 8006528:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800652c:	9b00      	ldr	r3, [sp, #0]
 800652e:	3b01      	subs	r3, #1
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4632      	mov	r2, r6
 8006534:	463b      	mov	r3, r7
 8006536:	4640      	mov	r0, r8
 8006538:	4649      	mov	r1, r9
 800653a:	f7f9 fe6b 	bl	8000214 <__adddf3>
 800653e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4640      	mov	r0, r8
 8006548:	4649      	mov	r1, r9
 800654a:	f7f9 fe61 	bl	8000210 <__aeabi_dsub>
 800654e:	4632      	mov	r2, r6
 8006550:	463b      	mov	r3, r7
 8006552:	f7f9 fe5f 	bl	8000214 <__adddf3>
 8006556:	ed9d 7b06 	vldr	d7, [sp, #24]
 800655a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800655e:	ed8a 7b00 	vstr	d7, [sl]
 8006562:	e770      	b.n	8006446 <__kernel_rem_pio2+0x50e>
 8006564:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006568:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800656c:	4640      	mov	r0, r8
 800656e:	4632      	mov	r2, r6
 8006570:	463b      	mov	r3, r7
 8006572:	4649      	mov	r1, r9
 8006574:	f7f9 fe4e 	bl	8000214 <__adddf3>
 8006578:	e9cd 0100 	strd	r0, r1, [sp]
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4640      	mov	r0, r8
 8006582:	4649      	mov	r1, r9
 8006584:	f7f9 fe44 	bl	8000210 <__aeabi_dsub>
 8006588:	4632      	mov	r2, r6
 800658a:	463b      	mov	r3, r7
 800658c:	f7f9 fe42 	bl	8000214 <__adddf3>
 8006590:	ed9d 7b00 	vldr	d7, [sp]
 8006594:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006598:	ed84 7b00 	vstr	d7, [r4]
 800659c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065a0:	e757      	b.n	8006452 <__kernel_rem_pio2+0x51a>
 80065a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80065a6:	f7f9 fe35 	bl	8000214 <__adddf3>
 80065aa:	3d01      	subs	r5, #1
 80065ac:	e75c      	b.n	8006468 <__kernel_rem_pio2+0x530>
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	9a04      	ldr	r2, [sp, #16]
 80065b2:	601f      	str	r7, [r3, #0]
 80065b4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80065b8:	605c      	str	r4, [r3, #4]
 80065ba:	609d      	str	r5, [r3, #8]
 80065bc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80065c0:	60d3      	str	r3, [r2, #12]
 80065c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065c6:	6110      	str	r0, [r2, #16]
 80065c8:	6153      	str	r3, [r2, #20]
 80065ca:	e727      	b.n	800641c <__kernel_rem_pio2+0x4e4>
 80065cc:	41700000 	.word	0x41700000
 80065d0:	3e700000 	.word	0x3e700000
 80065d4:	00000000 	.word	0x00000000

080065d8 <scalbn>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	ec55 4b10 	vmov	r4, r5, d0
 80065de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80065e2:	4606      	mov	r6, r0
 80065e4:	462b      	mov	r3, r5
 80065e6:	b999      	cbnz	r1, 8006610 <scalbn+0x38>
 80065e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80065ec:	4323      	orrs	r3, r4
 80065ee:	d03f      	beq.n	8006670 <scalbn+0x98>
 80065f0:	4b35      	ldr	r3, [pc, #212]	; (80066c8 <scalbn+0xf0>)
 80065f2:	4629      	mov	r1, r5
 80065f4:	ee10 0a10 	vmov	r0, s0
 80065f8:	2200      	movs	r2, #0
 80065fa:	f7f9 ffc1 	bl	8000580 <__aeabi_dmul>
 80065fe:	4b33      	ldr	r3, [pc, #204]	; (80066cc <scalbn+0xf4>)
 8006600:	429e      	cmp	r6, r3
 8006602:	4604      	mov	r4, r0
 8006604:	460d      	mov	r5, r1
 8006606:	da10      	bge.n	800662a <scalbn+0x52>
 8006608:	a327      	add	r3, pc, #156	; (adr r3, 80066a8 <scalbn+0xd0>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	e01f      	b.n	8006650 <scalbn+0x78>
 8006610:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006614:	4291      	cmp	r1, r2
 8006616:	d10c      	bne.n	8006632 <scalbn+0x5a>
 8006618:	ee10 2a10 	vmov	r2, s0
 800661c:	4620      	mov	r0, r4
 800661e:	4629      	mov	r1, r5
 8006620:	f7f9 fdf8 	bl	8000214 <__adddf3>
 8006624:	4604      	mov	r4, r0
 8006626:	460d      	mov	r5, r1
 8006628:	e022      	b.n	8006670 <scalbn+0x98>
 800662a:	460b      	mov	r3, r1
 800662c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006630:	3936      	subs	r1, #54	; 0x36
 8006632:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006636:	4296      	cmp	r6, r2
 8006638:	dd0d      	ble.n	8006656 <scalbn+0x7e>
 800663a:	2d00      	cmp	r5, #0
 800663c:	a11c      	add	r1, pc, #112	; (adr r1, 80066b0 <scalbn+0xd8>)
 800663e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006642:	da02      	bge.n	800664a <scalbn+0x72>
 8006644:	a11c      	add	r1, pc, #112	; (adr r1, 80066b8 <scalbn+0xe0>)
 8006646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800664a:	a319      	add	r3, pc, #100	; (adr r3, 80066b0 <scalbn+0xd8>)
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f7f9 ff96 	bl	8000580 <__aeabi_dmul>
 8006654:	e7e6      	b.n	8006624 <scalbn+0x4c>
 8006656:	1872      	adds	r2, r6, r1
 8006658:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800665c:	428a      	cmp	r2, r1
 800665e:	dcec      	bgt.n	800663a <scalbn+0x62>
 8006660:	2a00      	cmp	r2, #0
 8006662:	dd08      	ble.n	8006676 <scalbn+0x9e>
 8006664:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006668:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800666c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006670:	ec45 4b10 	vmov	d0, r4, r5
 8006674:	bd70      	pop	{r4, r5, r6, pc}
 8006676:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800667a:	da08      	bge.n	800668e <scalbn+0xb6>
 800667c:	2d00      	cmp	r5, #0
 800667e:	a10a      	add	r1, pc, #40	; (adr r1, 80066a8 <scalbn+0xd0>)
 8006680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006684:	dac0      	bge.n	8006608 <scalbn+0x30>
 8006686:	a10e      	add	r1, pc, #56	; (adr r1, 80066c0 <scalbn+0xe8>)
 8006688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800668c:	e7bc      	b.n	8006608 <scalbn+0x30>
 800668e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006692:	3236      	adds	r2, #54	; 0x36
 8006694:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006698:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800669c:	4620      	mov	r0, r4
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <scalbn+0xf8>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	e7d5      	b.n	8006650 <scalbn+0x78>
 80066a4:	f3af 8000 	nop.w
 80066a8:	c2f8f359 	.word	0xc2f8f359
 80066ac:	01a56e1f 	.word	0x01a56e1f
 80066b0:	8800759c 	.word	0x8800759c
 80066b4:	7e37e43c 	.word	0x7e37e43c
 80066b8:	8800759c 	.word	0x8800759c
 80066bc:	fe37e43c 	.word	0xfe37e43c
 80066c0:	c2f8f359 	.word	0xc2f8f359
 80066c4:	81a56e1f 	.word	0x81a56e1f
 80066c8:	43500000 	.word	0x43500000
 80066cc:	ffff3cb0 	.word	0xffff3cb0
 80066d0:	3c900000 	.word	0x3c900000
 80066d4:	00000000 	.word	0x00000000

080066d8 <floor>:
 80066d8:	ec51 0b10 	vmov	r0, r1, d0
 80066dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80066e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80066e8:	2e13      	cmp	r6, #19
 80066ea:	ee10 5a10 	vmov	r5, s0
 80066ee:	ee10 8a10 	vmov	r8, s0
 80066f2:	460c      	mov	r4, r1
 80066f4:	dc31      	bgt.n	800675a <floor+0x82>
 80066f6:	2e00      	cmp	r6, #0
 80066f8:	da14      	bge.n	8006724 <floor+0x4c>
 80066fa:	a333      	add	r3, pc, #204	; (adr r3, 80067c8 <floor+0xf0>)
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	f7f9 fd88 	bl	8000214 <__adddf3>
 8006704:	2200      	movs	r2, #0
 8006706:	2300      	movs	r3, #0
 8006708:	f7fa f9ca 	bl	8000aa0 <__aeabi_dcmpgt>
 800670c:	b138      	cbz	r0, 800671e <floor+0x46>
 800670e:	2c00      	cmp	r4, #0
 8006710:	da53      	bge.n	80067ba <floor+0xe2>
 8006712:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006716:	4325      	orrs	r5, r4
 8006718:	d052      	beq.n	80067c0 <floor+0xe8>
 800671a:	4c2d      	ldr	r4, [pc, #180]	; (80067d0 <floor+0xf8>)
 800671c:	2500      	movs	r5, #0
 800671e:	4621      	mov	r1, r4
 8006720:	4628      	mov	r0, r5
 8006722:	e024      	b.n	800676e <floor+0x96>
 8006724:	4f2b      	ldr	r7, [pc, #172]	; (80067d4 <floor+0xfc>)
 8006726:	4137      	asrs	r7, r6
 8006728:	ea01 0307 	and.w	r3, r1, r7
 800672c:	4303      	orrs	r3, r0
 800672e:	d01e      	beq.n	800676e <floor+0x96>
 8006730:	a325      	add	r3, pc, #148	; (adr r3, 80067c8 <floor+0xf0>)
 8006732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006736:	f7f9 fd6d 	bl	8000214 <__adddf3>
 800673a:	2200      	movs	r2, #0
 800673c:	2300      	movs	r3, #0
 800673e:	f7fa f9af 	bl	8000aa0 <__aeabi_dcmpgt>
 8006742:	2800      	cmp	r0, #0
 8006744:	d0eb      	beq.n	800671e <floor+0x46>
 8006746:	2c00      	cmp	r4, #0
 8006748:	bfbe      	ittt	lt
 800674a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800674e:	4133      	asrlt	r3, r6
 8006750:	18e4      	addlt	r4, r4, r3
 8006752:	ea24 0407 	bic.w	r4, r4, r7
 8006756:	2500      	movs	r5, #0
 8006758:	e7e1      	b.n	800671e <floor+0x46>
 800675a:	2e33      	cmp	r6, #51	; 0x33
 800675c:	dd0b      	ble.n	8006776 <floor+0x9e>
 800675e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006762:	d104      	bne.n	800676e <floor+0x96>
 8006764:	ee10 2a10 	vmov	r2, s0
 8006768:	460b      	mov	r3, r1
 800676a:	f7f9 fd53 	bl	8000214 <__adddf3>
 800676e:	ec41 0b10 	vmov	d0, r0, r1
 8006772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006776:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800677a:	f04f 37ff 	mov.w	r7, #4294967295
 800677e:	40df      	lsrs	r7, r3
 8006780:	4238      	tst	r0, r7
 8006782:	d0f4      	beq.n	800676e <floor+0x96>
 8006784:	a310      	add	r3, pc, #64	; (adr r3, 80067c8 <floor+0xf0>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	f7f9 fd43 	bl	8000214 <__adddf3>
 800678e:	2200      	movs	r2, #0
 8006790:	2300      	movs	r3, #0
 8006792:	f7fa f985 	bl	8000aa0 <__aeabi_dcmpgt>
 8006796:	2800      	cmp	r0, #0
 8006798:	d0c1      	beq.n	800671e <floor+0x46>
 800679a:	2c00      	cmp	r4, #0
 800679c:	da0a      	bge.n	80067b4 <floor+0xdc>
 800679e:	2e14      	cmp	r6, #20
 80067a0:	d101      	bne.n	80067a6 <floor+0xce>
 80067a2:	3401      	adds	r4, #1
 80067a4:	e006      	b.n	80067b4 <floor+0xdc>
 80067a6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80067aa:	2301      	movs	r3, #1
 80067ac:	40b3      	lsls	r3, r6
 80067ae:	441d      	add	r5, r3
 80067b0:	45a8      	cmp	r8, r5
 80067b2:	d8f6      	bhi.n	80067a2 <floor+0xca>
 80067b4:	ea25 0507 	bic.w	r5, r5, r7
 80067b8:	e7b1      	b.n	800671e <floor+0x46>
 80067ba:	2500      	movs	r5, #0
 80067bc:	462c      	mov	r4, r5
 80067be:	e7ae      	b.n	800671e <floor+0x46>
 80067c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80067c4:	e7ab      	b.n	800671e <floor+0x46>
 80067c6:	bf00      	nop
 80067c8:	8800759c 	.word	0x8800759c
 80067cc:	7e37e43c 	.word	0x7e37e43c
 80067d0:	bff00000 	.word	0xbff00000
 80067d4:	000fffff 	.word	0x000fffff

080067d8 <_init>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr

080067e4 <_fini>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	bf00      	nop
 80067e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ea:	bc08      	pop	{r3}
 80067ec:	469e      	mov	lr, r3
 80067ee:	4770      	bx	lr
