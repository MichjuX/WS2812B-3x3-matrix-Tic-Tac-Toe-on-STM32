
WS2812B-3x3-matrix-Tic-Tac-Toe-on-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d48  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08006f10  08006f10  00016f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007230  08007230  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08007230  08007230  00017230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007238  08007238  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007238  08007238  00017238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800723c  0800723c  0001723c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08007240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe4  20000068  080072a8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000104c  080072a8  0002104c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dff7  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000212f  00000000  00000000  0002e0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00030208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aca  00000000  00000000  00030fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c99  00000000  00000000  00031a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b15  00000000  00000000  00054733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2e93  00000000  00000000  00065248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004438  00000000  00000000  001380dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0013c514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000068 	.word	0x20000068
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006ef8 	.word	0x08006ef8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000006c 	.word	0x2000006c
 8000204:	08006ef8 	.word	0x08006ef8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_uldivmod>:
 8000be4:	b953      	cbnz	r3, 8000bfc <__aeabi_uldivmod+0x18>
 8000be6:	b94a      	cbnz	r2, 8000bfc <__aeabi_uldivmod+0x18>
 8000be8:	2900      	cmp	r1, #0
 8000bea:	bf08      	it	eq
 8000bec:	2800      	cmpeq	r0, #0
 8000bee:	bf1c      	itt	ne
 8000bf0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf8:	f000 b970 	b.w	8000edc <__aeabi_idiv0>
 8000bfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c04:	f000 f806 	bl	8000c14 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9e08      	ldr	r6, [sp, #32]
 8000c1a:	460d      	mov	r5, r1
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	460f      	mov	r7, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14a      	bne.n	8000cba <__udivmoddi4+0xa6>
 8000c24:	428a      	cmp	r2, r1
 8000c26:	4694      	mov	ip, r2
 8000c28:	d965      	bls.n	8000cf6 <__udivmoddi4+0xe2>
 8000c2a:	fab2 f382 	clz	r3, r2
 8000c2e:	b143      	cbz	r3, 8000c42 <__udivmoddi4+0x2e>
 8000c30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c34:	f1c3 0220 	rsb	r2, r3, #32
 8000c38:	409f      	lsls	r7, r3
 8000c3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	409c      	lsls	r4, r3
 8000c42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c46:	fa1f f58c 	uxth.w	r5, ip
 8000c4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c4e:	0c22      	lsrs	r2, r4, #16
 8000c50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c58:	fb01 f005 	mul.w	r0, r1, r5
 8000c5c:	4290      	cmp	r0, r2
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x62>
 8000c60:	eb1c 0202 	adds.w	r2, ip, r2
 8000c64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c68:	f080 811c 	bcs.w	8000ea4 <__udivmoddi4+0x290>
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	f240 8119 	bls.w	8000ea4 <__udivmoddi4+0x290>
 8000c72:	3902      	subs	r1, #2
 8000c74:	4462      	add	r2, ip
 8000c76:	1a12      	subs	r2, r2, r0
 8000c78:	b2a4      	uxth	r4, r4
 8000c7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c86:	fb00 f505 	mul.w	r5, r0, r5
 8000c8a:	42a5      	cmp	r5, r4
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x90>
 8000c8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x294>
 8000c9a:	42a5      	cmp	r5, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x294>
 8000ca0:	4464      	add	r4, ip
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca8:	1b64      	subs	r4, r4, r5
 8000caa:	2100      	movs	r1, #0
 8000cac:	b11e      	cbz	r6, 8000cb6 <__udivmoddi4+0xa2>
 8000cae:	40dc      	lsrs	r4, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0xbc>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f000 80ed 	beq.w	8000e9e <__udivmoddi4+0x28a>
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	fab3 f183 	clz	r1, r3
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	d149      	bne.n	8000d6c <__udivmoddi4+0x158>
 8000cd8:	42ab      	cmp	r3, r5
 8000cda:	d302      	bcc.n	8000ce2 <__udivmoddi4+0xce>
 8000cdc:	4282      	cmp	r2, r0
 8000cde:	f200 80f8 	bhi.w	8000ed2 <__udivmoddi4+0x2be>
 8000ce2:	1a84      	subs	r4, r0, r2
 8000ce4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce8:	2001      	movs	r0, #1
 8000cea:	4617      	mov	r7, r2
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d0e2      	beq.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf4:	e7df      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf6:	b902      	cbnz	r2, 8000cfa <__udivmoddi4+0xe6>
 8000cf8:	deff      	udf	#255	; 0xff
 8000cfa:	fab2 f382 	clz	r3, r2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8090 	bne.w	8000e24 <__udivmoddi4+0x210>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2101      	movs	r1, #1
 8000d10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d14:	fb07 2015 	mls	r0, r7, r5, r2
 8000d18:	0c22      	lsrs	r2, r4, #16
 8000d1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d1e:	fb0e f005 	mul.w	r0, lr, r5
 8000d22:	4290      	cmp	r0, r2
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x124>
 8000d26:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x122>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2b8>
 8000d36:	4645      	mov	r5, r8
 8000d38:	1a12      	subs	r2, r2, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d40:	fb07 2210 	mls	r2, r7, r0, r2
 8000d44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x14e>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x14c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2c2>
 8000d60:	4610      	mov	r0, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6a:	e79f      	b.n	8000cac <__udivmoddi4+0x98>
 8000d6c:	f1c1 0720 	rsb	r7, r1, #32
 8000d70:	408b      	lsls	r3, r1
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d82:	40fd      	lsrs	r5, r7
 8000d84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d88:	4323      	orrs	r3, r4
 8000d8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	fb09 5518 	mls	r5, r9, r8, r5
 8000d96:	0c1c      	lsrs	r4, r3, #16
 8000d98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000da0:	42a5      	cmp	r5, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	fa00 f001 	lsl.w	r0, r0, r1
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b0>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2b4>
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2b4>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4464      	add	r4, ip
 8000dc4:	1b64      	subs	r4, r4, r5
 8000dc6:	b29d      	uxth	r5, r3
 8000dc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1da>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2ac>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2ac>
 8000dea:	3b02      	subs	r3, #2
 8000dec:	4464      	add	r4, ip
 8000dee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df2:	fba3 9502 	umull	r9, r5, r3, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	42ac      	cmp	r4, r5
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46ae      	mov	lr, r5
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x29c>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x298>
 8000e04:	b156      	cbz	r6, 8000e1c <__udivmoddi4+0x208>
 8000e06:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e12:	40ca      	lsrs	r2, r1
 8000e14:	40cc      	lsrs	r4, r1
 8000e16:	4317      	orrs	r7, r2
 8000e18:	e9c6 7400 	strd	r7, r4, [r6]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e24:	f1c3 0120 	rsb	r1, r3, #32
 8000e28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e30:	fa25 f101 	lsr.w	r1, r5, r1
 8000e34:	409d      	lsls	r5, r3
 8000e36:	432a      	orrs	r2, r5
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e44:	fb07 1510 	mls	r5, r7, r0, r1
 8000e48:	0c11      	lsrs	r1, r2, #16
 8000e4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e52:	428d      	cmp	r5, r1
 8000e54:	fa04 f403 	lsl.w	r4, r4, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x258>
 8000e5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e64:	428d      	cmp	r5, r1
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	1b49      	subs	r1, r1, r5
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e74:	fb07 1115 	mls	r1, r7, r5, r1
 8000e78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e80:	4291      	cmp	r1, r2
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x282>
 8000e84:	eb1c 0202 	adds.w	r2, ip, r2
 8000e88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2a8>
 8000e8e:	4291      	cmp	r1, r2
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2a8>
 8000e92:	3d02      	subs	r5, #2
 8000e94:	4462      	add	r2, ip
 8000e96:	1a52      	subs	r2, r2, r1
 8000e98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0xfc>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000ea4:	4639      	mov	r1, r7
 8000ea6:	e6e6      	b.n	8000c76 <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x90>
 8000eac:	4548      	cmp	r0, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f0>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f0>
 8000ebc:	4645      	mov	r5, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x282>
 8000ec0:	462b      	mov	r3, r5
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1da>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x258>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b0>
 8000ecc:	3d02      	subs	r5, #2
 8000ece:	4462      	add	r2, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x124>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e70a      	b.n	8000cec <__udivmoddi4+0xd8>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x14e>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b0a      	cmp	r3, #10
 8000eec:	d109      	bne.n	8000f02 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 8000eee:	230d      	movs	r3, #13
 8000ef0:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000ef2:	f107 010f 	add.w	r1, r7, #15
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	2201      	movs	r2, #1
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <__io_putchar+0x3c>)
 8000efe:	f003 fe96 	bl	8004c2e <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f02:	1d39      	adds	r1, r7, #4
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4804      	ldr	r0, [pc, #16]	; (8000f1c <__io_putchar+0x3c>)
 8000f0c:	f003 fe8f 	bl	8004c2e <HAL_UART_Transmit>
    return 1;
 8000f10:	2301      	movs	r3, #1
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000012c 	.word	0x2000012c

08000f20 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4]; // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000f2c:	f003 f874 	bl	8004018 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000084 	.word	0x20000084
 8000f44:	20000350 	.word	0x20000350

08000f48 <Set_LED>:


void Set_LED (int LEDnum, int Red, int Green, int Blue){
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	b2d9      	uxtb	r1, r3
 8000f5a:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <Set_LED+0x58>)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	b2d9      	uxtb	r1, r3
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <Set_LED+0x58>)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	460a      	mov	r2, r1
 8000f70:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	b2d9      	uxtb	r1, r3
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <Set_LED+0x58>)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	460a      	mov	r2, r1
 8000f80:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2d9      	uxtb	r1, r3
 8000f86:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <Set_LED+0x58>)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	460a      	mov	r2, r1
 8000f90:	70da      	strb	r2, [r3, #3]
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000170 	.word	0x20000170
 8000fa4:	00000000 	.word	0x00000000

08000fa8 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness){ // 0-45
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness =45;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b2d      	cmp	r3, #45	; 0x2d
 8000fb4:	dd01      	ble.n	8000fba <Set_Brightness+0x12>
 8000fb6:	232d      	movs	r3, #45	; 0x2d
 8000fb8:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++){
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e060      	b.n	8001082 <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 8000fc0:	4a37      	ldr	r2, [pc, #220]	; (80010a0 <Set_Brightness+0xf8>)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000fc8:	4a36      	ldr	r2, [pc, #216]	; (80010a4 <Set_Brightness+0xfc>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++){
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	e04f      	b.n	8001076 <Set_Brightness+0xce>
			float angle = 90-brightness;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000fdc:	ee07 3a90 	vmov	s15, r3
 8000fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe4:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f7ff fa71 	bl	80004d0 <__aeabi_f2d>
 8000fee:	a32a      	add	r3, pc, #168	; (adr r3, 8001098 <Set_Brightness+0xf0>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff fac4 	bl	8000580 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <Set_Brightness+0x100>)
 8001006:	f7ff fbe5 	bl	80007d4 <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fd97 	bl	8000b44 <__aeabi_d2f>
 8001016:	4603      	mov	r3, r0
 8001018:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 800101a:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <Set_Brightness+0xf8>)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	441a      	add	r2, r3
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fa3f 	bl	80004ac <__aeabi_i2d>
 800102e:	4604      	mov	r4, r0
 8001030:	460d      	mov	r5, r1
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff fa4c 	bl	80004d0 <__aeabi_f2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b10 	vmov	d0, r2, r3
 8001040:	f004 feba 	bl	8005db8 <tan>
 8001044:	ec53 2b10 	vmov	r2, r3, d0
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff fbc2 	bl	80007d4 <__aeabi_ddiv>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd54 	bl	8000b04 <__aeabi_d2uiz>
 800105c:	4603      	mov	r3, r0
 800105e:	b2d9      	uxtb	r1, r3
 8001060:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <Set_Brightness+0xfc>)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	441a      	add	r2, r3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4413      	add	r3, r2
 800106c:	460a      	mov	r2, r1
 800106e:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++){
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	3301      	adds	r3, #1
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	2b03      	cmp	r3, #3
 800107a:	ddac      	ble.n	8000fd6 <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++){
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2b3b      	cmp	r3, #59	; 0x3b
 8001086:	dd9b      	ble.n	8000fc0 <Set_Brightness+0x18>
		}
	}
#endif
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bdb0      	pop	{r4, r5, r7, pc}
 8001092:	bf00      	nop
 8001094:	f3af 8000 	nop.w
 8001098:	53c8d4f1 	.word	0x53c8d4f1
 800109c:	400921fb 	.word	0x400921fb
 80010a0:	20000170 	.word	0x20000170
 80010a4:	20000260 	.word	0x20000260
 80010a8:	40668000 	.word	0x40668000

080010ac <WS2812_Send>:


uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
	Set_Brightness(5);
 80010b2:	2005      	movs	r0, #5
 80010b4:	f7ff ff78 	bl	8000fa8 <Set_Brightness>
	uint32_t indx=0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	e036      	b.n	8001130 <WS2812_Send+0x84>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 80010c2:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <WS2812_Send+0xd4>)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	041a      	lsls	r2, r3, #16
 80010ce:	492c      	ldr	r1, [pc, #176]	; (8001180 <WS2812_Send+0xd4>)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	789b      	ldrb	r3, [r3, #2]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	431a      	orrs	r2, r3
 80010dc:	4928      	ldr	r1, [pc, #160]	; (8001180 <WS2812_Send+0xd4>)
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	78db      	ldrb	r3, [r3, #3]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80010ea:	2317      	movs	r3, #23
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e019      	b.n	8001124 <WS2812_Send+0x78>
		{
			if (color&(1<<i))
 80010f0:	2201      	movs	r2, #1
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <WS2812_Send+0x62>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8001102:	4a20      	ldr	r2, [pc, #128]	; (8001184 <WS2812_Send+0xd8>)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	213c      	movs	r1, #60	; 0x3c
 8001108:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800110c:	e004      	b.n	8001118 <WS2812_Send+0x6c>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 800110e:	4a1d      	ldr	r2, [pc, #116]	; (8001184 <WS2812_Send+0xd8>)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	211e      	movs	r1, #30
 8001114:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3301      	adds	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3b01      	subs	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	dae2      	bge.n	80010f0 <WS2812_Send+0x44>
	for (int i= 0; i<MAX_LED; i++)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	3301      	adds	r3, #1
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2b3b      	cmp	r3, #59	; 0x3b
 8001134:	ddc5      	ble.n	80010c2 <WS2812_Send+0x16>
		}

	}

	for (int i=0; i<50; i++)
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	e00a      	b.n	8001152 <WS2812_Send+0xa6>
	{
		pwmData[indx] = 0;
 800113c:	4a11      	ldr	r2, [pc, #68]	; (8001184 <WS2812_Send+0xd8>)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2100      	movs	r1, #0
 8001142:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3301      	adds	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b31      	cmp	r3, #49	; 0x31
 8001156:	ddf1      	ble.n	800113c <WS2812_Send+0x90>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4a09      	ldr	r2, [pc, #36]	; (8001184 <WS2812_Send+0xd8>)
 800115e:	2100      	movs	r1, #0
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <WS2812_Send+0xdc>)
 8001162:	f002 fd91 	bl	8003c88 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8001166:	bf00      	nop
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <WS2812_Send+0xe0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0fb      	beq.n	8001168 <WS2812_Send+0xbc>
	datasentflag = 0;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <WS2812_Send+0xe0>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000260 	.word	0x20000260
 8001184:	20000354 	.word	0x20000354
 8001188:	20000084 	.word	0x20000084
 800118c:	20000350 	.word	0x20000350

08001190 <displayBoard>:
//        }

    // Wysłanie danych do diod LED
    WS2812_Send();
}
void displayBoard(int board[3][3], int LEDS[]) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e054      	b.n	800124a <displayBoard+0xba>
        for (int j = 0; j < 3; j++) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	e04b      	b.n	800123e <displayBoard+0xae>
            if (board[i][j] == 1) {
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d10f      	bne.n	80011e0 <displayBoard+0x50>
                Set_LED(LEDS[i * 3 + j], 15, 0, 0); // Red for 'X'
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	441a      	add	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	2300      	movs	r3, #0
 80011d6:	2200      	movs	r2, #0
 80011d8:	210f      	movs	r1, #15
 80011da:	f7ff feb5 	bl	8000f48 <Set_LED>
 80011de:	e02b      	b.n	8001238 <displayBoard+0xa8>
            } else if (board[i][j] == 2) {
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d10f      	bne.n	800121a <displayBoard+0x8a>
                Set_LED(LEDS[i * 3 + j], 0, 15, 0); // Green for 'O'
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	441a      	add	r2, r3
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	4413      	add	r3, r2
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	220f      	movs	r2, #15
 8001212:	2100      	movs	r1, #0
 8001214:	f7ff fe98 	bl	8000f48 <Set_LED>
 8001218:	e00e      	b.n	8001238 <displayBoard+0xa8>
            } else {
                Set_LED(LEDS[i * 3 + j], 0, 0, 0); // Off for empty
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	441a      	add	r2, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	4413      	add	r3, r2
 800122c:	6818      	ldr	r0, [r3, #0]
 800122e:	2300      	movs	r3, #0
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	f7ff fe88 	bl	8000f48 <Set_LED>
        for (int j = 0; j < 3; j++) {
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	3301      	adds	r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	2b02      	cmp	r3, #2
 8001242:	ddb0      	ble.n	80011a6 <displayBoard+0x16>
    for (int i = 0; i < 3; i++) {
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3301      	adds	r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b02      	cmp	r3, #2
 800124e:	dda7      	ble.n	80011a0 <displayBoard+0x10>
            }
        }
    }
    WS2812_Send();
 8001250:	f7ff ff2c 	bl	80010ac <WS2812_Send>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <handleMovement>:


/// od gpt
void handleMovement(char direction, int *currentLED, int LEDS[], int board[]) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
    // Update the current LED based on direction without changing the board
	Set_LED(LEDS[*currentLED], 0, 0, 0);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	2300      	movs	r3, #0
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	f7ff fe63 	bl	8000f48 <Set_LED>
	displayBoard(board, LEDS);
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	6838      	ldr	r0, [r7, #0]
 8001286:	f7ff ff83 	bl	8001190 <displayBoard>
    switch (direction) {
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	3b61      	subs	r3, #97	; 0x61
 800128e:	2b16      	cmp	r3, #22
 8001290:	d871      	bhi.n	8001376 <handleMovement+0x11a>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <handleMovement+0x3c>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	08001315 	.word	0x08001315
 800129c:	08001377 	.word	0x08001377
 80012a0:	08001377 	.word	0x08001377
 80012a4:	08001357 	.word	0x08001357
 80012a8:	08001377 	.word	0x08001377
 80012ac:	08001377 	.word	0x08001377
 80012b0:	08001377 	.word	0x08001377
 80012b4:	08001377 	.word	0x08001377
 80012b8:	08001377 	.word	0x08001377
 80012bc:	08001377 	.word	0x08001377
 80012c0:	08001377 	.word	0x08001377
 80012c4:	08001377 	.word	0x08001377
 80012c8:	08001377 	.word	0x08001377
 80012cc:	08001377 	.word	0x08001377
 80012d0:	08001377 	.word	0x08001377
 80012d4:	08001377 	.word	0x08001377
 80012d8:	08001377 	.word	0x08001377
 80012dc:	08001377 	.word	0x08001377
 80012e0:	08001337 	.word	0x08001337
 80012e4:	08001377 	.word	0x08001377
 80012e8:	08001377 	.word	0x08001377
 80012ec:	08001377 	.word	0x08001377
 80012f0:	080012f5 	.word	0x080012f5
        case 'w':
            *currentLED = (*currentLED - 3 + 9) % 9;  // Move up
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	1d99      	adds	r1, r3, #6
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <handleMovement+0x140>)
 80012fc:	fb83 2301 	smull	r2, r3, r3, r1
 8001300:	105a      	asrs	r2, r3, #1
 8001302:	17cb      	asrs	r3, r1, #31
 8001304:	1ad2      	subs	r2, r2, r3
 8001306:	4613      	mov	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4413      	add	r3, r2
 800130c:	1aca      	subs	r2, r1, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	601a      	str	r2, [r3, #0]
            break;
 8001312:	e031      	b.n	8001378 <handleMovement+0x11c>
        case 'a':
            *currentLED = (*currentLED - 1 + 9) % 9;  // Move left
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f103 0108 	add.w	r1, r3, #8
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <handleMovement+0x140>)
 800131e:	fb83 2301 	smull	r2, r3, r3, r1
 8001322:	105a      	asrs	r2, r3, #1
 8001324:	17cb      	asrs	r3, r1, #31
 8001326:	1ad2      	subs	r2, r2, r3
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4413      	add	r3, r2
 800132e:	1aca      	subs	r2, r1, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	601a      	str	r2, [r3, #0]
            break;
 8001334:	e020      	b.n	8001378 <handleMovement+0x11c>
        case 's':
            *currentLED = (*currentLED + 3) % 9;  // Move down
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1cd9      	adds	r1, r3, #3
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <handleMovement+0x140>)
 800133e:	fb83 2301 	smull	r2, r3, r3, r1
 8001342:	105a      	asrs	r2, r3, #1
 8001344:	17cb      	asrs	r3, r1, #31
 8001346:	1ad2      	subs	r2, r2, r3
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4413      	add	r3, r2
 800134e:	1aca      	subs	r2, r1, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	601a      	str	r2, [r3, #0]
            break;
 8001354:	e010      	b.n	8001378 <handleMovement+0x11c>
        case 'd':
            *currentLED = (*currentLED + 1) % 9;  // Move right
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	1c59      	adds	r1, r3, #1
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <handleMovement+0x140>)
 800135e:	fb83 2301 	smull	r2, r3, r3, r1
 8001362:	105a      	asrs	r2, r3, #1
 8001364:	17cb      	asrs	r3, r1, #31
 8001366:	1ad2      	subs	r2, r2, r3
 8001368:	4613      	mov	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	1aca      	subs	r2, r1, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	601a      	str	r2, [r3, #0]
            break;
 8001374:	e000      	b.n	8001378 <handleMovement+0x11c>
        default:
            break; // Unknown direction, no change
 8001376:	bf00      	nop
    }
    Set_LED(LEDS[*currentLED], 0, 0, 15);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	230f      	movs	r3, #15
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	f7ff fddd 	bl	8000f48 <Set_LED>
    WS2812_Send();
 800138e:	f7ff fe8d 	bl	80010ac <WS2812_Send>
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	38e38e39 	.word	0x38e38e39

080013a0 <handleSelection>:
bool handleSelection(int *currentLED, int player, int board[3][3], int LEDS[]) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]
    int row = *currentLED / 3;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <handleSelection+0x80>)
 80013b4:	fb82 1203 	smull	r1, r2, r2, r3
 80013b8:	17db      	asrs	r3, r3, #31
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    int col = *currentLED % 3;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <handleSelection+0x80>)
 80013c4:	fb83 3102 	smull	r3, r1, r3, r2
 80013c8:	17d3      	asrs	r3, r2, #31
 80013ca:	1ac9      	subs	r1, r1, r3
 80013cc:	460b      	mov	r3, r1
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	440b      	add	r3, r1
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	613b      	str	r3, [r7, #16]

    // Place the player's symbol if the cell is empty
    if (board[row][col] == 0) {
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	461a      	mov	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d111      	bne.n	8001414 <handleSelection+0x74>
        board[row][col] = player;
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68b9      	ldr	r1, [r7, #8]
 8001404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        displayBoard(board, LEDS);
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fec0 	bl	8001190 <displayBoard>
        return true;// Update the LED display
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <handleSelection+0x76>
    }
    else return false;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	55555556 	.word	0x55555556

08001424 <win>:

int win(int board[3][3] ){
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    if((board[0][0]!=0)&&(board[0][0]==board[0][1])&&(board[0][1]==board[0][2])) return 0;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00d      	beq.n	8001450 <win+0x2c>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d107      	bne.n	8001450 <win+0x2c>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	429a      	cmp	r2, r3
 800144a:	d101      	bne.n	8001450 <win+0x2c>
 800144c:	2300      	movs	r3, #0
 800144e:	e098      	b.n	8001582 <win+0x15e>
    if((board[1][0]!=0)&&(board[1][0]==board[1][1])&&(board[1][1]==board[1][2])) return 1;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	330c      	adds	r3, #12
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d011      	beq.n	800147e <win+0x5a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	330c      	adds	r3, #12
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	330c      	adds	r3, #12
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	429a      	cmp	r2, r3
 8001468:	d109      	bne.n	800147e <win+0x5a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	330c      	adds	r3, #12
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	330c      	adds	r3, #12
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	429a      	cmp	r2, r3
 8001478:	d101      	bne.n	800147e <win+0x5a>
 800147a:	2301      	movs	r3, #1
 800147c:	e081      	b.n	8001582 <win+0x15e>
    if((board[2][0]!=0)&&(board[2][0]==board[2][1])&&(board[2][1]==board[2][2])) return 2;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3318      	adds	r3, #24
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d011      	beq.n	80014ac <win+0x88>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3318      	adds	r3, #24
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3318      	adds	r3, #24
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	d109      	bne.n	80014ac <win+0x88>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3318      	adds	r3, #24
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3318      	adds	r3, #24
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d101      	bne.n	80014ac <win+0x88>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e06a      	b.n	8001582 <win+0x15e>
    if((board[0][0]!=0)&&(board[0][0]==board[1][0])&&(board[1][0]==board[2][0])) return 3;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d010      	beq.n	80014d6 <win+0xb2>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	330c      	adds	r3, #12
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d109      	bne.n	80014d6 <win+0xb2>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	330c      	adds	r3, #12
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3318      	adds	r3, #24
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d101      	bne.n	80014d6 <win+0xb2>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e055      	b.n	8001582 <win+0x15e>
    if((board[0][1]!=0)&&(board[0][1]==board[1][1])&&(board[1][1]==board[2][1])) return 4;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d010      	beq.n	8001500 <win+0xdc>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	330c      	adds	r3, #12
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d109      	bne.n	8001500 <win+0xdc>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	330c      	adds	r3, #12
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3318      	adds	r3, #24
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d101      	bne.n	8001500 <win+0xdc>
 80014fc:	2304      	movs	r3, #4
 80014fe:	e040      	b.n	8001582 <win+0x15e>
    if((board[0][2]!=0)&&(board[0][2]==board[1][2])&&(board[1][2]==board[2][2])) return 5;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d010      	beq.n	800152a <win+0x106>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	330c      	adds	r3, #12
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	429a      	cmp	r2, r3
 8001514:	d109      	bne.n	800152a <win+0x106>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	330c      	adds	r3, #12
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3318      	adds	r3, #24
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	429a      	cmp	r2, r3
 8001524:	d101      	bne.n	800152a <win+0x106>
 8001526:	2305      	movs	r3, #5
 8001528:	e02b      	b.n	8001582 <win+0x15e>
    if((board[0][0]!=0)&&(board[0][0]==board[1][1])&&(board[1][1]==board[2][2])) return 6;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d010      	beq.n	8001554 <win+0x130>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	330c      	adds	r3, #12
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d109      	bne.n	8001554 <win+0x130>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	330c      	adds	r3, #12
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3318      	adds	r3, #24
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	429a      	cmp	r2, r3
 800154e:	d101      	bne.n	8001554 <win+0x130>
 8001550:	2306      	movs	r3, #6
 8001552:	e016      	b.n	8001582 <win+0x15e>
    if((board[0][2]!=0)&&(board[0][2]==board[1][1])&&(board[1][1]==board[2][0])) return 7;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d010      	beq.n	800157e <win+0x15a>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	330c      	adds	r3, #12
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	d109      	bne.n	800157e <win+0x15a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	330c      	adds	r3, #12
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3318      	adds	r3, #24
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d101      	bne.n	800157e <win+0x15a>
 800157a:	2307      	movs	r3, #7
 800157c:	e001      	b.n	8001582 <win+0x15e>
    return -1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <blink>:

void blink(int line, int player, int LEDS[], bool light) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	70fb      	strb	r3, [r7, #3]
    int green = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
    int red = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]

    if (light) {
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d007      	beq.n	80015bc <blink+0x2c>
        if (player == 1) {
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d102      	bne.n	80015b8 <blink+0x28>
            green = 15;
 80015b2:	230f      	movs	r3, #15
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e001      	b.n	80015bc <blink+0x2c>
        } else {
            red = 15;
 80015b8:	230f      	movs	r3, #15
 80015ba:	613b      	str	r3, [r7, #16]
        }
    }

    switch (line) {
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b07      	cmp	r3, #7
 80015c0:	f200 80d9 	bhi.w	8001776 <blink+0x1e6>
 80015c4:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <blink+0x3c>)
 80015c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ca:	bf00      	nop
 80015cc:	080015ed 	.word	0x080015ed
 80015d0:	0800161d 	.word	0x0800161d
 80015d4:	0800164f 	.word	0x0800164f
 80015d8:	08001681 	.word	0x08001681
 80015dc:	080016b1 	.word	0x080016b1
 80015e0:	080016e3 	.word	0x080016e3
 80015e4:	08001715 	.word	0x08001715
 80015e8:	08001745 	.word	0x08001745
        case 0:
            Set_LED(LEDS[0], red, green, 0);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	6939      	ldr	r1, [r7, #16]
 80015f6:	f7ff fca7 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[1], red, green, 0);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3304      	adds	r3, #4
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	6939      	ldr	r1, [r7, #16]
 8001606:	f7ff fc9f 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[2], red, green, 0);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3308      	adds	r3, #8
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	2300      	movs	r3, #0
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	6939      	ldr	r1, [r7, #16]
 8001616:	f7ff fc97 	bl	8000f48 <Set_LED>
            break;
 800161a:	e0ad      	b.n	8001778 <blink+0x1e8>
        case 1:
            Set_LED(LEDS[3], red, green, 0);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	330c      	adds	r3, #12
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	2300      	movs	r3, #0
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	6939      	ldr	r1, [r7, #16]
 8001628:	f7ff fc8e 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[4], red, green, 0);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3310      	adds	r3, #16
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	2300      	movs	r3, #0
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	6939      	ldr	r1, [r7, #16]
 8001638:	f7ff fc86 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[5], red, green, 0);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3314      	adds	r3, #20
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	2300      	movs	r3, #0
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	6939      	ldr	r1, [r7, #16]
 8001648:	f7ff fc7e 	bl	8000f48 <Set_LED>
            break;
 800164c:	e094      	b.n	8001778 <blink+0x1e8>
        case 2:
            Set_LED(LEDS[6], red, green, 0);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3318      	adds	r3, #24
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	2300      	movs	r3, #0
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	6939      	ldr	r1, [r7, #16]
 800165a:	f7ff fc75 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[7], red, green, 0);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	331c      	adds	r3, #28
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	6939      	ldr	r1, [r7, #16]
 800166a:	f7ff fc6d 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[8], red, green, 0);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3320      	adds	r3, #32
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	2300      	movs	r3, #0
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	6939      	ldr	r1, [r7, #16]
 800167a:	f7ff fc65 	bl	8000f48 <Set_LED>
            break;
 800167e:	e07b      	b.n	8001778 <blink+0x1e8>
        case 3:
            Set_LED(LEDS[0], red, green, 0);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	2300      	movs	r3, #0
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	6939      	ldr	r1, [r7, #16]
 800168a:	f7ff fc5d 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[3], red, green, 0);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	330c      	adds	r3, #12
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	2300      	movs	r3, #0
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	6939      	ldr	r1, [r7, #16]
 800169a:	f7ff fc55 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[6], red, green, 0);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3318      	adds	r3, #24
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	2300      	movs	r3, #0
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	6939      	ldr	r1, [r7, #16]
 80016aa:	f7ff fc4d 	bl	8000f48 <Set_LED>
            break;
 80016ae:	e063      	b.n	8001778 <blink+0x1e8>
        case 4:
            Set_LED(LEDS[1], red, green, 0);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3304      	adds	r3, #4
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	2300      	movs	r3, #0
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	6939      	ldr	r1, [r7, #16]
 80016bc:	f7ff fc44 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[4], red, green, 0);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3310      	adds	r3, #16
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	2300      	movs	r3, #0
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	6939      	ldr	r1, [r7, #16]
 80016cc:	f7ff fc3c 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[7], red, green, 0);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	331c      	adds	r3, #28
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	6939      	ldr	r1, [r7, #16]
 80016dc:	f7ff fc34 	bl	8000f48 <Set_LED>
            break;
 80016e0:	e04a      	b.n	8001778 <blink+0x1e8>
        case 5:
            Set_LED(LEDS[2], red, green, 0);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3308      	adds	r3, #8
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	2300      	movs	r3, #0
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	6939      	ldr	r1, [r7, #16]
 80016ee:	f7ff fc2b 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[5], red, green, 0);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3314      	adds	r3, #20
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	2300      	movs	r3, #0
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	6939      	ldr	r1, [r7, #16]
 80016fe:	f7ff fc23 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[8], red, green, 0);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3320      	adds	r3, #32
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	2300      	movs	r3, #0
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	6939      	ldr	r1, [r7, #16]
 800170e:	f7ff fc1b 	bl	8000f48 <Set_LED>
            break;
 8001712:	e031      	b.n	8001778 <blink+0x1e8>
        case 6:
            Set_LED(LEDS[0], red, green, 0);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	f7ff fc13 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[4], red, green, 0);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3310      	adds	r3, #16
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	2300      	movs	r3, #0
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	6939      	ldr	r1, [r7, #16]
 800172e:	f7ff fc0b 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[8], red, green, 0);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3320      	adds	r3, #32
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	2300      	movs	r3, #0
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	f7ff fc03 	bl	8000f48 <Set_LED>
            break;
 8001742:	e019      	b.n	8001778 <blink+0x1e8>
        case 7:
            Set_LED(LEDS[2], red, green, 0);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3308      	adds	r3, #8
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	2300      	movs	r3, #0
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	6939      	ldr	r1, [r7, #16]
 8001750:	f7ff fbfa 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[4], red, green, 0);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3310      	adds	r3, #16
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	6939      	ldr	r1, [r7, #16]
 8001760:	f7ff fbf2 	bl	8000f48 <Set_LED>
            Set_LED(LEDS[6], red, green, 0);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3318      	adds	r3, #24
 8001768:	6818      	ldr	r0, [r3, #0]
 800176a:	2300      	movs	r3, #0
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	6939      	ldr	r1, [r7, #16]
 8001770:	f7ff fbea 	bl	8000f48 <Set_LED>
            break;
 8001774:	e000      	b.n	8001778 <blink+0x1e8>
        default:
            // Handle an invalid line value if needed
            break;
 8001776:	bf00      	nop
    }

    WS2812_Send();
 8001778:	f7ff fc98 	bl	80010ac <WS2812_Send>
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001784:	b5b0      	push	{r4, r5, r7, lr}
 8001786:	b0a0      	sub	sp, #128	; 0x80
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800178a:	f000 fd77 	bl	800227c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178e:	f000 f9fd 	bl	8001b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001792:	f000 fb33 	bl	8001dfc <MX_GPIO_Init>
  MX_DMA_Init();
 8001796:	f000 fb11 	bl	8001dbc <MX_DMA_Init>
  MX_TIM1_Init();
 800179a:	f000 fa63 	bl	8001c64 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800179e:	f000 fae3 	bl	8001d68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

//  Set_LED(numer, R, G, B); // numer leda, kolor RGB
//  Set_Brightness(45);
//  WS2812_Send();
  int currentPlayer = 1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	67fb      	str	r3, [r7, #124]	; 0x7c

  int board[3][3] = {
 80017a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017aa:	2224      	movs	r2, #36	; 0x24
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 f84a 	bl	8005848 <memset>
	  {0,0,0},
	  {0,0,0},
	  {0,0,0}
  };
  int LEDS[] = {0, 1, 2, 5, 4, 3, 6, 7, 8, 9}; // przeadresowanie ledów w związku z ich spiralnym ułożeniem
 80017b4:	4ba9      	ldr	r3, [pc, #676]	; (8001a5c <main+0x2d8>)
 80017b6:	f107 0408 	add.w	r4, r7, #8
 80017ba:	461d      	mov	r5, r3
 80017bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017c8:	e884 0003 	stmia.w	r4, {r0, r1}
  displayBoard(board, LEDS);
 80017cc:	f107 0208 	add.w	r2, r7, #8
 80017d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fcda 	bl	8001190 <displayBoard>


  WS2812_Send();
 80017dc:	f7ff fc66 	bl	80010ac <WS2812_Send>

  printf("Gra kółko i krzyżyk. \nSterowanie:\n");
 80017e0:	489f      	ldr	r0, [pc, #636]	; (8001a60 <main+0x2dc>)
 80017e2:	f003 ff51 	bl	8005688 <puts>
  printf("W - ruch do góry\n");
 80017e6:	489f      	ldr	r0, [pc, #636]	; (8001a64 <main+0x2e0>)
 80017e8:	f003 ff4e 	bl	8005688 <puts>
  printf("A - ruch w lewo\n");
 80017ec:	489e      	ldr	r0, [pc, #632]	; (8001a68 <main+0x2e4>)
 80017ee:	f003 ff4b 	bl	8005688 <puts>
  printf("S - ruch w dół\n");
 80017f2:	489e      	ldr	r0, [pc, #632]	; (8001a6c <main+0x2e8>)
 80017f4:	f003 ff48 	bl	8005688 <puts>
  printf("D - ruch w prawo\n");
 80017f8:	489d      	ldr	r0, [pc, #628]	; (8001a70 <main+0x2ec>)
 80017fa:	f003 ff45 	bl	8005688 <puts>
  printf("F - zatwierdzenie ruchu\n");
 80017fe:	489d      	ldr	r0, [pc, #628]	; (8001a74 <main+0x2f0>)
 8001800:	f003 ff42 	bl	8005688 <puts>
  printf("R - zresetowanie gry\n");
 8001804:	489c      	ldr	r0, [pc, #624]	; (8001a78 <main+0x2f4>)
 8001806:	f003 ff3f 	bl	8005688 <puts>
  printf("LED na dole pokazuje czyj jest ruch.\n");
 800180a:	489c      	ldr	r0, [pc, #624]	; (8001a7c <main+0x2f8>)
 800180c:	f003 ff3c 	bl	8005688 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int currentLED = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
  int counter=0;
 8001814:	2300      	movs	r3, #0
 8001816:	67bb      	str	r3, [r7, #120]	; 0x78
  int gameWon=-1;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	677b      	str	r3, [r7, #116]	; 0x74
  bool movePossible = true;
 800181e:	2301      	movs	r3, #1
 8001820:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  while (1) {

	  uint8_t value;
      HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, &value, 1, 0);
 8001824:	1cf9      	adds	r1, r7, #3
 8001826:	2300      	movs	r3, #0
 8001828:	2201      	movs	r2, #1
 800182a:	4895      	ldr	r0, [pc, #596]	; (8001a80 <main+0x2fc>)
 800182c:	f003 fa91 	bl	8004d52 <HAL_UART_Receive>
 8001830:	4603      	mov	r3, r0
 8001832:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
      if(status == HAL_OK){
 8001836:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800183a:	2b00      	cmp	r3, #0
 800183c:	f040 815d 	bne.w	8001afa <main+0x376>
    	  gameWon = -1;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	677b      	str	r3, [r7, #116]	; 0x74
          for (int i = 0; i < 3; i++) {
 8001846:	2300      	movs	r3, #0
 8001848:	673b      	str	r3, [r7, #112]	; 0x70
 800184a:	e017      	b.n	800187c <main+0xf8>
              for (int j = 0; j < 3; j++) {
 800184c:	2300      	movs	r3, #0
 800184e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001850:	e00e      	b.n	8001870 <main+0xec>
                  board[i][j] = 0;
 8001852:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	3380      	adds	r3, #128	; 0x80
 8001862:	443b      	add	r3, r7
 8001864:	2200      	movs	r2, #0
 8001866:	f843 2c50 	str.w	r2, [r3, #-80]
              for (int j = 0; j < 3; j++) {
 800186a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800186c:	3301      	adds	r3, #1
 800186e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001872:	2b02      	cmp	r3, #2
 8001874:	dded      	ble.n	8001852 <main+0xce>
          for (int i = 0; i < 3; i++) {
 8001876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001878:	3301      	adds	r3, #1
 800187a:	673b      	str	r3, [r7, #112]	; 0x70
 800187c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800187e:	2b02      	cmp	r3, #2
 8001880:	dde4      	ble.n	800184c <main+0xc8>
              }
          }
      }
      while (gameWon<0) {
 8001882:	e13a      	b.n	8001afa <main+0x376>
          if (currentPlayer == 1) {
 8001884:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001886:	2b01      	cmp	r3, #1
 8001888:	d105      	bne.n	8001896 <main+0x112>
              Set_LED(9, 15, 0, 0);
 800188a:	2300      	movs	r3, #0
 800188c:	2200      	movs	r2, #0
 800188e:	210f      	movs	r1, #15
 8001890:	2009      	movs	r0, #9
 8001892:	f7ff fb59 	bl	8000f48 <Set_LED>
          }

          if (currentPlayer == 2) {
 8001896:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001898:	2b02      	cmp	r3, #2
 800189a:	d105      	bne.n	80018a8 <main+0x124>
              Set_LED(9, 0, 15, 0);
 800189c:	2300      	movs	r3, #0
 800189e:	220f      	movs	r2, #15
 80018a0:	2100      	movs	r1, #0
 80018a2:	2009      	movs	r0, #9
 80018a4:	f7ff fb50 	bl	8000f48 <Set_LED>
          }
          HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, &value, 1, 0);
 80018a8:	1cf9      	adds	r1, r7, #3
 80018aa:	2300      	movs	r3, #0
 80018ac:	2201      	movs	r2, #1
 80018ae:	4874      	ldr	r0, [pc, #464]	; (8001a80 <main+0x2fc>)
 80018b0:	f003 fa4f 	bl	8004d52 <HAL_UART_Receive>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
          if (status == HAL_OK) {
 80018ba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 80c4 	bne.w	8001a4c <main+0x2c8>
              switch (value) {
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	2b46      	cmp	r3, #70	; 0x46
 80018c8:	d031      	beq.n	800192e <main+0x1aa>
 80018ca:	2b46      	cmp	r3, #70	; 0x46
 80018cc:	f2c0 80ba 	blt.w	8001a44 <main+0x2c0>
 80018d0:	2b77      	cmp	r3, #119	; 0x77
 80018d2:	f300 80b7 	bgt.w	8001a44 <main+0x2c0>
 80018d6:	2b61      	cmp	r3, #97	; 0x61
 80018d8:	f2c0 80b4 	blt.w	8001a44 <main+0x2c0>
 80018dc:	3b61      	subs	r3, #97	; 0x61
 80018de:	2201      	movs	r2, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	4a67      	ldr	r2, [pc, #412]	; (8001a84 <main+0x300>)
 80018e6:	401a      	ands	r2, r3
 80018e8:	2a00      	cmp	r2, #0
 80018ea:	bf14      	ite	ne
 80018ec:	2201      	movne	r2, #1
 80018ee:	2200      	moveq	r2, #0
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	2a00      	cmp	r2, #0
 80018f4:	d112      	bne.n	800191c <main+0x198>
 80018f6:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80018fa:	2a00      	cmp	r2, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2201      	movne	r2, #1
 8001900:	2200      	moveq	r2, #0
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	2a00      	cmp	r2, #0
 8001906:	d173      	bne.n	80019f0 <main+0x26c>
 8001908:	f003 0320 	and.w	r3, r3, #32
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <main+0x1aa>
                      displayBoard(board, LEDS);
                      gameWon = -1;
                      break;

                  default:
                      break; // Unknown input, ignore
 800191a:	e093      	b.n	8001a44 <main+0x2c0>
                      handleMovement(value, &currentLED, LEDS, board);
 800191c:	78f8      	ldrb	r0, [r7, #3]
 800191e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001922:	f107 0208 	add.w	r2, r7, #8
 8001926:	1d39      	adds	r1, r7, #4
 8001928:	f7ff fc98 	bl	800125c <handleMovement>
                      break;
 800192c:	e0e5      	b.n	8001afa <main+0x376>
                      movePossible = handleSelection(&currentLED, currentPlayer, board, LEDS);
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001936:	1d38      	adds	r0, r7, #4
 8001938:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800193a:	f7ff fd31 	bl	80013a0 <handleSelection>
 800193e:	4603      	mov	r3, r0
 8001940:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                      displayBoard(board, LEDS);
 8001944:	f107 0208 	add.w	r2, r7, #8
 8001948:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fc1e 	bl	8001190 <displayBoard>
                      if(movePossible){
 8001954:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <main+0x1e8>
                    	  currentPlayer = (currentPlayer == 1) ? 2 : 1; // Switch player after placing a marker
 800195c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <main+0x1e2>
 8001962:	2302      	movs	r3, #2
 8001964:	e000      	b.n	8001968 <main+0x1e4>
 8001966:	2301      	movs	r3, #1
 8001968:	67fb      	str	r3, [r7, #124]	; 0x7c
 800196a:	e034      	b.n	80019d6 <main+0x252>
                    	  int green=0, red=0;
 800196c:	2300      	movs	r3, #0
 800196e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001970:	2300      	movs	r3, #0
 8001972:	667b      	str	r3, [r7, #100]	; 0x64
                    	  if (currentPlayer == 1) {
 8001974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001976:	2b01      	cmp	r3, #1
 8001978:	d102      	bne.n	8001980 <main+0x1fc>
                    	     green = 15;
 800197a:	230f      	movs	r3, #15
 800197c:	66bb      	str	r3, [r7, #104]	; 0x68
 800197e:	e001      	b.n	8001984 <main+0x200>
                    	     red = 15;
 8001980:	230f      	movs	r3, #15
 8001982:	667b      	str	r3, [r7, #100]	; 0x64
                    	  for(int i=0; i<3; i++){
 8001984:	2300      	movs	r3, #0
 8001986:	663b      	str	r3, [r7, #96]	; 0x60
 8001988:	e022      	b.n	80019d0 <main+0x24c>
							  Set_LED(LEDS[currentLED], 15, 15, 0);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	3380      	adds	r3, #128	; 0x80
 8001990:	443b      	add	r3, r7
 8001992:	f853 0c78 	ldr.w	r0, [r3, #-120]
 8001996:	2300      	movs	r3, #0
 8001998:	220f      	movs	r2, #15
 800199a:	210f      	movs	r1, #15
 800199c:	f7ff fad4 	bl	8000f48 <Set_LED>
							  WS2812_Send();
 80019a0:	f7ff fb84 	bl	80010ac <WS2812_Send>
							  HAL_Delay(100);
 80019a4:	2064      	movs	r0, #100	; 0x64
 80019a6:	f000 fcdb 	bl	8002360 <HAL_Delay>
							  Set_LED(LEDS[currentLED], red, green, 0);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	3380      	adds	r3, #128	; 0x80
 80019b0:	443b      	add	r3, r7
 80019b2:	f853 0c78 	ldr.w	r0, [r3, #-120]
 80019b6:	2300      	movs	r3, #0
 80019b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80019ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80019bc:	f7ff fac4 	bl	8000f48 <Set_LED>
							  WS2812_Send();
 80019c0:	f7ff fb74 	bl	80010ac <WS2812_Send>
							  HAL_Delay(100);
 80019c4:	2064      	movs	r0, #100	; 0x64
 80019c6:	f000 fccb 	bl	8002360 <HAL_Delay>
                    	  for(int i=0; i<3; i++){
 80019ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019cc:	3301      	adds	r3, #1
 80019ce:	663b      	str	r3, [r7, #96]	; 0x60
 80019d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	ddd9      	ble.n	800198a <main+0x206>
                      gameWon = win(board);
 80019d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fd22 	bl	8001424 <win>
 80019e0:	6778      	str	r0, [r7, #116]	; 0x74
                      if(gameWon>=0){
 80019e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db2f      	blt.n	8001a48 <main+0x2c4>
                    	  printf("Wciśnij dowolny przycisk aby rozpocząć ponownie.\n");
 80019e8:	4827      	ldr	r0, [pc, #156]	; (8001a88 <main+0x304>)
 80019ea:	f003 fe4d 	bl	8005688 <puts>
                      break;
 80019ee:	e02b      	b.n	8001a48 <main+0x2c4>
                      for (int i = 0; i < 3; i++) {
 80019f0:	2300      	movs	r3, #0
 80019f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019f4:	e017      	b.n	8001a26 <main+0x2a2>
                          for (int j = 0; j < 3; j++) {
 80019f6:	2300      	movs	r3, #0
 80019f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80019fa:	e00e      	b.n	8001a1a <main+0x296>
                              board[i][j] = 0;
 80019fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	3380      	adds	r3, #128	; 0x80
 8001a0c:	443b      	add	r3, r7
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f843 2c50 	str.w	r2, [r3, #-80]
                          for (int j = 0; j < 3; j++) {
 8001a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a16:	3301      	adds	r3, #1
 8001a18:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	dded      	ble.n	80019fc <main+0x278>
                      for (int i = 0; i < 3; i++) {
 8001a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a22:	3301      	adds	r3, #1
 8001a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	dde4      	ble.n	80019f6 <main+0x272>
                      displayBoard(board, LEDS);
 8001a2c:	f107 0208 	add.w	r2, r7, #8
 8001a30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fbaa 	bl	8001190 <displayBoard>
                      gameWon = -1;
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a40:	677b      	str	r3, [r7, #116]	; 0x74
                      break;
 8001a42:	e05a      	b.n	8001afa <main+0x376>
                      break; // Unknown input, ignore
 8001a44:	bf00      	nop
 8001a46:	e058      	b.n	8001afa <main+0x376>
                      break;
 8001a48:	bf00      	nop
 8001a4a:	e056      	b.n	8001afa <main+0x376>
              }
          } else {
              // No data received within the timeout period
              // Handle the case accordingly
              if (counter > 10000) {
 8001a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a52:	4293      	cmp	r3, r2
 8001a54:	dd1a      	ble.n	8001a8c <main+0x308>
                  counter = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a5a:	e01a      	b.n	8001a92 <main+0x30e>
 8001a5c:	08007010 	.word	0x08007010
 8001a60:	08006f10 	.word	0x08006f10
 8001a64:	08006f38 	.word	0x08006f38
 8001a68:	08006f4c 	.word	0x08006f4c
 8001a6c:	08006f5c 	.word	0x08006f5c
 8001a70:	08006f70 	.word	0x08006f70
 8001a74:	08006f84 	.word	0x08006f84
 8001a78:	08006f9c 	.word	0x08006f9c
 8001a7c:	08006fb4 	.word	0x08006fb4
 8001a80:	2000012c 	.word	0x2000012c
 8001a84:	00440009 	.word	0x00440009
 8001a88:	08006fdc 	.word	0x08006fdc
              } else {
                  counter++;
 8001a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a8e:	3301      	adds	r3, #1
 8001a90:	67bb      	str	r3, [r7, #120]	; 0x78
              }

              if (counter % 10 == 0) {
 8001a92:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001a94:	4b3c      	ldr	r3, [pc, #240]	; (8001b88 <main+0x404>)
 8001a96:	fb83 2301 	smull	r2, r3, r3, r1
 8001a9a:	109a      	asrs	r2, r3, #2
 8001a9c:	17cb      	asrs	r3, r1, #31
 8001a9e:	1ad2      	subs	r2, r2, r3
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	1aca      	subs	r2, r1, r3
 8001aaa:	2a00      	cmp	r2, #0
 8001aac:	d107      	bne.n	8001abe <main+0x33a>
                  displayBoard(board, LEDS);
 8001aae:	f107 0208 	add.w	r2, r7, #8
 8001ab2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fb69 	bl	8001190 <displayBoard>
              }

              if (counter % 20 == 0) {
 8001abe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ac0:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <main+0x404>)
 8001ac2:	fb83 2301 	smull	r2, r3, r3, r1
 8001ac6:	10da      	asrs	r2, r3, #3
 8001ac8:	17cb      	asrs	r3, r1, #31
 8001aca:	1ad2      	subs	r2, r2, r3
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	1aca      	subs	r2, r1, r3
 8001ad6:	2a00      	cmp	r2, #0
 8001ad8:	d10a      	bne.n	8001af0 <main+0x36c>
                  Set_LED(LEDS[currentLED], 0, 0, 15);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	3380      	adds	r3, #128	; 0x80
 8001ae0:	443b      	add	r3, r7
 8001ae2:	f853 0c78 	ldr.w	r0, [r3, #-120]
 8001ae6:	230f      	movs	r3, #15
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	f7ff fa2c 	bl	8000f48 <Set_LED>
              }

              // printf("%d", counter);
              WS2812_Send();
 8001af0:	f7ff fadc 	bl	80010ac <WS2812_Send>
              HAL_Delay(1);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f000 fc33 	bl	8002360 <HAL_Delay>
      while (gameWon<0) {
 8001afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f6ff aec1 	blt.w	8001884 <main+0x100>
          }
      }
      if (counter > 10000) {
 8001b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b04:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	dd02      	ble.n	8001b12 <main+0x38e>
          counter = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b10:	e002      	b.n	8001b18 <main+0x394>
      } else {
          counter++;
 8001b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b14:	3301      	adds	r3, #1
 8001b16:	67bb      	str	r3, [r7, #120]	; 0x78
      }

      if (counter % 10 == 0) {
 8001b18:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <main+0x404>)
 8001b1c:	fb83 2301 	smull	r2, r3, r3, r1
 8001b20:	109a      	asrs	r2, r3, #2
 8001b22:	17cb      	asrs	r3, r1, #31
 8001b24:	1ad2      	subs	r2, r2, r3
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	1aca      	subs	r2, r1, r3
 8001b30:	2a00      	cmp	r2, #0
 8001b32:	d10e      	bne.n	8001b52 <main+0x3ce>
          displayBoard(board, LEDS);
 8001b34:	f107 0208 	add.w	r2, r7, #8
 8001b38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fb26 	bl	8001190 <displayBoard>
          blink(gameWon, currentPlayer, LEDS, false);
 8001b44:	f107 0208 	add.w	r2, r7, #8
 8001b48:	2300      	movs	r3, #0
 8001b4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001b4c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b4e:	f7ff fd1f 	bl	8001590 <blink>
      }

      if (counter % 20 == 0) {
 8001b52:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <main+0x404>)
 8001b56:	fb83 2301 	smull	r2, r3, r3, r1
 8001b5a:	10da      	asrs	r2, r3, #3
 8001b5c:	17cb      	asrs	r3, r1, #31
 8001b5e:	1ad2      	subs	r2, r2, r3
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	1aca      	subs	r2, r1, r3
 8001b6a:	2a00      	cmp	r2, #0
 8001b6c:	d106      	bne.n	8001b7c <main+0x3f8>
    	  blink(gameWon, currentPlayer, LEDS, true);
 8001b6e:	f107 0208 	add.w	r2, r7, #8
 8001b72:	2301      	movs	r3, #1
 8001b74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001b76:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b78:	f7ff fd0a 	bl	8001590 <blink>
      }

      // printf("%d", counter);
      WS2812_Send();
 8001b7c:	f7ff fa96 	bl	80010ac <WS2812_Send>
      HAL_Delay(1);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f000 fbed 	bl	8002360 <HAL_Delay>
  while (1) {
 8001b86:	e64d      	b.n	8001824 <main+0xa0>
 8001b88:	66666667 	.word	0x66666667

08001b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b094      	sub	sp, #80	; 0x50
 8001b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	2234      	movs	r2, #52	; 0x34
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fe54 	bl	8005848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba0:	f107 0308 	add.w	r3, r7, #8
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <SystemClock_Config+0xd0>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	4a28      	ldr	r2, [pc, #160]	; (8001c5c <SystemClock_Config+0xd0>)
 8001bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc0:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <SystemClock_Config+0xd0>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bcc:	2300      	movs	r3, #0
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <SystemClock_Config+0xd4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bd8:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <SystemClock_Config+0xd4>)
 8001bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <SystemClock_Config+0xd4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bec:	2301      	movs	r3, #1
 8001bee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bf0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bf4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c00:	2304      	movs	r3, #4
 8001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c04:	2348      	movs	r3, #72	; 0x48
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 fd47 	bl	80036ac <HAL_RCC_OscConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c24:	f000 f912 	bl	8001e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c28:	230f      	movs	r3, #15
 8001c2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2102      	movs	r1, #2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f001 f9e7 	bl	8003018 <HAL_RCC_ClockConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001c50:	f000 f8fc 	bl	8001e4c <Error_Handler>
  }
}
 8001c54:	bf00      	nop
 8001c56:	3750      	adds	r7, #80	; 0x50
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000

08001c64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b092      	sub	sp, #72	; 0x48
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
 8001c84:	615a      	str	r2, [r3, #20]
 8001c86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f003 fdda 	bl	8005848 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c94:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <MX_TIM1_Init+0xfc>)
 8001c96:	4a33      	ldr	r2, [pc, #204]	; (8001d64 <MX_TIM1_Init+0x100>)
 8001c98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c9a:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <MX_TIM1_Init+0xfc>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <MX_TIM1_Init+0xfc>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001ca6:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <MX_TIM1_Init+0xfc>)
 8001ca8:	2259      	movs	r2, #89	; 0x59
 8001caa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cac:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <MX_TIM1_Init+0xfc>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <MX_TIM1_Init+0xfc>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <MX_TIM1_Init+0xfc>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cbe:	4828      	ldr	r0, [pc, #160]	; (8001d60 <MX_TIM1_Init+0xfc>)
 8001cc0:	f001 ff92 	bl	8003be8 <HAL_TIM_PWM_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001cca:	f000 f8bf 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4820      	ldr	r0, [pc, #128]	; (8001d60 <MX_TIM1_Init+0xfc>)
 8001cde:	f002 fe8b 	bl	80049f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001ce8:	f000 f8b0 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cec:	2360      	movs	r3, #96	; 0x60
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d00:	2300      	movs	r3, #0
 8001d02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4813      	ldr	r0, [pc, #76]	; (8001d60 <MX_TIM1_Init+0xfc>)
 8001d12:	f002 fa53 	bl	80041bc <HAL_TIM_PWM_ConfigChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001d1c:	f000 f896 	bl	8001e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	4619      	mov	r1, r3
 8001d42:	4807      	ldr	r0, [pc, #28]	; (8001d60 <MX_TIM1_Init+0xfc>)
 8001d44:	f002 fed4 	bl	8004af0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001d4e:	f000 f87d 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d52:	4803      	ldr	r0, [pc, #12]	; (8001d60 <MX_TIM1_Init+0xfc>)
 8001d54:	f000 f8fc 	bl	8001f50 <HAL_TIM_MspPostInit>

}
 8001d58:	bf00      	nop
 8001d5a:	3748      	adds	r7, #72	; 0x48
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000084 	.word	0x20000084
 8001d64:	40010000 	.word	0x40010000

08001d68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <MX_USART2_UART_Init+0x50>)
 8001d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d8e:	220c      	movs	r2, #12
 8001d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001da0:	f002 fef8 	bl	8004b94 <HAL_UART_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001daa:	f000 f84f 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000012c 	.word	0x2000012c
 8001db8:	40004400 	.word	0x40004400

08001dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_DMA_Init+0x3c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <MX_DMA_Init+0x3c>)
 8001dcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_DMA_Init+0x3c>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	2039      	movs	r0, #57	; 0x39
 8001de4:	f000 fbbb 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001de8:	2039      	movs	r0, #57	; 0x39
 8001dea:	f000 fbd4 	bl	8002596 <HAL_NVIC_EnableIRQ>

}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800

08001dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <MX_GPIO_Init+0x4c>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <MX_GPIO_Init+0x4c>)
 8001e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <MX_GPIO_Init+0x4c>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <MX_GPIO_Init+0x4c>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <MX_GPIO_Init+0x4c>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <MX_GPIO_Init+0x4c>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <Error_Handler+0x8>
	...

08001e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <HAL_TIM_PWM_MspInit+0x98>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d13d      	bne.n	8001f36 <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_TIM_PWM_MspInit+0x9c>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <HAL_TIM_PWM_MspInit+0x9c>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_TIM_PWM_MspInit+0x9c>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <HAL_TIM_PWM_MspInit+0xa0>)
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <HAL_TIM_PWM_MspInit+0xa4>)
 8001eda:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_TIM_PWM_MspInit+0xa0>)
 8001ede:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001ee2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_TIM_PWM_MspInit+0xa0>)
 8001ee6:	2240      	movs	r2, #64	; 0x40
 8001ee8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_TIM_PWM_MspInit+0xa0>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_TIM_PWM_MspInit+0xa0>)
 8001ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ef6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_TIM_PWM_MspInit+0xa0>)
 8001efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001efe:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f06:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001f1a:	480b      	ldr	r0, [pc, #44]	; (8001f48 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f1c:	f000 fb56 	bl	80025cc <HAL_DMA_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8001f26:	f7ff ff91 	bl	8001e4c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a06      	ldr	r2, [pc, #24]	; (8001f48 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f30:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40010000 	.word	0x40010000
 8001f44:	40023800 	.word	0x40023800
 8001f48:	200000cc 	.word	0x200000cc
 8001f4c:	40026428 	.word	0x40026428

08001f50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <HAL_TIM_MspPostInit+0x68>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d11e      	bne.n	8001fb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_TIM_MspPostInit+0x6c>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_TIM_MspPostInit+0x6c>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_TIM_MspPostInit+0x6c>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <HAL_TIM_MspPostInit+0x70>)
 8001fac:	f000 fea0 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fb0:	bf00      	nop
 8001fb2:	3720      	adds	r7, #32
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020000 	.word	0x40020000

08001fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <HAL_UART_MspInit+0x84>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d12b      	bne.n	800203e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_UART_MspInit+0x88>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a17      	ldr	r2, [pc, #92]	; (800204c <HAL_UART_MspInit+0x88>)
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_UART_MspInit+0x88>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_UART_MspInit+0x88>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a10      	ldr	r2, [pc, #64]	; (800204c <HAL_UART_MspInit+0x88>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_UART_MspInit+0x88>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800201e:	230c      	movs	r3, #12
 8002020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800202e:	2307      	movs	r3, #7
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <HAL_UART_MspInit+0x8c>)
 800203a:	f000 fe59 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	3728      	adds	r7, #40	; 0x28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40004400 	.word	0x40004400
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000

08002054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <NMI_Handler+0x4>

0800205a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <HardFault_Handler+0x4>

08002060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <MemManage_Handler+0x4>

08002066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <BusFault_Handler+0x4>

0800206c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <UsageFault_Handler+0x4>

08002072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a0:	f000 f93e 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <DMA2_Stream1_IRQHandler+0x10>)
 80020ae:	f000 fbb5 	bl	800281c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200000cc 	.word	0x200000cc

080020bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	e00a      	b.n	80020e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ce:	f3af 8000 	nop.w
 80020d2:	4601      	mov	r1, r0
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60ba      	str	r2, [r7, #8]
 80020da:	b2ca      	uxtb	r2, r1
 80020dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	dbf0      	blt.n	80020ce <_read+0x12>
  }

  return len;
 80020ec:	687b      	ldr	r3, [r7, #4]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	e009      	b.n	800211c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fee5 	bl	8000ee0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf1      	blt.n	8002108 <_write+0x12>
  }
  return len;
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_close>:

int _close(int file)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002156:	605a      	str	r2, [r3, #4]
  return 0;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_isatty>:

int _isatty(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800216e:	2301      	movs	r3, #1
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <_sbrk+0x5c>)
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <_sbrk+0x60>)
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <_sbrk+0x64>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <_sbrk+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d207      	bcs.n	80021d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c8:	f003 fb8c 	bl	80058e4 <__errno>
 80021cc:	4603      	mov	r3, r0
 80021ce:	220c      	movs	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	e009      	b.n	80021ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <_sbrk+0x64>)
 80021e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20020000 	.word	0x20020000
 80021f8:	00000400 	.word	0x00000400
 80021fc:	20000ef8 	.word	0x20000ef8
 8002200:	20001050 	.word	0x20001050

08002204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <SystemInit+0x20>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	4a05      	ldr	r2, [pc, #20]	; (8002224 <SystemInit+0x20>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800222e:	490e      	ldr	r1, [pc, #56]	; (8002268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002244:	4c0b      	ldr	r4, [pc, #44]	; (8002274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002252:	f7ff ffd7 	bl	8002204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002256:	f003 fb4b 	bl	80058f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225a:	f7ff fa93 	bl	8001784 <main>
  bx  lr    
 800225e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800226c:	08007240 	.word	0x08007240
  ldr r2, =_sbss
 8002270:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002274:	2000104c 	.word	0x2000104c

08002278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC_IRQHandler>
	...

0800227c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002280:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <HAL_Init+0x40>)
 8002286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_Init+0x40>)
 8002292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_Init+0x40>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 f94f 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022aa:	200f      	movs	r0, #15
 80022ac:	f000 f808 	bl	80022c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b0:	f7ff fdd2 	bl	8001e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00

080022c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0x54>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x58>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f967 	bl	80025b2 <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f000 f92f 	bl	800255e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <HAL_InitTick+0x5c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000000 	.word	0x20000000
 8002318:	20000008 	.word	0x20000008
 800231c:	20000004 	.word	0x20000004

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000008 	.word	0x20000008
 8002344:	20000efc 	.word	0x20000efc

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000efc 	.word	0x20000efc

08002360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff ffee 	bl	8002348 <HAL_GetTick>
 800236c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002386:	bf00      	nop
 8002388:	f7ff ffde 	bl	8002348 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
  {
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000008 	.word	0x20000008

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	db0b      	blt.n	8002436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4907      	ldr	r1, [pc, #28]	; (8002444 <__NVIC_EnableIRQ+0x38>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2001      	movs	r0, #1
 800242e:	fa00 f202 	lsl.w	r2, r0, r2
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	db0a      	blt.n	8002472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	490c      	ldr	r1, [pc, #48]	; (8002494 <__NVIC_SetPriority+0x4c>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	0112      	lsls	r2, r2, #4
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	440b      	add	r3, r1
 800246c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002470:	e00a      	b.n	8002488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4908      	ldr	r1, [pc, #32]	; (8002498 <__NVIC_SetPriority+0x50>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3b04      	subs	r3, #4
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	440b      	add	r3, r1
 8002486:	761a      	strb	r2, [r3, #24]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000e100 	.word	0xe000e100
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f1c3 0307 	rsb	r3, r3, #7
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	bf28      	it	cs
 80024ba:	2304      	movcs	r3, #4
 80024bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d902      	bls.n	80024cc <NVIC_EncodePriority+0x30>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3b03      	subs	r3, #3
 80024ca:	e000      	b.n	80024ce <NVIC_EncodePriority+0x32>
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	401a      	ands	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	4313      	orrs	r3, r2
         );
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002514:	d301      	bcc.n	800251a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2301      	movs	r3, #1
 8002518:	e00f      	b.n	800253a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <SysTick_Config+0x40>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002522:	210f      	movs	r1, #15
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f7ff ff8e 	bl	8002448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <SysTick_Config+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <SysTick_Config+0x40>)
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff29 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff3e 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ff8e 	bl	800249c <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff5d 	bl	8002448 <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff31 	bl	800240c <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffa2 	bl	8002504 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff feb6 	bl	8002348 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e099      	b.n	800271c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002608:	e00f      	b.n	800262a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260a:	f7ff fe9d 	bl	8002348 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b05      	cmp	r3, #5
 8002616:	d908      	bls.n	800262a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e078      	b.n	800271c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e8      	bne.n	800260a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4b38      	ldr	r3, [pc, #224]	; (8002724 <HAL_DMA_Init+0x158>)
 8002644:	4013      	ands	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	4313      	orrs	r3, r2
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f023 0307 	bic.w	r3, r3, #7
 80026aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d117      	bne.n	80026ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00e      	beq.n	80026ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fa91 	bl	8002bf8 <DMA_CheckFifoParam>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2240      	movs	r2, #64	; 0x40
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026ea:	2301      	movs	r3, #1
 80026ec:	e016      	b.n	800271c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fa48 	bl	8002b8c <DMA_CalcBaseAndBitshift>
 80026fc:	4603      	mov	r3, r0
 80026fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	223f      	movs	r2, #63	; 0x3f
 8002706:	409a      	lsls	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	f010803f 	.word	0xf010803f

08002728 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_DMA_Start_IT+0x26>
 800274a:	2302      	movs	r3, #2
 800274c:	e040      	b.n	80027d0 <HAL_DMA_Start_IT+0xa8>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d12f      	bne.n	80027c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2202      	movs	r2, #2
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f9da 	bl	8002b30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	223f      	movs	r2, #63	; 0x3f
 8002782:	409a      	lsls	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0216 	orr.w	r2, r2, #22
 8002796:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0208 	orr.w	r2, r2, #8
 80027ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e005      	b.n	80027ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d004      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00c      	b.n	8002810 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2205      	movs	r2, #5
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002828:	4b8e      	ldr	r3, [pc, #568]	; (8002a64 <HAL_DMA_IRQHandler+0x248>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a8e      	ldr	r2, [pc, #568]	; (8002a68 <HAL_DMA_IRQHandler+0x24c>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0a9b      	lsrs	r3, r3, #10
 8002834:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	2208      	movs	r2, #8
 8002848:	409a      	lsls	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01a      	beq.n	8002888 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0204 	bic.w	r2, r2, #4
 800286e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	2208      	movs	r2, #8
 8002876:	409a      	lsls	r2, r3
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	2201      	movs	r2, #1
 800288e:	409a      	lsls	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d012      	beq.n	80028be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	2201      	movs	r2, #1
 80028ac:	409a      	lsls	r2, r3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f043 0202 	orr.w	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	2204      	movs	r2, #4
 80028c4:	409a      	lsls	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d012      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	2204      	movs	r2, #4
 80028e2:	409a      	lsls	r2, r3
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	f043 0204 	orr.w	r2, r3, #4
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	2210      	movs	r2, #16
 80028fa:	409a      	lsls	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d043      	beq.n	800298c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d03c      	beq.n	800298c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	2210      	movs	r2, #16
 8002918:	409a      	lsls	r2, r3
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d018      	beq.n	800295e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d108      	bne.n	800294c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d024      	beq.n	800298c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4798      	blx	r3
 800294a:	e01f      	b.n	800298c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
 800295c:	e016      	b.n	800298c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d107      	bne.n	800297c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0208 	bic.w	r2, r2, #8
 800297a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	2220      	movs	r2, #32
 8002992:	409a      	lsls	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 808f 	beq.w	8002abc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8087 	beq.w	8002abc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b2:	2220      	movs	r2, #32
 80029b4:	409a      	lsls	r2, r3
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d136      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0216 	bic.w	r2, r2, #22
 80029d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d103      	bne.n	80029f6 <HAL_DMA_IRQHandler+0x1da>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0208 	bic.w	r2, r2, #8
 8002a04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	223f      	movs	r2, #63	; 0x3f
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d07e      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
        }
        return;
 8002a32:	e079      	b.n	8002b28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01d      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d031      	beq.n	8002abc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	4798      	blx	r3
 8002a60:	e02c      	b.n	8002abc <HAL_DMA_IRQHandler+0x2a0>
 8002a62:	bf00      	nop
 8002a64:	20000000 	.word	0x20000000
 8002a68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d023      	beq.n	8002abc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
 8002a7c:	e01e      	b.n	8002abc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10f      	bne.n	8002aac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0210 	bic.w	r2, r2, #16
 8002a9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d032      	beq.n	8002b2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d022      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	3301      	adds	r3, #1
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d307      	bcc.n	8002b04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f2      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x2cc>
 8002b02:	e000      	b.n	8002b06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	4798      	blx	r3
 8002b26:	e000      	b.n	8002b2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b28:	bf00      	nop
    }
  }
}
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d108      	bne.n	8002b70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b6e:	e007      	b.n	8002b80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	60da      	str	r2, [r3, #12]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	3b10      	subs	r3, #16
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <DMA_CalcBaseAndBitshift+0x64>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ba6:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <DMA_CalcBaseAndBitshift+0x68>)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d909      	bls.n	8002bce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	1d1a      	adds	r2, r3, #4
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	659a      	str	r2, [r3, #88]	; 0x58
 8002bcc:	e007      	b.n	8002bde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bd6:	f023 0303 	bic.w	r3, r3, #3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	aaaaaaab 	.word	0xaaaaaaab
 8002bf4:	08007050 	.word	0x08007050

08002bf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d11f      	bne.n	8002c52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d856      	bhi.n	8002cc6 <DMA_CheckFifoParam+0xce>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <DMA_CheckFifoParam+0x28>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c31 	.word	0x08002c31
 8002c24:	08002c43 	.word	0x08002c43
 8002c28:	08002c31 	.word	0x08002c31
 8002c2c:	08002cc7 	.word	0x08002cc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d046      	beq.n	8002cca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c40:	e043      	b.n	8002cca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c4a:	d140      	bne.n	8002cce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c50:	e03d      	b.n	8002cce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5a:	d121      	bne.n	8002ca0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d837      	bhi.n	8002cd2 <DMA_CheckFifoParam+0xda>
 8002c62:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <DMA_CheckFifoParam+0x70>)
 8002c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c68:	08002c79 	.word	0x08002c79
 8002c6c:	08002c7f 	.word	0x08002c7f
 8002c70:	08002c79 	.word	0x08002c79
 8002c74:	08002c91 	.word	0x08002c91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7c:	e030      	b.n	8002ce0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d025      	beq.n	8002cd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c8e:	e022      	b.n	8002cd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c98:	d11f      	bne.n	8002cda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c9e:	e01c      	b.n	8002cda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d903      	bls.n	8002cae <DMA_CheckFifoParam+0xb6>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d003      	beq.n	8002cb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cac:	e018      	b.n	8002ce0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb2:	e015      	b.n	8002ce0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00e      	beq.n	8002cde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc4:	e00b      	b.n	8002cde <DMA_CheckFifoParam+0xe6>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e00a      	b.n	8002ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e008      	b.n	8002ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e006      	b.n	8002ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e004      	b.n	8002ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e002      	b.n	8002ce0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cda:	bf00      	nop
 8002cdc:	e000      	b.n	8002ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cde:	bf00      	nop
    }
  } 
  
  return status; 
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop

08002cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	; 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	e165      	b.n	8002fd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	f040 8154 	bne.w	8002fd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d005      	beq.n	8002d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d130      	bne.n	8002da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d78:	2201      	movs	r2, #1
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f003 0201 	and.w	r2, r3, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d017      	beq.n	8002de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	2203      	movs	r2, #3
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d123      	bne.n	8002e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	08da      	lsrs	r2, r3, #3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3208      	adds	r2, #8
 8002df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	220f      	movs	r2, #15
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	08da      	lsrs	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3208      	adds	r2, #8
 8002e2e:	69b9      	ldr	r1, [r7, #24]
 8002e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 0203 	and.w	r2, r3, #3
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80ae 	beq.w	8002fd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	4b5d      	ldr	r3, [pc, #372]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	4a5c      	ldr	r2, [pc, #368]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e84:	6453      	str	r3, [r2, #68]	; 0x44
 8002e86:	4b5a      	ldr	r3, [pc, #360]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e92:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_GPIO_Init+0x304>)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	089b      	lsrs	r3, r3, #2
 8002e98:	3302      	adds	r3, #2
 8002e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	220f      	movs	r2, #15
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a4f      	ldr	r2, [pc, #316]	; (8002ff8 <HAL_GPIO_Init+0x308>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d025      	beq.n	8002f0a <HAL_GPIO_Init+0x21a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4e      	ldr	r2, [pc, #312]	; (8002ffc <HAL_GPIO_Init+0x30c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01f      	beq.n	8002f06 <HAL_GPIO_Init+0x216>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4d      	ldr	r2, [pc, #308]	; (8003000 <HAL_GPIO_Init+0x310>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d019      	beq.n	8002f02 <HAL_GPIO_Init+0x212>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a4c      	ldr	r2, [pc, #304]	; (8003004 <HAL_GPIO_Init+0x314>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_GPIO_Init+0x20e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a4b      	ldr	r2, [pc, #300]	; (8003008 <HAL_GPIO_Init+0x318>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00d      	beq.n	8002efa <HAL_GPIO_Init+0x20a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a4a      	ldr	r2, [pc, #296]	; (800300c <HAL_GPIO_Init+0x31c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <HAL_GPIO_Init+0x206>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a49      	ldr	r2, [pc, #292]	; (8003010 <HAL_GPIO_Init+0x320>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_GPIO_Init+0x202>
 8002eee:	2306      	movs	r3, #6
 8002ef0:	e00c      	b.n	8002f0c <HAL_GPIO_Init+0x21c>
 8002ef2:	2307      	movs	r3, #7
 8002ef4:	e00a      	b.n	8002f0c <HAL_GPIO_Init+0x21c>
 8002ef6:	2305      	movs	r3, #5
 8002ef8:	e008      	b.n	8002f0c <HAL_GPIO_Init+0x21c>
 8002efa:	2304      	movs	r3, #4
 8002efc:	e006      	b.n	8002f0c <HAL_GPIO_Init+0x21c>
 8002efe:	2303      	movs	r3, #3
 8002f00:	e004      	b.n	8002f0c <HAL_GPIO_Init+0x21c>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e002      	b.n	8002f0c <HAL_GPIO_Init+0x21c>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_GPIO_Init+0x21c>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	f002 0203 	and.w	r2, r2, #3
 8002f12:	0092      	lsls	r2, r2, #2
 8002f14:	4093      	lsls	r3, r2
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f1c:	4935      	ldr	r1, [pc, #212]	; (8002ff4 <HAL_GPIO_Init+0x304>)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	3302      	adds	r3, #2
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f2a:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <HAL_GPIO_Init+0x324>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f4e:	4a31      	ldr	r2, [pc, #196]	; (8003014 <HAL_GPIO_Init+0x324>)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f54:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <HAL_GPIO_Init+0x324>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f78:	4a26      	ldr	r2, [pc, #152]	; (8003014 <HAL_GPIO_Init+0x324>)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f7e:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_GPIO_Init+0x324>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fa2:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <HAL_GPIO_Init+0x324>)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <HAL_GPIO_Init+0x324>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fcc:	4a11      	ldr	r2, [pc, #68]	; (8003014 <HAL_GPIO_Init+0x324>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b0f      	cmp	r3, #15
 8002fdc:	f67f ae96 	bls.w	8002d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3724      	adds	r7, #36	; 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40013800 	.word	0x40013800
 8002ff8:	40020000 	.word	0x40020000
 8002ffc:	40020400 	.word	0x40020400
 8003000:	40020800 	.word	0x40020800
 8003004:	40020c00 	.word	0x40020c00
 8003008:	40021000 	.word	0x40021000
 800300c:	40021400 	.word	0x40021400
 8003010:	40021800 	.word	0x40021800
 8003014:	40013c00 	.word	0x40013c00

08003018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0cc      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800302c:	4b68      	ldr	r3, [pc, #416]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d90c      	bls.n	8003054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b65      	ldr	r3, [pc, #404]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b63      	ldr	r3, [pc, #396]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0b8      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800306c:	4b59      	ldr	r3, [pc, #356]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a58      	ldr	r2, [pc, #352]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003076:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003084:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a52      	ldr	r2, [pc, #328]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800308e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003090:	4b50      	ldr	r3, [pc, #320]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	494d      	ldr	r1, [pc, #308]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d044      	beq.n	8003138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d119      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e07f      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d003      	beq.n	80030d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d6:	4b3f      	ldr	r3, [pc, #252]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e06f      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e067      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f6:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f023 0203 	bic.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4934      	ldr	r1, [pc, #208]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	4313      	orrs	r3, r2
 8003106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003108:	f7ff f91e 	bl	8002348 <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	e00a      	b.n	8003126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003110:	f7ff f91a 	bl	8002348 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	; 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e04f      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 020c 	and.w	r2, r3, #12
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	429a      	cmp	r2, r3
 8003136:	d1eb      	bne.n	8003110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003138:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d20c      	bcs.n	8003160 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e032      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4916      	ldr	r1, [pc, #88]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	490e      	ldr	r1, [pc, #56]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800319e:	f000 f855 	bl	800324c <HAL_RCC_GetSysClockFreq>
 80031a2:	4602      	mov	r2, r0
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	490a      	ldr	r1, [pc, #40]	; (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	5ccb      	ldrb	r3, [r1, r3]
 80031b2:	fa22 f303 	lsr.w	r3, r2, r3
 80031b6:	4a09      	ldr	r2, [pc, #36]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_RCC_ClockConfig+0x1c8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff f87e 	bl	80022c0 <HAL_InitTick>

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023c00 	.word	0x40023c00
 80031d4:	40023800 	.word	0x40023800
 80031d8:	08007038 	.word	0x08007038
 80031dc:	20000000 	.word	0x20000000
 80031e0:	20000004 	.word	0x20000004

080031e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000000 	.word	0x20000000

080031fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003200:	f7ff fff0 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0a9b      	lsrs	r3, r3, #10
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4903      	ldr	r1, [pc, #12]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	08007048 	.word	0x08007048

08003224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003228:	f7ff ffdc 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	0b5b      	lsrs	r3, r3, #13
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4903      	ldr	r1, [pc, #12]	; (8003248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	08007048 	.word	0x08007048

0800324c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800324c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003250:	b0ae      	sub	sp, #184	; 0xb8
 8003252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003272:	4bcb      	ldr	r3, [pc, #812]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b0c      	cmp	r3, #12
 800327c:	f200 8206 	bhi.w	800368c <HAL_RCC_GetSysClockFreq+0x440>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032bd 	.word	0x080032bd
 800328c:	0800368d 	.word	0x0800368d
 8003290:	0800368d 	.word	0x0800368d
 8003294:	0800368d 	.word	0x0800368d
 8003298:	080032c5 	.word	0x080032c5
 800329c:	0800368d 	.word	0x0800368d
 80032a0:	0800368d 	.word	0x0800368d
 80032a4:	0800368d 	.word	0x0800368d
 80032a8:	080032cd 	.word	0x080032cd
 80032ac:	0800368d 	.word	0x0800368d
 80032b0:	0800368d 	.word	0x0800368d
 80032b4:	0800368d 	.word	0x0800368d
 80032b8:	080034bd 	.word	0x080034bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4bb9      	ldr	r3, [pc, #740]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80032be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80032c2:	e1e7      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c4:	4bb8      	ldr	r3, [pc, #736]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80032c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032ca:	e1e3      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032cc:	4bb4      	ldr	r3, [pc, #720]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d8:	4bb1      	ldr	r3, [pc, #708]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d071      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e4:	4bae      	ldr	r3, [pc, #696]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80032f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003300:	2300      	movs	r3, #0
 8003302:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800330a:	4622      	mov	r2, r4
 800330c:	462b      	mov	r3, r5
 800330e:	f04f 0000 	mov.w	r0, #0
 8003312:	f04f 0100 	mov.w	r1, #0
 8003316:	0159      	lsls	r1, r3, #5
 8003318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800331c:	0150      	lsls	r0, r2, #5
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4621      	mov	r1, r4
 8003324:	1a51      	subs	r1, r2, r1
 8003326:	6439      	str	r1, [r7, #64]	; 0x40
 8003328:	4629      	mov	r1, r5
 800332a:	eb63 0301 	sbc.w	r3, r3, r1
 800332e:	647b      	str	r3, [r7, #68]	; 0x44
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800333c:	4649      	mov	r1, r9
 800333e:	018b      	lsls	r3, r1, #6
 8003340:	4641      	mov	r1, r8
 8003342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003346:	4641      	mov	r1, r8
 8003348:	018a      	lsls	r2, r1, #6
 800334a:	4641      	mov	r1, r8
 800334c:	1a51      	subs	r1, r2, r1
 800334e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003350:	4649      	mov	r1, r9
 8003352:	eb63 0301 	sbc.w	r3, r3, r1
 8003356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003364:	4649      	mov	r1, r9
 8003366:	00cb      	lsls	r3, r1, #3
 8003368:	4641      	mov	r1, r8
 800336a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336e:	4641      	mov	r1, r8
 8003370:	00ca      	lsls	r2, r1, #3
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	4603      	mov	r3, r0
 8003378:	4622      	mov	r2, r4
 800337a:	189b      	adds	r3, r3, r2
 800337c:	633b      	str	r3, [r7, #48]	; 0x30
 800337e:	462b      	mov	r3, r5
 8003380:	460a      	mov	r2, r1
 8003382:	eb42 0303 	adc.w	r3, r2, r3
 8003386:	637b      	str	r3, [r7, #52]	; 0x34
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003394:	4629      	mov	r1, r5
 8003396:	024b      	lsls	r3, r1, #9
 8003398:	4621      	mov	r1, r4
 800339a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800339e:	4621      	mov	r1, r4
 80033a0:	024a      	lsls	r2, r1, #9
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80033b8:	f7fd fc14 	bl	8000be4 <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4613      	mov	r3, r2
 80033c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033c6:	e067      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c8:	4b75      	ldr	r3, [pc, #468]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	099b      	lsrs	r3, r3, #6
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80033d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80033e2:	2300      	movs	r3, #0
 80033e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80033ea:	4622      	mov	r2, r4
 80033ec:	462b      	mov	r3, r5
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	0159      	lsls	r1, r3, #5
 80033f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033fc:	0150      	lsls	r0, r2, #5
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4621      	mov	r1, r4
 8003404:	1a51      	subs	r1, r2, r1
 8003406:	62b9      	str	r1, [r7, #40]	; 0x28
 8003408:	4629      	mov	r1, r5
 800340a:	eb63 0301 	sbc.w	r3, r3, r1
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800341c:	4649      	mov	r1, r9
 800341e:	018b      	lsls	r3, r1, #6
 8003420:	4641      	mov	r1, r8
 8003422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003426:	4641      	mov	r1, r8
 8003428:	018a      	lsls	r2, r1, #6
 800342a:	4641      	mov	r1, r8
 800342c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003430:	4649      	mov	r1, r9
 8003432:	eb63 0b01 	sbc.w	fp, r3, r1
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003442:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003446:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800344a:	4692      	mov	sl, r2
 800344c:	469b      	mov	fp, r3
 800344e:	4623      	mov	r3, r4
 8003450:	eb1a 0303 	adds.w	r3, sl, r3
 8003454:	623b      	str	r3, [r7, #32]
 8003456:	462b      	mov	r3, r5
 8003458:	eb4b 0303 	adc.w	r3, fp, r3
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800346a:	4629      	mov	r1, r5
 800346c:	028b      	lsls	r3, r1, #10
 800346e:	4621      	mov	r1, r4
 8003470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003474:	4621      	mov	r1, r4
 8003476:	028a      	lsls	r2, r1, #10
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003480:	2200      	movs	r2, #0
 8003482:	673b      	str	r3, [r7, #112]	; 0x70
 8003484:	677a      	str	r2, [r7, #116]	; 0x74
 8003486:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800348a:	f7fd fbab 	bl	8000be4 <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4613      	mov	r3, r2
 8003494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003498:	4b41      	ldr	r3, [pc, #260]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	0c1b      	lsrs	r3, r3, #16
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	3301      	adds	r3, #1
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80034aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034ba:	e0eb      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034bc:	4b38      	ldr	r3, [pc, #224]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034c8:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d06b      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d4:	4b32      	ldr	r3, [pc, #200]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	2200      	movs	r2, #0
 80034dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80034de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e6:	663b      	str	r3, [r7, #96]	; 0x60
 80034e8:	2300      	movs	r3, #0
 80034ea:	667b      	str	r3, [r7, #100]	; 0x64
 80034ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80034f0:	4622      	mov	r2, r4
 80034f2:	462b      	mov	r3, r5
 80034f4:	f04f 0000 	mov.w	r0, #0
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	0159      	lsls	r1, r3, #5
 80034fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003502:	0150      	lsls	r0, r2, #5
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4621      	mov	r1, r4
 800350a:	1a51      	subs	r1, r2, r1
 800350c:	61b9      	str	r1, [r7, #24]
 800350e:	4629      	mov	r1, r5
 8003510:	eb63 0301 	sbc.w	r3, r3, r1
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003522:	4659      	mov	r1, fp
 8003524:	018b      	lsls	r3, r1, #6
 8003526:	4651      	mov	r1, sl
 8003528:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800352c:	4651      	mov	r1, sl
 800352e:	018a      	lsls	r2, r1, #6
 8003530:	4651      	mov	r1, sl
 8003532:	ebb2 0801 	subs.w	r8, r2, r1
 8003536:	4659      	mov	r1, fp
 8003538:	eb63 0901 	sbc.w	r9, r3, r1
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003548:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800354c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003550:	4690      	mov	r8, r2
 8003552:	4699      	mov	r9, r3
 8003554:	4623      	mov	r3, r4
 8003556:	eb18 0303 	adds.w	r3, r8, r3
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	462b      	mov	r3, r5
 800355e:	eb49 0303 	adc.w	r3, r9, r3
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003570:	4629      	mov	r1, r5
 8003572:	024b      	lsls	r3, r1, #9
 8003574:	4621      	mov	r1, r4
 8003576:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800357a:	4621      	mov	r1, r4
 800357c:	024a      	lsls	r2, r1, #9
 800357e:	4610      	mov	r0, r2
 8003580:	4619      	mov	r1, r3
 8003582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003586:	2200      	movs	r2, #0
 8003588:	65bb      	str	r3, [r7, #88]	; 0x58
 800358a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800358c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003590:	f7fd fb28 	bl	8000be4 <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4613      	mov	r3, r2
 800359a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800359e:	e065      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x420>
 80035a0:	40023800 	.word	0x40023800
 80035a4:	00f42400 	.word	0x00f42400
 80035a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ac:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	099b      	lsrs	r3, r3, #6
 80035b2:	2200      	movs	r2, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	4611      	mov	r1, r2
 80035b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035bc:	653b      	str	r3, [r7, #80]	; 0x50
 80035be:	2300      	movs	r3, #0
 80035c0:	657b      	str	r3, [r7, #84]	; 0x54
 80035c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80035c6:	4642      	mov	r2, r8
 80035c8:	464b      	mov	r3, r9
 80035ca:	f04f 0000 	mov.w	r0, #0
 80035ce:	f04f 0100 	mov.w	r1, #0
 80035d2:	0159      	lsls	r1, r3, #5
 80035d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d8:	0150      	lsls	r0, r2, #5
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4641      	mov	r1, r8
 80035e0:	1a51      	subs	r1, r2, r1
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	4649      	mov	r1, r9
 80035e6:	eb63 0301 	sbc.w	r3, r3, r1
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80035f8:	4659      	mov	r1, fp
 80035fa:	018b      	lsls	r3, r1, #6
 80035fc:	4651      	mov	r1, sl
 80035fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003602:	4651      	mov	r1, sl
 8003604:	018a      	lsls	r2, r1, #6
 8003606:	4651      	mov	r1, sl
 8003608:	1a54      	subs	r4, r2, r1
 800360a:	4659      	mov	r1, fp
 800360c:	eb63 0501 	sbc.w	r5, r3, r1
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	00eb      	lsls	r3, r5, #3
 800361a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800361e:	00e2      	lsls	r2, r4, #3
 8003620:	4614      	mov	r4, r2
 8003622:	461d      	mov	r5, r3
 8003624:	4643      	mov	r3, r8
 8003626:	18e3      	adds	r3, r4, r3
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	464b      	mov	r3, r9
 800362c:	eb45 0303 	adc.w	r3, r5, r3
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800363e:	4629      	mov	r1, r5
 8003640:	028b      	lsls	r3, r1, #10
 8003642:	4621      	mov	r1, r4
 8003644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003648:	4621      	mov	r1, r4
 800364a:	028a      	lsls	r2, r1, #10
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003654:	2200      	movs	r2, #0
 8003656:	64bb      	str	r3, [r7, #72]	; 0x48
 8003658:	64fa      	str	r2, [r7, #76]	; 0x4c
 800365a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800365e:	f7fd fac1 	bl	8000be4 <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4613      	mov	r3, r2
 8003668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800366c:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	0f1b      	lsrs	r3, r3, #28
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800367a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800367e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800368a:	e003      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800368e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003692:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003694:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003698:	4618      	mov	r0, r3
 800369a:	37b8      	adds	r7, #184	; 0xb8
 800369c:	46bd      	mov	sp, r7
 800369e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800
 80036a8:	00f42400 	.word	0x00f42400

080036ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e28d      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8083 	beq.w	80037d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036cc:	4b94      	ldr	r3, [pc, #592]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d019      	beq.n	800370c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036d8:	4b91      	ldr	r3, [pc, #580]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036e4:	4b8e      	ldr	r3, [pc, #568]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f0:	d00c      	beq.n	800370c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f2:	4b8b      	ldr	r3, [pc, #556]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d112      	bne.n	8003724 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fe:	4b88      	ldr	r3, [pc, #544]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800370a:	d10b      	bne.n	8003724 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	4b84      	ldr	r3, [pc, #528]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d05b      	beq.n	80037d0 <HAL_RCC_OscConfig+0x124>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d157      	bne.n	80037d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e25a      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372c:	d106      	bne.n	800373c <HAL_RCC_OscConfig+0x90>
 800372e:	4b7c      	ldr	r3, [pc, #496]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a7b      	ldr	r2, [pc, #492]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e01d      	b.n	8003778 <HAL_RCC_OscConfig+0xcc>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0xb4>
 8003746:	4b76      	ldr	r3, [pc, #472]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a75      	ldr	r2, [pc, #468]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800374c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b73      	ldr	r3, [pc, #460]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a72      	ldr	r2, [pc, #456]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e00b      	b.n	8003778 <HAL_RCC_OscConfig+0xcc>
 8003760:	4b6f      	ldr	r3, [pc, #444]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a6e      	ldr	r2, [pc, #440]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4b6c      	ldr	r3, [pc, #432]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a6b      	ldr	r2, [pc, #428]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d013      	beq.n	80037a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fe fde2 	bl	8002348 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003788:	f7fe fdde 	bl	8002348 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e21f      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	4b61      	ldr	r3, [pc, #388]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0xdc>
 80037a6:	e014      	b.n	80037d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fe fdce 	bl	8002348 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fe fdca 	bl	8002348 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e20b      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	4b57      	ldr	r3, [pc, #348]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x104>
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d06f      	beq.n	80038be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037de:	4b50      	ldr	r3, [pc, #320]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d017      	beq.n	800381a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037ea:	4b4d      	ldr	r3, [pc, #308]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d105      	bne.n	8003802 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037f6:	4b4a      	ldr	r3, [pc, #296]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d11c      	bne.n	8003848 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380e:	4b44      	ldr	r3, [pc, #272]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d116      	bne.n	8003848 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381a:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_RCC_OscConfig+0x186>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d001      	beq.n	8003832 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e1d3      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4937      	ldr	r1, [pc, #220]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	e03a      	b.n	80038be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003850:	4b34      	ldr	r3, [pc, #208]	; (8003924 <HAL_RCC_OscConfig+0x278>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7fe fd77 	bl	8002348 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385e:	f7fe fd73 	bl	8002348 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e1b4      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003870:	4b2b      	ldr	r3, [pc, #172]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4925      	ldr	r1, [pc, #148]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	e015      	b.n	80038be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003892:	4b24      	ldr	r3, [pc, #144]	; (8003924 <HAL_RCC_OscConfig+0x278>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe fd56 	bl	8002348 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a0:	f7fe fd52 	bl	8002348 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e193      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b2:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d036      	beq.n	8003938 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d016      	beq.n	8003900 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <HAL_RCC_OscConfig+0x27c>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7fe fd36 	bl	8002348 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e0:	f7fe fd32 	bl	8002348 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e173      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x234>
 80038fe:	e01b      	b.n	8003938 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <HAL_RCC_OscConfig+0x27c>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003906:	f7fe fd1f 	bl	8002348 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390c:	e00e      	b.n	800392c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390e:	f7fe fd1b 	bl	8002348 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d907      	bls.n	800392c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e15c      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
 8003920:	40023800 	.word	0x40023800
 8003924:	42470000 	.word	0x42470000
 8003928:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392c:	4b8a      	ldr	r3, [pc, #552]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 800392e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1ea      	bne.n	800390e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8097 	beq.w	8003a74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003946:	2300      	movs	r3, #0
 8003948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394a:	4b83      	ldr	r3, [pc, #524]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	4b7f      	ldr	r3, [pc, #508]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	4a7e      	ldr	r2, [pc, #504]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003964:	6413      	str	r3, [r2, #64]	; 0x40
 8003966:	4b7c      	ldr	r3, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003976:	4b79      	ldr	r3, [pc, #484]	; (8003b5c <HAL_RCC_OscConfig+0x4b0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d118      	bne.n	80039b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003982:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <HAL_RCC_OscConfig+0x4b0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a75      	ldr	r2, [pc, #468]	; (8003b5c <HAL_RCC_OscConfig+0x4b0>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398e:	f7fe fcdb 	bl	8002348 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003996:	f7fe fcd7 	bl	8002348 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e118      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	4b6c      	ldr	r3, [pc, #432]	; (8003b5c <HAL_RCC_OscConfig+0x4b0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <HAL_RCC_OscConfig+0x31e>
 80039bc:	4b66      	ldr	r3, [pc, #408]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a65      	ldr	r2, [pc, #404]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
 80039c8:	e01c      	b.n	8003a04 <HAL_RCC_OscConfig+0x358>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b05      	cmp	r3, #5
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x340>
 80039d2:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	4a60      	ldr	r2, [pc, #384]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	f043 0304 	orr.w	r3, r3, #4
 80039dc:	6713      	str	r3, [r2, #112]	; 0x70
 80039de:	4b5e      	ldr	r3, [pc, #376]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	4a5d      	ldr	r2, [pc, #372]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0x358>
 80039ec:	4b5a      	ldr	r3, [pc, #360]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	4a59      	ldr	r2, [pc, #356]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	6713      	str	r3, [r2, #112]	; 0x70
 80039f8:	4b57      	ldr	r3, [pc, #348]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	4a56      	ldr	r2, [pc, #344]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039fe:	f023 0304 	bic.w	r3, r3, #4
 8003a02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d015      	beq.n	8003a38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fe fc9c 	bl	8002348 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a14:	f7fe fc98 	bl	8002348 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e0d7      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2a:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0ee      	beq.n	8003a14 <HAL_RCC_OscConfig+0x368>
 8003a36:	e014      	b.n	8003a62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fe fc86 	bl	8002348 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7fe fc82 	bl	8002348 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0c1      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a56:	4b40      	ldr	r3, [pc, #256]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1ee      	bne.n	8003a40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d105      	bne.n	8003a74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a68:	4b3b      	ldr	r3, [pc, #236]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	4a3a      	ldr	r2, [pc, #232]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80ad 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a7e:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d060      	beq.n	8003b4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d145      	bne.n	8003b1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a92:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <HAL_RCC_OscConfig+0x4b4>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe fc56 	bl	8002348 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa0:	f7fe fc52 	bl	8002348 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e093      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab2:	4b29      	ldr	r3, [pc, #164]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	019b      	lsls	r3, r3, #6
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	041b      	lsls	r3, r3, #16
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	071b      	lsls	r3, r3, #28
 8003aea:	491b      	ldr	r1, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x4b4>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fe fc27 	bl	8002348 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fe fc23 	bl	8002348 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e064      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x452>
 8003b1c:	e05c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_RCC_OscConfig+0x4b4>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe fc10 	bl	8002348 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fe fc0c 	bl	8002348 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e04d      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x480>
 8003b4a:	e045      	b.n	8003bd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e040      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b64:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <HAL_RCC_OscConfig+0x538>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d030      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d129      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d122      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d119      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	3b01      	subs	r3, #1
 8003bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d10f      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800

08003be8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e041      	b.n	8003c7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fe f94a 	bl	8001ea8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4619      	mov	r1, r3
 8003c26:	4610      	mov	r0, r2
 8003c28:	f000 fc70 	bl	800450c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d109      	bne.n	8003cb4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e022      	b.n	8003cfa <HAL_TIM_PWM_Start_DMA+0x72>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d109      	bne.n	8003cce <HAL_TIM_PWM_Start_DMA+0x46>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	bf0c      	ite	eq
 8003cc6:	2301      	moveq	r3, #1
 8003cc8:	2300      	movne	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	e015      	b.n	8003cfa <HAL_TIM_PWM_Start_DMA+0x72>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d109      	bne.n	8003ce8 <HAL_TIM_PWM_Start_DMA+0x60>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e008      	b.n	8003cfa <HAL_TIM_PWM_Start_DMA+0x72>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e171      	b.n	8003fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d109      	bne.n	8003d1c <HAL_TIM_PWM_Start_DMA+0x94>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	e022      	b.n	8003d62 <HAL_TIM_PWM_Start_DMA+0xda>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d109      	bne.n	8003d36 <HAL_TIM_PWM_Start_DMA+0xae>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	bf0c      	ite	eq
 8003d2e:	2301      	moveq	r3, #1
 8003d30:	2300      	movne	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	e015      	b.n	8003d62 <HAL_TIM_PWM_Start_DMA+0xda>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d109      	bne.n	8003d50 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e008      	b.n	8003d62 <HAL_TIM_PWM_Start_DMA+0xda>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d024      	beq.n	8003db0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d104      	bne.n	8003d76 <HAL_TIM_PWM_Start_DMA+0xee>
 8003d6c:	887b      	ldrh	r3, [r7, #2]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e137      	b.n	8003fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d104      	bne.n	8003d86 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d84:	e016      	b.n	8003db4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d104      	bne.n	8003d96 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d94:	e00e      	b.n	8003db4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d104      	bne.n	8003da6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da4:	e006      	b.n	8003db4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2202      	movs	r2, #2
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dae:	e001      	b.n	8003db4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e118      	b.n	8003fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b0c      	cmp	r3, #12
 8003db8:	f200 80ae 	bhi.w	8003f18 <HAL_TIM_PWM_Start_DMA+0x290>
 8003dbc:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003df9 	.word	0x08003df9
 8003dc8:	08003f19 	.word	0x08003f19
 8003dcc:	08003f19 	.word	0x08003f19
 8003dd0:	08003f19 	.word	0x08003f19
 8003dd4:	08003e41 	.word	0x08003e41
 8003dd8:	08003f19 	.word	0x08003f19
 8003ddc:	08003f19 	.word	0x08003f19
 8003de0:	08003f19 	.word	0x08003f19
 8003de4:	08003e89 	.word	0x08003e89
 8003de8:	08003f19 	.word	0x08003f19
 8003dec:	08003f19 	.word	0x08003f19
 8003df0:	08003f19 	.word	0x08003f19
 8003df4:	08003ed1 	.word	0x08003ed1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	4a7c      	ldr	r2, [pc, #496]	; (8003ff0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003dfe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	4a7b      	ldr	r2, [pc, #492]	; (8003ff4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	4a7a      	ldr	r2, [pc, #488]	; (8003ff8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003e0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3334      	adds	r3, #52	; 0x34
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	f7fe fc82 	bl	8002728 <HAL_DMA_Start_IT>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e0db      	b.n	8003fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3c:	60da      	str	r2, [r3, #12]
      break;
 8003e3e:	e06e      	b.n	8003f1e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	4a6a      	ldr	r2, [pc, #424]	; (8003ff0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003e46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	4a69      	ldr	r2, [pc, #420]	; (8003ff4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	4a68      	ldr	r2, [pc, #416]	; (8003ff8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003e56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3338      	adds	r3, #56	; 0x38
 8003e64:	461a      	mov	r2, r3
 8003e66:	887b      	ldrh	r3, [r7, #2]
 8003e68:	f7fe fc5e 	bl	8002728 <HAL_DMA_Start_IT>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e0b7      	b.n	8003fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e84:	60da      	str	r2, [r3, #12]
      break;
 8003e86:	e04a      	b.n	8003f1e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	4a58      	ldr	r2, [pc, #352]	; (8003ff0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003e8e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	4a57      	ldr	r2, [pc, #348]	; (8003ff4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	4a56      	ldr	r2, [pc, #344]	; (8003ff8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003e9e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	333c      	adds	r3, #60	; 0x3c
 8003eac:	461a      	mov	r2, r3
 8003eae:	887b      	ldrh	r3, [r7, #2]
 8003eb0:	f7fe fc3a 	bl	8002728 <HAL_DMA_Start_IT>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e093      	b.n	8003fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ecc:	60da      	str	r2, [r3, #12]
      break;
 8003ece:	e026      	b.n	8003f1e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	4a46      	ldr	r2, [pc, #280]	; (8003ff0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003ed6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	4a45      	ldr	r2, [pc, #276]	; (8003ff4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	4a44      	ldr	r2, [pc, #272]	; (8003ff8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003ee6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3340      	adds	r3, #64	; 0x40
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	887b      	ldrh	r3, [r7, #2]
 8003ef8:	f7fe fc16 	bl	8002728 <HAL_DMA_Start_IT>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e06f      	b.n	8003fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f14:	60da      	str	r2, [r3, #12]
      break;
 8003f16:	e002      	b.n	8003f1e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f1e:	7dfb      	ldrb	r3, [r7, #23]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d15f      	bne.n	8003fe4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fd3d 	bl	80049ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a31      	ldr	r2, [pc, #196]	; (8003ffc <HAL_TIM_PWM_Start_DMA+0x374>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_TIM_PWM_Start_DMA+0x2be>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a2f      	ldr	r2, [pc, #188]	; (8004000 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f5e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <HAL_TIM_PWM_Start_DMA+0x374>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d022      	beq.n	8003fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f72:	d01d      	beq.n	8003fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a22      	ldr	r2, [pc, #136]	; (8004004 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d018      	beq.n	8003fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a21      	ldr	r2, [pc, #132]	; (8004008 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d013      	beq.n	8003fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	; (800400c <HAL_TIM_PWM_Start_DMA+0x384>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00e      	beq.n	8003fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1a      	ldr	r2, [pc, #104]	; (8004000 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d009      	beq.n	8003fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1b      	ldr	r2, [pc, #108]	; (8004010 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1a      	ldr	r2, [pc, #104]	; (8004014 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d111      	bne.n	8003fd4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b06      	cmp	r3, #6
 8003fc0:	d010      	beq.n	8003fe4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd2:	e007      	b.n	8003fe4 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	080043fb 	.word	0x080043fb
 8003ff4:	080044a3 	.word	0x080044a3
 8003ff8:	08004369 	.word	0x08004369
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40010400 	.word	0x40010400
 8004004:	40000400 	.word	0x40000400
 8004008:	40000800 	.word	0x40000800
 800400c:	40000c00 	.word	0x40000c00
 8004010:	40014000 	.word	0x40014000
 8004014:	40001800 	.word	0x40001800

08004018 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b0c      	cmp	r3, #12
 800402a:	d855      	bhi.n	80040d8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800402c:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	08004069 	.word	0x08004069
 8004038:	080040d9 	.word	0x080040d9
 800403c:	080040d9 	.word	0x080040d9
 8004040:	080040d9 	.word	0x080040d9
 8004044:	08004085 	.word	0x08004085
 8004048:	080040d9 	.word	0x080040d9
 800404c:	080040d9 	.word	0x080040d9
 8004050:	080040d9 	.word	0x080040d9
 8004054:	080040a1 	.word	0x080040a1
 8004058:	080040d9 	.word	0x080040d9
 800405c:	080040d9 	.word	0x080040d9
 8004060:	080040d9 	.word	0x080040d9
 8004064:	080040bd 	.word	0x080040bd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004076:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	4618      	mov	r0, r3
 800407e:	f7fe fbab 	bl	80027d8 <HAL_DMA_Abort_IT>
      break;
 8004082:	e02c      	b.n	80040de <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004092:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe fb9d 	bl	80027d8 <HAL_DMA_Abort_IT>
      break;
 800409e:	e01e      	b.n	80040de <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fe fb8f 	bl	80027d8 <HAL_DMA_Abort_IT>
      break;
 80040ba:	e010      	b.n	80040de <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe fb81 	bl	80027d8 <HAL_DMA_Abort_IT>
      break;
 80040d6:	e002      	b.n	80040de <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      break;
 80040dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d161      	bne.n	80041a8 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2200      	movs	r2, #0
 80040ea:	6839      	ldr	r1, [r7, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fc5d 	bl	80049ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2f      	ldr	r2, [pc, #188]	; (80041b4 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_TIM_PWM_Stop_DMA+0xee>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <HAL_TIM_PWM_Stop_DMA+0xf2>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_TIM_PWM_Stop_DMA+0xf4>
 800410a:	2300      	movs	r3, #0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d017      	beq.n	8004140 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6a1a      	ldr	r2, [r3, #32]
 8004116:	f241 1311 	movw	r3, #4369	; 0x1111
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10f      	bne.n	8004140 <HAL_TIM_PWM_Stop_DMA+0x128>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6a1a      	ldr	r2, [r3, #32]
 8004126:	f240 4344 	movw	r3, #1092	; 0x444
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d107      	bne.n	8004140 <HAL_TIM_PWM_Stop_DMA+0x128>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800413e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6a1a      	ldr	r2, [r3, #32]
 8004146:	f241 1311 	movw	r3, #4369	; 0x1111
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10f      	bne.n	8004170 <HAL_TIM_PWM_Stop_DMA+0x158>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6a1a      	ldr	r2, [r3, #32]
 8004156:	f240 4344 	movw	r3, #1092	; 0x444
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d107      	bne.n	8004170 <HAL_TIM_PWM_Stop_DMA+0x158>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d104      	bne.n	8004180 <HAL_TIM_PWM_Stop_DMA+0x168>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800417e:	e013      	b.n	80041a8 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b04      	cmp	r3, #4
 8004184:	d104      	bne.n	8004190 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800418e:	e00b      	b.n	80041a8 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b08      	cmp	r3, #8
 8004194:	d104      	bne.n	80041a0 <HAL_TIM_PWM_Stop_DMA+0x188>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800419e:	e003      	b.n	80041a8 <HAL_TIM_PWM_Stop_DMA+0x190>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40010000 	.word	0x40010000
 80041b8:	40010400 	.word	0x40010400

080041bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e0ae      	b.n	8004338 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b0c      	cmp	r3, #12
 80041e6:	f200 809f 	bhi.w	8004328 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041ea:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	08004225 	.word	0x08004225
 80041f4:	08004329 	.word	0x08004329
 80041f8:	08004329 	.word	0x08004329
 80041fc:	08004329 	.word	0x08004329
 8004200:	08004265 	.word	0x08004265
 8004204:	08004329 	.word	0x08004329
 8004208:	08004329 	.word	0x08004329
 800420c:	08004329 	.word	0x08004329
 8004210:	080042a7 	.word	0x080042a7
 8004214:	08004329 	.word	0x08004329
 8004218:	08004329 	.word	0x08004329
 800421c:	08004329 	.word	0x08004329
 8004220:	080042e7 	.word	0x080042e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fa0e 	bl	800464c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0208 	orr.w	r2, r2, #8
 800423e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0204 	bic.w	r2, r2, #4
 800424e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6999      	ldr	r1, [r3, #24]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	619a      	str	r2, [r3, #24]
      break;
 8004262:	e064      	b.n	800432e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fa5e 	bl	800472c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800427e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6999      	ldr	r1, [r3, #24]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	021a      	lsls	r2, r3, #8
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	619a      	str	r2, [r3, #24]
      break;
 80042a4:	e043      	b.n	800432e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fab3 	bl	8004818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0208 	orr.w	r2, r2, #8
 80042c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0204 	bic.w	r2, r2, #4
 80042d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69d9      	ldr	r1, [r3, #28]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	61da      	str	r2, [r3, #28]
      break;
 80042e4:	e023      	b.n	800432e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fb07 	bl	8004900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69da      	ldr	r2, [r3, #28]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69d9      	ldr	r1, [r3, #28]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	021a      	lsls	r2, r3, #8
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	61da      	str	r2, [r3, #28]
      break;
 8004326:	e002      	b.n	800432e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	75fb      	strb	r3, [r7, #23]
      break;
 800432c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004336:	7dfb      	ldrb	r3, [r7, #23]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	d107      	bne.n	8004390 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800438e:	e02a      	b.n	80043e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	429a      	cmp	r2, r3
 8004398:	d107      	bne.n	80043aa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2202      	movs	r2, #2
 800439e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a8:	e01d      	b.n	80043e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d107      	bne.n	80043c4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2204      	movs	r2, #4
 80043b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c2:	e010      	b.n	80043e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d107      	bne.n	80043de <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2208      	movs	r2, #8
 80043d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043dc:	e003      	b.n	80043e6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f7ff ffb4 	bl	8004354 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	771a      	strb	r2, [r3, #28]
}
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	429a      	cmp	r2, r3
 8004410:	d10b      	bne.n	800442a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d136      	bne.n	800448e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004428:	e031      	b.n	800448e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	d10b      	bne.n	800444c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2202      	movs	r2, #2
 8004438:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d125      	bne.n	800448e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800444a:	e020      	b.n	800448e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	429a      	cmp	r2, r3
 8004454:	d10b      	bne.n	800446e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2204      	movs	r2, #4
 800445a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d114      	bne.n	800448e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800446c:	e00f      	b.n	800448e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	429a      	cmp	r2, r3
 8004476:	d10a      	bne.n	800448e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2208      	movs	r2, #8
 800447c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d103      	bne.n	800448e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f7fc fd46 	bl	8000f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	771a      	strb	r2, [r3, #28]
}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d103      	bne.n	80044c2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	771a      	strb	r2, [r3, #28]
 80044c0:	e019      	b.n	80044f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d103      	bne.n	80044d4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2202      	movs	r2, #2
 80044d0:	771a      	strb	r2, [r3, #28]
 80044d2:	e010      	b.n	80044f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d103      	bne.n	80044e6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2204      	movs	r2, #4
 80044e2:	771a      	strb	r2, [r3, #28]
 80044e4:	e007      	b.n	80044f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d102      	bne.n	80044f6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2208      	movs	r2, #8
 80044f4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f7ff ff22 	bl	8004340 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	771a      	strb	r2, [r3, #28]
}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a40      	ldr	r2, [pc, #256]	; (8004620 <TIM_Base_SetConfig+0x114>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452a:	d00f      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a3d      	ldr	r2, [pc, #244]	; (8004624 <TIM_Base_SetConfig+0x118>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00b      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a3c      	ldr	r2, [pc, #240]	; (8004628 <TIM_Base_SetConfig+0x11c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d007      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a3b      	ldr	r2, [pc, #236]	; (800462c <TIM_Base_SetConfig+0x120>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d003      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a3a      	ldr	r2, [pc, #232]	; (8004630 <TIM_Base_SetConfig+0x124>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d108      	bne.n	800455e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a2f      	ldr	r2, [pc, #188]	; (8004620 <TIM_Base_SetConfig+0x114>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d02b      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456c:	d027      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2c      	ldr	r2, [pc, #176]	; (8004624 <TIM_Base_SetConfig+0x118>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d023      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a2b      	ldr	r2, [pc, #172]	; (8004628 <TIM_Base_SetConfig+0x11c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01f      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2a      	ldr	r2, [pc, #168]	; (800462c <TIM_Base_SetConfig+0x120>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01b      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a29      	ldr	r2, [pc, #164]	; (8004630 <TIM_Base_SetConfig+0x124>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d017      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a28      	ldr	r2, [pc, #160]	; (8004634 <TIM_Base_SetConfig+0x128>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a27      	ldr	r2, [pc, #156]	; (8004638 <TIM_Base_SetConfig+0x12c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00f      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a26      	ldr	r2, [pc, #152]	; (800463c <TIM_Base_SetConfig+0x130>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00b      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a25      	ldr	r2, [pc, #148]	; (8004640 <TIM_Base_SetConfig+0x134>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d007      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a24      	ldr	r2, [pc, #144]	; (8004644 <TIM_Base_SetConfig+0x138>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a23      	ldr	r2, [pc, #140]	; (8004648 <TIM_Base_SetConfig+0x13c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d108      	bne.n	80045d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <TIM_Base_SetConfig+0x114>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d003      	beq.n	8004604 <TIM_Base_SetConfig+0xf8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a0c      	ldr	r2, [pc, #48]	; (8004630 <TIM_Base_SetConfig+0x124>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d103      	bne.n	800460c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	615a      	str	r2, [r3, #20]
}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40010000 	.word	0x40010000
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800
 800462c:	40000c00 	.word	0x40000c00
 8004630:	40010400 	.word	0x40010400
 8004634:	40014000 	.word	0x40014000
 8004638:	40014400 	.word	0x40014400
 800463c:	40014800 	.word	0x40014800
 8004640:	40001800 	.word	0x40001800
 8004644:	40001c00 	.word	0x40001c00
 8004648:	40002000 	.word	0x40002000

0800464c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f023 0201 	bic.w	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f023 0302 	bic.w	r3, r3, #2
 8004694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a20      	ldr	r2, [pc, #128]	; (8004724 <TIM_OC1_SetConfig+0xd8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_OC1_SetConfig+0x64>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a1f      	ldr	r2, [pc, #124]	; (8004728 <TIM_OC1_SetConfig+0xdc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d10c      	bne.n	80046ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f023 0308 	bic.w	r3, r3, #8
 80046b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f023 0304 	bic.w	r3, r3, #4
 80046c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a15      	ldr	r2, [pc, #84]	; (8004724 <TIM_OC1_SetConfig+0xd8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d003      	beq.n	80046da <TIM_OC1_SetConfig+0x8e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <TIM_OC1_SetConfig+0xdc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d111      	bne.n	80046fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	621a      	str	r2, [r3, #32]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40010000 	.word	0x40010000
 8004728:	40010400 	.word	0x40010400

0800472c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f023 0210 	bic.w	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f023 0320 	bic.w	r3, r3, #32
 8004776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a22      	ldr	r2, [pc, #136]	; (8004810 <TIM_OC2_SetConfig+0xe4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_OC2_SetConfig+0x68>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a21      	ldr	r2, [pc, #132]	; (8004814 <TIM_OC2_SetConfig+0xe8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d10d      	bne.n	80047b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a17      	ldr	r2, [pc, #92]	; (8004810 <TIM_OC2_SetConfig+0xe4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <TIM_OC2_SetConfig+0x94>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a16      	ldr	r2, [pc, #88]	; (8004814 <TIM_OC2_SetConfig+0xe8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d113      	bne.n	80047e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	621a      	str	r2, [r3, #32]
}
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40010000 	.word	0x40010000
 8004814:	40010400 	.word	0x40010400

08004818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0303 	bic.w	r3, r3, #3
 800484e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a21      	ldr	r2, [pc, #132]	; (80048f8 <TIM_OC3_SetConfig+0xe0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_OC3_SetConfig+0x66>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a20      	ldr	r2, [pc, #128]	; (80048fc <TIM_OC3_SetConfig+0xe4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10d      	bne.n	800489a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a16      	ldr	r2, [pc, #88]	; (80048f8 <TIM_OC3_SetConfig+0xe0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d003      	beq.n	80048aa <TIM_OC3_SetConfig+0x92>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a15      	ldr	r2, [pc, #84]	; (80048fc <TIM_OC3_SetConfig+0xe4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d113      	bne.n	80048d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	621a      	str	r2, [r3, #32]
}
 80048ec:	bf00      	nop
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	40010000 	.word	0x40010000
 80048fc:	40010400 	.word	0x40010400

08004900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800494a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	031b      	lsls	r3, r3, #12
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <TIM_OC4_SetConfig+0xa4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_OC4_SetConfig+0x68>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a11      	ldr	r2, [pc, #68]	; (80049a8 <TIM_OC4_SetConfig+0xa8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d109      	bne.n	800497c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800496e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	019b      	lsls	r3, r3, #6
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40010400 	.word	0x40010400

080049ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	2201      	movs	r2, #1
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a1a      	ldr	r2, [r3, #32]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	43db      	mvns	r3, r3
 80049ce:	401a      	ands	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a1a      	ldr	r2, [r3, #32]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	fa01 f303 	lsl.w	r3, r1, r3
 80049e4:	431a      	orrs	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e05a      	b.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a21      	ldr	r2, [pc, #132]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d022      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5c:	d01d      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1d      	ldr	r2, [pc, #116]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d018      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1a      	ldr	r2, [pc, #104]	; (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00e      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a18      	ldr	r2, [pc, #96]	; (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d009      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a17      	ldr	r2, [pc, #92]	; (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a15      	ldr	r2, [pc, #84]	; (8004aec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d10c      	bne.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	40000400 	.word	0x40000400
 8004adc:	40000800 	.word	0x40000800
 8004ae0:	40000c00 	.word	0x40000c00
 8004ae4:	40010400 	.word	0x40010400
 8004ae8:	40014000 	.word	0x40014000
 8004aec:	40001800 	.word	0x40001800

08004af0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e03d      	b.n	8004b88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e03f      	b.n	8004c26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fd fa02 	bl	8001fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2224      	movs	r2, #36	; 0x24
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f9cb 	bl	8004f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695a      	ldr	r2, [r3, #20]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b08a      	sub	sp, #40	; 0x28
 8004c32:	af02      	add	r7, sp, #8
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	603b      	str	r3, [r7, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d17c      	bne.n	8004d48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_UART_Transmit+0x2c>
 8004c54:	88fb      	ldrh	r3, [r7, #6]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e075      	b.n	8004d4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_UART_Transmit+0x3e>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e06e      	b.n	8004d4a <HAL_UART_Transmit+0x11c>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2221      	movs	r2, #33	; 0x21
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c82:	f7fd fb61 	bl	8002348 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	88fa      	ldrh	r2, [r7, #6]
 8004c92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9c:	d108      	bne.n	8004cb0 <HAL_UART_Transmit+0x82>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d104      	bne.n	8004cb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	e003      	b.n	8004cb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004cc0:	e02a      	b.n	8004d18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2180      	movs	r1, #128	; 0x80
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f8e2 	bl	8004e96 <UART_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e036      	b.n	8004d4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	e007      	b.n	8004d0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	781a      	ldrb	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	3301      	adds	r3, #1
 8004d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1cf      	bne.n	8004cc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2140      	movs	r1, #64	; 0x40
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f8b2 	bl	8004e96 <UART_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e006      	b.n	8004d4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e000      	b.n	8004d4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b08a      	sub	sp, #40	; 0x28
 8004d56:	af02      	add	r7, sp, #8
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	f040 808c 	bne.w	8004e8c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_UART_Receive+0x2e>
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e084      	b.n	8004e8e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Receive+0x40>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e07d      	b.n	8004e8e <HAL_UART_Receive+0x13c>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2222      	movs	r2, #34	; 0x22
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dae:	f7fd facb 	bl	8002348 <HAL_GetTick>
 8004db2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	88fa      	ldrh	r2, [r7, #6]
 8004dbe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc8:	d108      	bne.n	8004ddc <HAL_UART_Receive+0x8a>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d104      	bne.n	8004ddc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	e003      	b.n	8004de4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004dec:	e043      	b.n	8004e76 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2200      	movs	r2, #0
 8004df6:	2120      	movs	r1, #32
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f84c 	bl	8004e96 <UART_WaitOnFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e042      	b.n	8004e8e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10c      	bne.n	8004e28 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	3302      	adds	r3, #2
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	e01f      	b.n	8004e68 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e30:	d007      	beq.n	8004e42 <HAL_UART_Receive+0xf0>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <HAL_UART_Receive+0xfe>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e008      	b.n	8004e62 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	3301      	adds	r3, #1
 8004e66:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1b6      	bne.n	8004dee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b090      	sub	sp, #64	; 0x40
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea6:	e050      	b.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d04c      	beq.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eb6:	f7fd fa47 	bl	8002348 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d241      	bcs.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	330c      	adds	r3, #12
 8004ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ee6:	637a      	str	r2, [r7, #52]	; 0x34
 8004ee8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e5      	bne.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3314      	adds	r3, #20
 8004f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	613b      	str	r3, [r7, #16]
   return(result);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3314      	adds	r3, #20
 8004f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f1a:	623a      	str	r2, [r7, #32]
 8004f1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	69f9      	ldr	r1, [r7, #28]
 8004f20:	6a3a      	ldr	r2, [r7, #32]
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e5      	bne.n	8004efa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e00f      	b.n	8004f6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4013      	ands	r3, r2
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	bf0c      	ite	eq
 8004f5a:	2301      	moveq	r3, #1
 8004f5c:	2300      	movne	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d09f      	beq.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3740      	adds	r7, #64	; 0x40
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f78:	b0c0      	sub	sp, #256	; 0x100
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f90:	68d9      	ldr	r1, [r3, #12]
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	ea40 0301 	orr.w	r3, r0, r1
 8004f9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fcc:	f021 010c 	bic.w	r1, r1, #12
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fee:	6999      	ldr	r1, [r3, #24]
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	ea40 0301 	orr.w	r3, r0, r1
 8004ffa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b8f      	ldr	r3, [pc, #572]	; (8005240 <UART_SetConfig+0x2cc>)
 8005004:	429a      	cmp	r2, r3
 8005006:	d005      	beq.n	8005014 <UART_SetConfig+0xa0>
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b8d      	ldr	r3, [pc, #564]	; (8005244 <UART_SetConfig+0x2d0>)
 8005010:	429a      	cmp	r2, r3
 8005012:	d104      	bne.n	800501e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005014:	f7fe f906 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 8005018:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800501c:	e003      	b.n	8005026 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800501e:	f7fe f8ed 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8005022:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005030:	f040 810c 	bne.w	800524c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005038:	2200      	movs	r2, #0
 800503a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800503e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005042:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005046:	4622      	mov	r2, r4
 8005048:	462b      	mov	r3, r5
 800504a:	1891      	adds	r1, r2, r2
 800504c:	65b9      	str	r1, [r7, #88]	; 0x58
 800504e:	415b      	adcs	r3, r3
 8005050:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005052:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005056:	4621      	mov	r1, r4
 8005058:	eb12 0801 	adds.w	r8, r2, r1
 800505c:	4629      	mov	r1, r5
 800505e:	eb43 0901 	adc.w	r9, r3, r1
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800506e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005076:	4690      	mov	r8, r2
 8005078:	4699      	mov	r9, r3
 800507a:	4623      	mov	r3, r4
 800507c:	eb18 0303 	adds.w	r3, r8, r3
 8005080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005084:	462b      	mov	r3, r5
 8005086:	eb49 0303 	adc.w	r3, r9, r3
 800508a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800508e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800509a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800509e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050a2:	460b      	mov	r3, r1
 80050a4:	18db      	adds	r3, r3, r3
 80050a6:	653b      	str	r3, [r7, #80]	; 0x50
 80050a8:	4613      	mov	r3, r2
 80050aa:	eb42 0303 	adc.w	r3, r2, r3
 80050ae:	657b      	str	r3, [r7, #84]	; 0x54
 80050b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050b8:	f7fb fd94 	bl	8000be4 <__aeabi_uldivmod>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4b61      	ldr	r3, [pc, #388]	; (8005248 <UART_SetConfig+0x2d4>)
 80050c2:	fba3 2302 	umull	r2, r3, r3, r2
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	011c      	lsls	r4, r3, #4
 80050ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050dc:	4642      	mov	r2, r8
 80050de:	464b      	mov	r3, r9
 80050e0:	1891      	adds	r1, r2, r2
 80050e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80050e4:	415b      	adcs	r3, r3
 80050e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050ec:	4641      	mov	r1, r8
 80050ee:	eb12 0a01 	adds.w	sl, r2, r1
 80050f2:	4649      	mov	r1, r9
 80050f4:	eb43 0b01 	adc.w	fp, r3, r1
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005104:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800510c:	4692      	mov	sl, r2
 800510e:	469b      	mov	fp, r3
 8005110:	4643      	mov	r3, r8
 8005112:	eb1a 0303 	adds.w	r3, sl, r3
 8005116:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800511a:	464b      	mov	r3, r9
 800511c:	eb4b 0303 	adc.w	r3, fp, r3
 8005120:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005130:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005134:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005138:	460b      	mov	r3, r1
 800513a:	18db      	adds	r3, r3, r3
 800513c:	643b      	str	r3, [r7, #64]	; 0x40
 800513e:	4613      	mov	r3, r2
 8005140:	eb42 0303 	adc.w	r3, r2, r3
 8005144:	647b      	str	r3, [r7, #68]	; 0x44
 8005146:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800514a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800514e:	f7fb fd49 	bl	8000be4 <__aeabi_uldivmod>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4611      	mov	r1, r2
 8005158:	4b3b      	ldr	r3, [pc, #236]	; (8005248 <UART_SetConfig+0x2d4>)
 800515a:	fba3 2301 	umull	r2, r3, r3, r1
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	2264      	movs	r2, #100	; 0x64
 8005162:	fb02 f303 	mul.w	r3, r2, r3
 8005166:	1acb      	subs	r3, r1, r3
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800516e:	4b36      	ldr	r3, [pc, #216]	; (8005248 <UART_SetConfig+0x2d4>)
 8005170:	fba3 2302 	umull	r2, r3, r3, r2
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800517c:	441c      	add	r4, r3
 800517e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005182:	2200      	movs	r2, #0
 8005184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005188:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800518c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005190:	4642      	mov	r2, r8
 8005192:	464b      	mov	r3, r9
 8005194:	1891      	adds	r1, r2, r2
 8005196:	63b9      	str	r1, [r7, #56]	; 0x38
 8005198:	415b      	adcs	r3, r3
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800519c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051a0:	4641      	mov	r1, r8
 80051a2:	1851      	adds	r1, r2, r1
 80051a4:	6339      	str	r1, [r7, #48]	; 0x30
 80051a6:	4649      	mov	r1, r9
 80051a8:	414b      	adcs	r3, r1
 80051aa:	637b      	str	r3, [r7, #52]	; 0x34
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051b8:	4659      	mov	r1, fp
 80051ba:	00cb      	lsls	r3, r1, #3
 80051bc:	4651      	mov	r1, sl
 80051be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051c2:	4651      	mov	r1, sl
 80051c4:	00ca      	lsls	r2, r1, #3
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	4642      	mov	r2, r8
 80051ce:	189b      	adds	r3, r3, r2
 80051d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051d4:	464b      	mov	r3, r9
 80051d6:	460a      	mov	r2, r1
 80051d8:	eb42 0303 	adc.w	r3, r2, r3
 80051dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051f4:	460b      	mov	r3, r1
 80051f6:	18db      	adds	r3, r3, r3
 80051f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051fa:	4613      	mov	r3, r2
 80051fc:	eb42 0303 	adc.w	r3, r2, r3
 8005200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005206:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800520a:	f7fb fceb 	bl	8000be4 <__aeabi_uldivmod>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <UART_SetConfig+0x2d4>)
 8005214:	fba3 1302 	umull	r1, r3, r3, r2
 8005218:	095b      	lsrs	r3, r3, #5
 800521a:	2164      	movs	r1, #100	; 0x64
 800521c:	fb01 f303 	mul.w	r3, r1, r3
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	3332      	adds	r3, #50	; 0x32
 8005226:	4a08      	ldr	r2, [pc, #32]	; (8005248 <UART_SetConfig+0x2d4>)
 8005228:	fba2 2303 	umull	r2, r3, r2, r3
 800522c:	095b      	lsrs	r3, r3, #5
 800522e:	f003 0207 	and.w	r2, r3, #7
 8005232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4422      	add	r2, r4
 800523a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800523c:	e106      	b.n	800544c <UART_SetConfig+0x4d8>
 800523e:	bf00      	nop
 8005240:	40011000 	.word	0x40011000
 8005244:	40011400 	.word	0x40011400
 8005248:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800524c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005250:	2200      	movs	r2, #0
 8005252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005256:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800525a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800525e:	4642      	mov	r2, r8
 8005260:	464b      	mov	r3, r9
 8005262:	1891      	adds	r1, r2, r2
 8005264:	6239      	str	r1, [r7, #32]
 8005266:	415b      	adcs	r3, r3
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
 800526a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800526e:	4641      	mov	r1, r8
 8005270:	1854      	adds	r4, r2, r1
 8005272:	4649      	mov	r1, r9
 8005274:	eb43 0501 	adc.w	r5, r3, r1
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	00eb      	lsls	r3, r5, #3
 8005282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005286:	00e2      	lsls	r2, r4, #3
 8005288:	4614      	mov	r4, r2
 800528a:	461d      	mov	r5, r3
 800528c:	4643      	mov	r3, r8
 800528e:	18e3      	adds	r3, r4, r3
 8005290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005294:	464b      	mov	r3, r9
 8005296:	eb45 0303 	adc.w	r3, r5, r3
 800529a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800529e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052ba:	4629      	mov	r1, r5
 80052bc:	008b      	lsls	r3, r1, #2
 80052be:	4621      	mov	r1, r4
 80052c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052c4:	4621      	mov	r1, r4
 80052c6:	008a      	lsls	r2, r1, #2
 80052c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052cc:	f7fb fc8a 	bl	8000be4 <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4b60      	ldr	r3, [pc, #384]	; (8005458 <UART_SetConfig+0x4e4>)
 80052d6:	fba3 2302 	umull	r2, r3, r3, r2
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	011c      	lsls	r4, r3, #4
 80052de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052f0:	4642      	mov	r2, r8
 80052f2:	464b      	mov	r3, r9
 80052f4:	1891      	adds	r1, r2, r2
 80052f6:	61b9      	str	r1, [r7, #24]
 80052f8:	415b      	adcs	r3, r3
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005300:	4641      	mov	r1, r8
 8005302:	1851      	adds	r1, r2, r1
 8005304:	6139      	str	r1, [r7, #16]
 8005306:	4649      	mov	r1, r9
 8005308:	414b      	adcs	r3, r1
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005318:	4659      	mov	r1, fp
 800531a:	00cb      	lsls	r3, r1, #3
 800531c:	4651      	mov	r1, sl
 800531e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005322:	4651      	mov	r1, sl
 8005324:	00ca      	lsls	r2, r1, #3
 8005326:	4610      	mov	r0, r2
 8005328:	4619      	mov	r1, r3
 800532a:	4603      	mov	r3, r0
 800532c:	4642      	mov	r2, r8
 800532e:	189b      	adds	r3, r3, r2
 8005330:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005334:	464b      	mov	r3, r9
 8005336:	460a      	mov	r2, r1
 8005338:	eb42 0303 	adc.w	r3, r2, r3
 800533c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	67bb      	str	r3, [r7, #120]	; 0x78
 800534a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005358:	4649      	mov	r1, r9
 800535a:	008b      	lsls	r3, r1, #2
 800535c:	4641      	mov	r1, r8
 800535e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005362:	4641      	mov	r1, r8
 8005364:	008a      	lsls	r2, r1, #2
 8005366:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800536a:	f7fb fc3b 	bl	8000be4 <__aeabi_uldivmod>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4611      	mov	r1, r2
 8005374:	4b38      	ldr	r3, [pc, #224]	; (8005458 <UART_SetConfig+0x4e4>)
 8005376:	fba3 2301 	umull	r2, r3, r3, r1
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	2264      	movs	r2, #100	; 0x64
 800537e:	fb02 f303 	mul.w	r3, r2, r3
 8005382:	1acb      	subs	r3, r1, r3
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	3332      	adds	r3, #50	; 0x32
 8005388:	4a33      	ldr	r2, [pc, #204]	; (8005458 <UART_SetConfig+0x4e4>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005394:	441c      	add	r4, r3
 8005396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800539a:	2200      	movs	r2, #0
 800539c:	673b      	str	r3, [r7, #112]	; 0x70
 800539e:	677a      	str	r2, [r7, #116]	; 0x74
 80053a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	1891      	adds	r1, r2, r2
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	415b      	adcs	r3, r3
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053b4:	4641      	mov	r1, r8
 80053b6:	1851      	adds	r1, r2, r1
 80053b8:	6039      	str	r1, [r7, #0]
 80053ba:	4649      	mov	r1, r9
 80053bc:	414b      	adcs	r3, r1
 80053be:	607b      	str	r3, [r7, #4]
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053cc:	4659      	mov	r1, fp
 80053ce:	00cb      	lsls	r3, r1, #3
 80053d0:	4651      	mov	r1, sl
 80053d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053d6:	4651      	mov	r1, sl
 80053d8:	00ca      	lsls	r2, r1, #3
 80053da:	4610      	mov	r0, r2
 80053dc:	4619      	mov	r1, r3
 80053de:	4603      	mov	r3, r0
 80053e0:	4642      	mov	r2, r8
 80053e2:	189b      	adds	r3, r3, r2
 80053e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80053e6:	464b      	mov	r3, r9
 80053e8:	460a      	mov	r2, r1
 80053ea:	eb42 0303 	adc.w	r3, r2, r3
 80053ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	663b      	str	r3, [r7, #96]	; 0x60
 80053fa:	667a      	str	r2, [r7, #100]	; 0x64
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005408:	4649      	mov	r1, r9
 800540a:	008b      	lsls	r3, r1, #2
 800540c:	4641      	mov	r1, r8
 800540e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005412:	4641      	mov	r1, r8
 8005414:	008a      	lsls	r2, r1, #2
 8005416:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800541a:	f7fb fbe3 	bl	8000be4 <__aeabi_uldivmod>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <UART_SetConfig+0x4e4>)
 8005424:	fba3 1302 	umull	r1, r3, r3, r2
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	2164      	movs	r1, #100	; 0x64
 800542c:	fb01 f303 	mul.w	r3, r1, r3
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	3332      	adds	r3, #50	; 0x32
 8005436:	4a08      	ldr	r2, [pc, #32]	; (8005458 <UART_SetConfig+0x4e4>)
 8005438:	fba2 2303 	umull	r2, r3, r2, r3
 800543c:	095b      	lsrs	r3, r3, #5
 800543e:	f003 020f 	and.w	r2, r3, #15
 8005442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4422      	add	r2, r4
 800544a:	609a      	str	r2, [r3, #8]
}
 800544c:	bf00      	nop
 800544e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005452:	46bd      	mov	sp, r7
 8005454:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005458:	51eb851f 	.word	0x51eb851f

0800545c <std>:
 800545c:	2300      	movs	r3, #0
 800545e:	b510      	push	{r4, lr}
 8005460:	4604      	mov	r4, r0
 8005462:	e9c0 3300 	strd	r3, r3, [r0]
 8005466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800546a:	6083      	str	r3, [r0, #8]
 800546c:	8181      	strh	r1, [r0, #12]
 800546e:	6643      	str	r3, [r0, #100]	; 0x64
 8005470:	81c2      	strh	r2, [r0, #14]
 8005472:	6183      	str	r3, [r0, #24]
 8005474:	4619      	mov	r1, r3
 8005476:	2208      	movs	r2, #8
 8005478:	305c      	adds	r0, #92	; 0x5c
 800547a:	f000 f9e5 	bl	8005848 <memset>
 800547e:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <std+0x58>)
 8005480:	6263      	str	r3, [r4, #36]	; 0x24
 8005482:	4b0d      	ldr	r3, [pc, #52]	; (80054b8 <std+0x5c>)
 8005484:	62a3      	str	r3, [r4, #40]	; 0x28
 8005486:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <std+0x60>)
 8005488:	62e3      	str	r3, [r4, #44]	; 0x2c
 800548a:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <std+0x64>)
 800548c:	6323      	str	r3, [r4, #48]	; 0x30
 800548e:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <std+0x68>)
 8005490:	6224      	str	r4, [r4, #32]
 8005492:	429c      	cmp	r4, r3
 8005494:	d006      	beq.n	80054a4 <std+0x48>
 8005496:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800549a:	4294      	cmp	r4, r2
 800549c:	d002      	beq.n	80054a4 <std+0x48>
 800549e:	33d0      	adds	r3, #208	; 0xd0
 80054a0:	429c      	cmp	r4, r3
 80054a2:	d105      	bne.n	80054b0 <std+0x54>
 80054a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ac:	f000 ba44 	b.w	8005938 <__retarget_lock_init_recursive>
 80054b0:	bd10      	pop	{r4, pc}
 80054b2:	bf00      	nop
 80054b4:	08005699 	.word	0x08005699
 80054b8:	080056bb 	.word	0x080056bb
 80054bc:	080056f3 	.word	0x080056f3
 80054c0:	08005717 	.word	0x08005717
 80054c4:	20000f00 	.word	0x20000f00

080054c8 <stdio_exit_handler>:
 80054c8:	4a02      	ldr	r2, [pc, #8]	; (80054d4 <stdio_exit_handler+0xc>)
 80054ca:	4903      	ldr	r1, [pc, #12]	; (80054d8 <stdio_exit_handler+0x10>)
 80054cc:	4803      	ldr	r0, [pc, #12]	; (80054dc <stdio_exit_handler+0x14>)
 80054ce:	f000 b869 	b.w	80055a4 <_fwalk_sglue>
 80054d2:	bf00      	nop
 80054d4:	2000000c 	.word	0x2000000c
 80054d8:	08005c3d 	.word	0x08005c3d
 80054dc:	20000018 	.word	0x20000018

080054e0 <cleanup_stdio>:
 80054e0:	6841      	ldr	r1, [r0, #4]
 80054e2:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <cleanup_stdio+0x34>)
 80054e4:	4299      	cmp	r1, r3
 80054e6:	b510      	push	{r4, lr}
 80054e8:	4604      	mov	r4, r0
 80054ea:	d001      	beq.n	80054f0 <cleanup_stdio+0x10>
 80054ec:	f000 fba6 	bl	8005c3c <_fflush_r>
 80054f0:	68a1      	ldr	r1, [r4, #8]
 80054f2:	4b09      	ldr	r3, [pc, #36]	; (8005518 <cleanup_stdio+0x38>)
 80054f4:	4299      	cmp	r1, r3
 80054f6:	d002      	beq.n	80054fe <cleanup_stdio+0x1e>
 80054f8:	4620      	mov	r0, r4
 80054fa:	f000 fb9f 	bl	8005c3c <_fflush_r>
 80054fe:	68e1      	ldr	r1, [r4, #12]
 8005500:	4b06      	ldr	r3, [pc, #24]	; (800551c <cleanup_stdio+0x3c>)
 8005502:	4299      	cmp	r1, r3
 8005504:	d004      	beq.n	8005510 <cleanup_stdio+0x30>
 8005506:	4620      	mov	r0, r4
 8005508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800550c:	f000 bb96 	b.w	8005c3c <_fflush_r>
 8005510:	bd10      	pop	{r4, pc}
 8005512:	bf00      	nop
 8005514:	20000f00 	.word	0x20000f00
 8005518:	20000f68 	.word	0x20000f68
 800551c:	20000fd0 	.word	0x20000fd0

08005520 <global_stdio_init.part.0>:
 8005520:	b510      	push	{r4, lr}
 8005522:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <global_stdio_init.part.0+0x30>)
 8005524:	4c0b      	ldr	r4, [pc, #44]	; (8005554 <global_stdio_init.part.0+0x34>)
 8005526:	4a0c      	ldr	r2, [pc, #48]	; (8005558 <global_stdio_init.part.0+0x38>)
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	4620      	mov	r0, r4
 800552c:	2200      	movs	r2, #0
 800552e:	2104      	movs	r1, #4
 8005530:	f7ff ff94 	bl	800545c <std>
 8005534:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005538:	2201      	movs	r2, #1
 800553a:	2109      	movs	r1, #9
 800553c:	f7ff ff8e 	bl	800545c <std>
 8005540:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005544:	2202      	movs	r2, #2
 8005546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800554a:	2112      	movs	r1, #18
 800554c:	f7ff bf86 	b.w	800545c <std>
 8005550:	20001038 	.word	0x20001038
 8005554:	20000f00 	.word	0x20000f00
 8005558:	080054c9 	.word	0x080054c9

0800555c <__sfp_lock_acquire>:
 800555c:	4801      	ldr	r0, [pc, #4]	; (8005564 <__sfp_lock_acquire+0x8>)
 800555e:	f000 b9ec 	b.w	800593a <__retarget_lock_acquire_recursive>
 8005562:	bf00      	nop
 8005564:	20001041 	.word	0x20001041

08005568 <__sfp_lock_release>:
 8005568:	4801      	ldr	r0, [pc, #4]	; (8005570 <__sfp_lock_release+0x8>)
 800556a:	f000 b9e7 	b.w	800593c <__retarget_lock_release_recursive>
 800556e:	bf00      	nop
 8005570:	20001041 	.word	0x20001041

08005574 <__sinit>:
 8005574:	b510      	push	{r4, lr}
 8005576:	4604      	mov	r4, r0
 8005578:	f7ff fff0 	bl	800555c <__sfp_lock_acquire>
 800557c:	6a23      	ldr	r3, [r4, #32]
 800557e:	b11b      	cbz	r3, 8005588 <__sinit+0x14>
 8005580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005584:	f7ff bff0 	b.w	8005568 <__sfp_lock_release>
 8005588:	4b04      	ldr	r3, [pc, #16]	; (800559c <__sinit+0x28>)
 800558a:	6223      	str	r3, [r4, #32]
 800558c:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <__sinit+0x2c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f5      	bne.n	8005580 <__sinit+0xc>
 8005594:	f7ff ffc4 	bl	8005520 <global_stdio_init.part.0>
 8005598:	e7f2      	b.n	8005580 <__sinit+0xc>
 800559a:	bf00      	nop
 800559c:	080054e1 	.word	0x080054e1
 80055a0:	20001038 	.word	0x20001038

080055a4 <_fwalk_sglue>:
 80055a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055a8:	4607      	mov	r7, r0
 80055aa:	4688      	mov	r8, r1
 80055ac:	4614      	mov	r4, r2
 80055ae:	2600      	movs	r6, #0
 80055b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055b4:	f1b9 0901 	subs.w	r9, r9, #1
 80055b8:	d505      	bpl.n	80055c6 <_fwalk_sglue+0x22>
 80055ba:	6824      	ldr	r4, [r4, #0]
 80055bc:	2c00      	cmp	r4, #0
 80055be:	d1f7      	bne.n	80055b0 <_fwalk_sglue+0xc>
 80055c0:	4630      	mov	r0, r6
 80055c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055c6:	89ab      	ldrh	r3, [r5, #12]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d907      	bls.n	80055dc <_fwalk_sglue+0x38>
 80055cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055d0:	3301      	adds	r3, #1
 80055d2:	d003      	beq.n	80055dc <_fwalk_sglue+0x38>
 80055d4:	4629      	mov	r1, r5
 80055d6:	4638      	mov	r0, r7
 80055d8:	47c0      	blx	r8
 80055da:	4306      	orrs	r6, r0
 80055dc:	3568      	adds	r5, #104	; 0x68
 80055de:	e7e9      	b.n	80055b4 <_fwalk_sglue+0x10>

080055e0 <_puts_r>:
 80055e0:	6a03      	ldr	r3, [r0, #32]
 80055e2:	b570      	push	{r4, r5, r6, lr}
 80055e4:	6884      	ldr	r4, [r0, #8]
 80055e6:	4605      	mov	r5, r0
 80055e8:	460e      	mov	r6, r1
 80055ea:	b90b      	cbnz	r3, 80055f0 <_puts_r+0x10>
 80055ec:	f7ff ffc2 	bl	8005574 <__sinit>
 80055f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055f2:	07db      	lsls	r3, r3, #31
 80055f4:	d405      	bmi.n	8005602 <_puts_r+0x22>
 80055f6:	89a3      	ldrh	r3, [r4, #12]
 80055f8:	0598      	lsls	r0, r3, #22
 80055fa:	d402      	bmi.n	8005602 <_puts_r+0x22>
 80055fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055fe:	f000 f99c 	bl	800593a <__retarget_lock_acquire_recursive>
 8005602:	89a3      	ldrh	r3, [r4, #12]
 8005604:	0719      	lsls	r1, r3, #28
 8005606:	d513      	bpl.n	8005630 <_puts_r+0x50>
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	b18b      	cbz	r3, 8005630 <_puts_r+0x50>
 800560c:	3e01      	subs	r6, #1
 800560e:	68a3      	ldr	r3, [r4, #8]
 8005610:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005614:	3b01      	subs	r3, #1
 8005616:	60a3      	str	r3, [r4, #8]
 8005618:	b9e9      	cbnz	r1, 8005656 <_puts_r+0x76>
 800561a:	2b00      	cmp	r3, #0
 800561c:	da2e      	bge.n	800567c <_puts_r+0x9c>
 800561e:	4622      	mov	r2, r4
 8005620:	210a      	movs	r1, #10
 8005622:	4628      	mov	r0, r5
 8005624:	f000 f87b 	bl	800571e <__swbuf_r>
 8005628:	3001      	adds	r0, #1
 800562a:	d007      	beq.n	800563c <_puts_r+0x5c>
 800562c:	250a      	movs	r5, #10
 800562e:	e007      	b.n	8005640 <_puts_r+0x60>
 8005630:	4621      	mov	r1, r4
 8005632:	4628      	mov	r0, r5
 8005634:	f000 f8b0 	bl	8005798 <__swsetup_r>
 8005638:	2800      	cmp	r0, #0
 800563a:	d0e7      	beq.n	800560c <_puts_r+0x2c>
 800563c:	f04f 35ff 	mov.w	r5, #4294967295
 8005640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005642:	07da      	lsls	r2, r3, #31
 8005644:	d405      	bmi.n	8005652 <_puts_r+0x72>
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	059b      	lsls	r3, r3, #22
 800564a:	d402      	bmi.n	8005652 <_puts_r+0x72>
 800564c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800564e:	f000 f975 	bl	800593c <__retarget_lock_release_recursive>
 8005652:	4628      	mov	r0, r5
 8005654:	bd70      	pop	{r4, r5, r6, pc}
 8005656:	2b00      	cmp	r3, #0
 8005658:	da04      	bge.n	8005664 <_puts_r+0x84>
 800565a:	69a2      	ldr	r2, [r4, #24]
 800565c:	429a      	cmp	r2, r3
 800565e:	dc06      	bgt.n	800566e <_puts_r+0x8e>
 8005660:	290a      	cmp	r1, #10
 8005662:	d004      	beq.n	800566e <_puts_r+0x8e>
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	6022      	str	r2, [r4, #0]
 800566a:	7019      	strb	r1, [r3, #0]
 800566c:	e7cf      	b.n	800560e <_puts_r+0x2e>
 800566e:	4622      	mov	r2, r4
 8005670:	4628      	mov	r0, r5
 8005672:	f000 f854 	bl	800571e <__swbuf_r>
 8005676:	3001      	adds	r0, #1
 8005678:	d1c9      	bne.n	800560e <_puts_r+0x2e>
 800567a:	e7df      	b.n	800563c <_puts_r+0x5c>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	250a      	movs	r5, #10
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	6022      	str	r2, [r4, #0]
 8005684:	701d      	strb	r5, [r3, #0]
 8005686:	e7db      	b.n	8005640 <_puts_r+0x60>

08005688 <puts>:
 8005688:	4b02      	ldr	r3, [pc, #8]	; (8005694 <puts+0xc>)
 800568a:	4601      	mov	r1, r0
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	f7ff bfa7 	b.w	80055e0 <_puts_r>
 8005692:	bf00      	nop
 8005694:	20000064 	.word	0x20000064

08005698 <__sread>:
 8005698:	b510      	push	{r4, lr}
 800569a:	460c      	mov	r4, r1
 800569c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a0:	f000 f8fc 	bl	800589c <_read_r>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	bfab      	itete	ge
 80056a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056aa:	89a3      	ldrhlt	r3, [r4, #12]
 80056ac:	181b      	addge	r3, r3, r0
 80056ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056b2:	bfac      	ite	ge
 80056b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80056b6:	81a3      	strhlt	r3, [r4, #12]
 80056b8:	bd10      	pop	{r4, pc}

080056ba <__swrite>:
 80056ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056be:	461f      	mov	r7, r3
 80056c0:	898b      	ldrh	r3, [r1, #12]
 80056c2:	05db      	lsls	r3, r3, #23
 80056c4:	4605      	mov	r5, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	4616      	mov	r6, r2
 80056ca:	d505      	bpl.n	80056d8 <__swrite+0x1e>
 80056cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d0:	2302      	movs	r3, #2
 80056d2:	2200      	movs	r2, #0
 80056d4:	f000 f8d0 	bl	8005878 <_lseek_r>
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	4632      	mov	r2, r6
 80056e6:	463b      	mov	r3, r7
 80056e8:	4628      	mov	r0, r5
 80056ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ee:	f000 b8e7 	b.w	80058c0 <_write_r>

080056f2 <__sseek>:
 80056f2:	b510      	push	{r4, lr}
 80056f4:	460c      	mov	r4, r1
 80056f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056fa:	f000 f8bd 	bl	8005878 <_lseek_r>
 80056fe:	1c43      	adds	r3, r0, #1
 8005700:	89a3      	ldrh	r3, [r4, #12]
 8005702:	bf15      	itete	ne
 8005704:	6560      	strne	r0, [r4, #84]	; 0x54
 8005706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800570a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800570e:	81a3      	strheq	r3, [r4, #12]
 8005710:	bf18      	it	ne
 8005712:	81a3      	strhne	r3, [r4, #12]
 8005714:	bd10      	pop	{r4, pc}

08005716 <__sclose>:
 8005716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800571a:	f000 b89d 	b.w	8005858 <_close_r>

0800571e <__swbuf_r>:
 800571e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005720:	460e      	mov	r6, r1
 8005722:	4614      	mov	r4, r2
 8005724:	4605      	mov	r5, r0
 8005726:	b118      	cbz	r0, 8005730 <__swbuf_r+0x12>
 8005728:	6a03      	ldr	r3, [r0, #32]
 800572a:	b90b      	cbnz	r3, 8005730 <__swbuf_r+0x12>
 800572c:	f7ff ff22 	bl	8005574 <__sinit>
 8005730:	69a3      	ldr	r3, [r4, #24]
 8005732:	60a3      	str	r3, [r4, #8]
 8005734:	89a3      	ldrh	r3, [r4, #12]
 8005736:	071a      	lsls	r2, r3, #28
 8005738:	d525      	bpl.n	8005786 <__swbuf_r+0x68>
 800573a:	6923      	ldr	r3, [r4, #16]
 800573c:	b31b      	cbz	r3, 8005786 <__swbuf_r+0x68>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	6922      	ldr	r2, [r4, #16]
 8005742:	1a98      	subs	r0, r3, r2
 8005744:	6963      	ldr	r3, [r4, #20]
 8005746:	b2f6      	uxtb	r6, r6
 8005748:	4283      	cmp	r3, r0
 800574a:	4637      	mov	r7, r6
 800574c:	dc04      	bgt.n	8005758 <__swbuf_r+0x3a>
 800574e:	4621      	mov	r1, r4
 8005750:	4628      	mov	r0, r5
 8005752:	f000 fa73 	bl	8005c3c <_fflush_r>
 8005756:	b9e0      	cbnz	r0, 8005792 <__swbuf_r+0x74>
 8005758:	68a3      	ldr	r3, [r4, #8]
 800575a:	3b01      	subs	r3, #1
 800575c:	60a3      	str	r3, [r4, #8]
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	6022      	str	r2, [r4, #0]
 8005764:	701e      	strb	r6, [r3, #0]
 8005766:	6962      	ldr	r2, [r4, #20]
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	429a      	cmp	r2, r3
 800576c:	d004      	beq.n	8005778 <__swbuf_r+0x5a>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	07db      	lsls	r3, r3, #31
 8005772:	d506      	bpl.n	8005782 <__swbuf_r+0x64>
 8005774:	2e0a      	cmp	r6, #10
 8005776:	d104      	bne.n	8005782 <__swbuf_r+0x64>
 8005778:	4621      	mov	r1, r4
 800577a:	4628      	mov	r0, r5
 800577c:	f000 fa5e 	bl	8005c3c <_fflush_r>
 8005780:	b938      	cbnz	r0, 8005792 <__swbuf_r+0x74>
 8005782:	4638      	mov	r0, r7
 8005784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005786:	4621      	mov	r1, r4
 8005788:	4628      	mov	r0, r5
 800578a:	f000 f805 	bl	8005798 <__swsetup_r>
 800578e:	2800      	cmp	r0, #0
 8005790:	d0d5      	beq.n	800573e <__swbuf_r+0x20>
 8005792:	f04f 37ff 	mov.w	r7, #4294967295
 8005796:	e7f4      	b.n	8005782 <__swbuf_r+0x64>

08005798 <__swsetup_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4b2a      	ldr	r3, [pc, #168]	; (8005844 <__swsetup_r+0xac>)
 800579c:	4605      	mov	r5, r0
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	460c      	mov	r4, r1
 80057a2:	b118      	cbz	r0, 80057ac <__swsetup_r+0x14>
 80057a4:	6a03      	ldr	r3, [r0, #32]
 80057a6:	b90b      	cbnz	r3, 80057ac <__swsetup_r+0x14>
 80057a8:	f7ff fee4 	bl	8005574 <__sinit>
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057b2:	0718      	lsls	r0, r3, #28
 80057b4:	d422      	bmi.n	80057fc <__swsetup_r+0x64>
 80057b6:	06d9      	lsls	r1, r3, #27
 80057b8:	d407      	bmi.n	80057ca <__swsetup_r+0x32>
 80057ba:	2309      	movs	r3, #9
 80057bc:	602b      	str	r3, [r5, #0]
 80057be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057c2:	81a3      	strh	r3, [r4, #12]
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295
 80057c8:	e034      	b.n	8005834 <__swsetup_r+0x9c>
 80057ca:	0758      	lsls	r0, r3, #29
 80057cc:	d512      	bpl.n	80057f4 <__swsetup_r+0x5c>
 80057ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057d0:	b141      	cbz	r1, 80057e4 <__swsetup_r+0x4c>
 80057d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057d6:	4299      	cmp	r1, r3
 80057d8:	d002      	beq.n	80057e0 <__swsetup_r+0x48>
 80057da:	4628      	mov	r0, r5
 80057dc:	f000 f8b0 	bl	8005940 <_free_r>
 80057e0:	2300      	movs	r3, #0
 80057e2:	6363      	str	r3, [r4, #52]	; 0x34
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	2300      	movs	r3, #0
 80057ee:	6063      	str	r3, [r4, #4]
 80057f0:	6923      	ldr	r3, [r4, #16]
 80057f2:	6023      	str	r3, [r4, #0]
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	f043 0308 	orr.w	r3, r3, #8
 80057fa:	81a3      	strh	r3, [r4, #12]
 80057fc:	6923      	ldr	r3, [r4, #16]
 80057fe:	b94b      	cbnz	r3, 8005814 <__swsetup_r+0x7c>
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800580a:	d003      	beq.n	8005814 <__swsetup_r+0x7c>
 800580c:	4621      	mov	r1, r4
 800580e:	4628      	mov	r0, r5
 8005810:	f000 fa62 	bl	8005cd8 <__smakebuf_r>
 8005814:	89a0      	ldrh	r0, [r4, #12]
 8005816:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800581a:	f010 0301 	ands.w	r3, r0, #1
 800581e:	d00a      	beq.n	8005836 <__swsetup_r+0x9e>
 8005820:	2300      	movs	r3, #0
 8005822:	60a3      	str	r3, [r4, #8]
 8005824:	6963      	ldr	r3, [r4, #20]
 8005826:	425b      	negs	r3, r3
 8005828:	61a3      	str	r3, [r4, #24]
 800582a:	6923      	ldr	r3, [r4, #16]
 800582c:	b943      	cbnz	r3, 8005840 <__swsetup_r+0xa8>
 800582e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005832:	d1c4      	bne.n	80057be <__swsetup_r+0x26>
 8005834:	bd38      	pop	{r3, r4, r5, pc}
 8005836:	0781      	lsls	r1, r0, #30
 8005838:	bf58      	it	pl
 800583a:	6963      	ldrpl	r3, [r4, #20]
 800583c:	60a3      	str	r3, [r4, #8]
 800583e:	e7f4      	b.n	800582a <__swsetup_r+0x92>
 8005840:	2000      	movs	r0, #0
 8005842:	e7f7      	b.n	8005834 <__swsetup_r+0x9c>
 8005844:	20000064 	.word	0x20000064

08005848 <memset>:
 8005848:	4402      	add	r2, r0
 800584a:	4603      	mov	r3, r0
 800584c:	4293      	cmp	r3, r2
 800584e:	d100      	bne.n	8005852 <memset+0xa>
 8005850:	4770      	bx	lr
 8005852:	f803 1b01 	strb.w	r1, [r3], #1
 8005856:	e7f9      	b.n	800584c <memset+0x4>

08005858 <_close_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	4d06      	ldr	r5, [pc, #24]	; (8005874 <_close_r+0x1c>)
 800585c:	2300      	movs	r3, #0
 800585e:	4604      	mov	r4, r0
 8005860:	4608      	mov	r0, r1
 8005862:	602b      	str	r3, [r5, #0]
 8005864:	f7fc fc63 	bl	800212e <_close>
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d102      	bne.n	8005872 <_close_r+0x1a>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	b103      	cbz	r3, 8005872 <_close_r+0x1a>
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	2000103c 	.word	0x2000103c

08005878 <_lseek_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4d07      	ldr	r5, [pc, #28]	; (8005898 <_lseek_r+0x20>)
 800587c:	4604      	mov	r4, r0
 800587e:	4608      	mov	r0, r1
 8005880:	4611      	mov	r1, r2
 8005882:	2200      	movs	r2, #0
 8005884:	602a      	str	r2, [r5, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	f7fc fc78 	bl	800217c <_lseek>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d102      	bne.n	8005896 <_lseek_r+0x1e>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	b103      	cbz	r3, 8005896 <_lseek_r+0x1e>
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	2000103c 	.word	0x2000103c

0800589c <_read_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4d07      	ldr	r5, [pc, #28]	; (80058bc <_read_r+0x20>)
 80058a0:	4604      	mov	r4, r0
 80058a2:	4608      	mov	r0, r1
 80058a4:	4611      	mov	r1, r2
 80058a6:	2200      	movs	r2, #0
 80058a8:	602a      	str	r2, [r5, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f7fc fc06 	bl	80020bc <_read>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d102      	bne.n	80058ba <_read_r+0x1e>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	b103      	cbz	r3, 80058ba <_read_r+0x1e>
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	2000103c 	.word	0x2000103c

080058c0 <_write_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4d07      	ldr	r5, [pc, #28]	; (80058e0 <_write_r+0x20>)
 80058c4:	4604      	mov	r4, r0
 80058c6:	4608      	mov	r0, r1
 80058c8:	4611      	mov	r1, r2
 80058ca:	2200      	movs	r2, #0
 80058cc:	602a      	str	r2, [r5, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f7fc fc11 	bl	80020f6 <_write>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_write_r+0x1e>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b103      	cbz	r3, 80058de <_write_r+0x1e>
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	2000103c 	.word	0x2000103c

080058e4 <__errno>:
 80058e4:	4b01      	ldr	r3, [pc, #4]	; (80058ec <__errno+0x8>)
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	20000064 	.word	0x20000064

080058f0 <__libc_init_array>:
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	4d0d      	ldr	r5, [pc, #52]	; (8005928 <__libc_init_array+0x38>)
 80058f4:	4c0d      	ldr	r4, [pc, #52]	; (800592c <__libc_init_array+0x3c>)
 80058f6:	1b64      	subs	r4, r4, r5
 80058f8:	10a4      	asrs	r4, r4, #2
 80058fa:	2600      	movs	r6, #0
 80058fc:	42a6      	cmp	r6, r4
 80058fe:	d109      	bne.n	8005914 <__libc_init_array+0x24>
 8005900:	4d0b      	ldr	r5, [pc, #44]	; (8005930 <__libc_init_array+0x40>)
 8005902:	4c0c      	ldr	r4, [pc, #48]	; (8005934 <__libc_init_array+0x44>)
 8005904:	f001 faf8 	bl	8006ef8 <_init>
 8005908:	1b64      	subs	r4, r4, r5
 800590a:	10a4      	asrs	r4, r4, #2
 800590c:	2600      	movs	r6, #0
 800590e:	42a6      	cmp	r6, r4
 8005910:	d105      	bne.n	800591e <__libc_init_array+0x2e>
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	f855 3b04 	ldr.w	r3, [r5], #4
 8005918:	4798      	blx	r3
 800591a:	3601      	adds	r6, #1
 800591c:	e7ee      	b.n	80058fc <__libc_init_array+0xc>
 800591e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005922:	4798      	blx	r3
 8005924:	3601      	adds	r6, #1
 8005926:	e7f2      	b.n	800590e <__libc_init_array+0x1e>
 8005928:	08007238 	.word	0x08007238
 800592c:	08007238 	.word	0x08007238
 8005930:	08007238 	.word	0x08007238
 8005934:	0800723c 	.word	0x0800723c

08005938 <__retarget_lock_init_recursive>:
 8005938:	4770      	bx	lr

0800593a <__retarget_lock_acquire_recursive>:
 800593a:	4770      	bx	lr

0800593c <__retarget_lock_release_recursive>:
 800593c:	4770      	bx	lr
	...

08005940 <_free_r>:
 8005940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005942:	2900      	cmp	r1, #0
 8005944:	d044      	beq.n	80059d0 <_free_r+0x90>
 8005946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800594a:	9001      	str	r0, [sp, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f1a1 0404 	sub.w	r4, r1, #4
 8005952:	bfb8      	it	lt
 8005954:	18e4      	addlt	r4, r4, r3
 8005956:	f000 f8df 	bl	8005b18 <__malloc_lock>
 800595a:	4a1e      	ldr	r2, [pc, #120]	; (80059d4 <_free_r+0x94>)
 800595c:	9801      	ldr	r0, [sp, #4]
 800595e:	6813      	ldr	r3, [r2, #0]
 8005960:	b933      	cbnz	r3, 8005970 <_free_r+0x30>
 8005962:	6063      	str	r3, [r4, #4]
 8005964:	6014      	str	r4, [r2, #0]
 8005966:	b003      	add	sp, #12
 8005968:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800596c:	f000 b8da 	b.w	8005b24 <__malloc_unlock>
 8005970:	42a3      	cmp	r3, r4
 8005972:	d908      	bls.n	8005986 <_free_r+0x46>
 8005974:	6825      	ldr	r5, [r4, #0]
 8005976:	1961      	adds	r1, r4, r5
 8005978:	428b      	cmp	r3, r1
 800597a:	bf01      	itttt	eq
 800597c:	6819      	ldreq	r1, [r3, #0]
 800597e:	685b      	ldreq	r3, [r3, #4]
 8005980:	1949      	addeq	r1, r1, r5
 8005982:	6021      	streq	r1, [r4, #0]
 8005984:	e7ed      	b.n	8005962 <_free_r+0x22>
 8005986:	461a      	mov	r2, r3
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	b10b      	cbz	r3, 8005990 <_free_r+0x50>
 800598c:	42a3      	cmp	r3, r4
 800598e:	d9fa      	bls.n	8005986 <_free_r+0x46>
 8005990:	6811      	ldr	r1, [r2, #0]
 8005992:	1855      	adds	r5, r2, r1
 8005994:	42a5      	cmp	r5, r4
 8005996:	d10b      	bne.n	80059b0 <_free_r+0x70>
 8005998:	6824      	ldr	r4, [r4, #0]
 800599a:	4421      	add	r1, r4
 800599c:	1854      	adds	r4, r2, r1
 800599e:	42a3      	cmp	r3, r4
 80059a0:	6011      	str	r1, [r2, #0]
 80059a2:	d1e0      	bne.n	8005966 <_free_r+0x26>
 80059a4:	681c      	ldr	r4, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	6053      	str	r3, [r2, #4]
 80059aa:	440c      	add	r4, r1
 80059ac:	6014      	str	r4, [r2, #0]
 80059ae:	e7da      	b.n	8005966 <_free_r+0x26>
 80059b0:	d902      	bls.n	80059b8 <_free_r+0x78>
 80059b2:	230c      	movs	r3, #12
 80059b4:	6003      	str	r3, [r0, #0]
 80059b6:	e7d6      	b.n	8005966 <_free_r+0x26>
 80059b8:	6825      	ldr	r5, [r4, #0]
 80059ba:	1961      	adds	r1, r4, r5
 80059bc:	428b      	cmp	r3, r1
 80059be:	bf04      	itt	eq
 80059c0:	6819      	ldreq	r1, [r3, #0]
 80059c2:	685b      	ldreq	r3, [r3, #4]
 80059c4:	6063      	str	r3, [r4, #4]
 80059c6:	bf04      	itt	eq
 80059c8:	1949      	addeq	r1, r1, r5
 80059ca:	6021      	streq	r1, [r4, #0]
 80059cc:	6054      	str	r4, [r2, #4]
 80059ce:	e7ca      	b.n	8005966 <_free_r+0x26>
 80059d0:	b003      	add	sp, #12
 80059d2:	bd30      	pop	{r4, r5, pc}
 80059d4:	20001044 	.word	0x20001044

080059d8 <sbrk_aligned>:
 80059d8:	b570      	push	{r4, r5, r6, lr}
 80059da:	4e0e      	ldr	r6, [pc, #56]	; (8005a14 <sbrk_aligned+0x3c>)
 80059dc:	460c      	mov	r4, r1
 80059de:	6831      	ldr	r1, [r6, #0]
 80059e0:	4605      	mov	r5, r0
 80059e2:	b911      	cbnz	r1, 80059ea <sbrk_aligned+0x12>
 80059e4:	f000 f9d6 	bl	8005d94 <_sbrk_r>
 80059e8:	6030      	str	r0, [r6, #0]
 80059ea:	4621      	mov	r1, r4
 80059ec:	4628      	mov	r0, r5
 80059ee:	f000 f9d1 	bl	8005d94 <_sbrk_r>
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	d00a      	beq.n	8005a0c <sbrk_aligned+0x34>
 80059f6:	1cc4      	adds	r4, r0, #3
 80059f8:	f024 0403 	bic.w	r4, r4, #3
 80059fc:	42a0      	cmp	r0, r4
 80059fe:	d007      	beq.n	8005a10 <sbrk_aligned+0x38>
 8005a00:	1a21      	subs	r1, r4, r0
 8005a02:	4628      	mov	r0, r5
 8005a04:	f000 f9c6 	bl	8005d94 <_sbrk_r>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d101      	bne.n	8005a10 <sbrk_aligned+0x38>
 8005a0c:	f04f 34ff 	mov.w	r4, #4294967295
 8005a10:	4620      	mov	r0, r4
 8005a12:	bd70      	pop	{r4, r5, r6, pc}
 8005a14:	20001048 	.word	0x20001048

08005a18 <_malloc_r>:
 8005a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a1c:	1ccd      	adds	r5, r1, #3
 8005a1e:	f025 0503 	bic.w	r5, r5, #3
 8005a22:	3508      	adds	r5, #8
 8005a24:	2d0c      	cmp	r5, #12
 8005a26:	bf38      	it	cc
 8005a28:	250c      	movcc	r5, #12
 8005a2a:	2d00      	cmp	r5, #0
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	db01      	blt.n	8005a34 <_malloc_r+0x1c>
 8005a30:	42a9      	cmp	r1, r5
 8005a32:	d905      	bls.n	8005a40 <_malloc_r+0x28>
 8005a34:	230c      	movs	r3, #12
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	2600      	movs	r6, #0
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005b14 <_malloc_r+0xfc>
 8005a44:	f000 f868 	bl	8005b18 <__malloc_lock>
 8005a48:	f8d8 3000 	ldr.w	r3, [r8]
 8005a4c:	461c      	mov	r4, r3
 8005a4e:	bb5c      	cbnz	r4, 8005aa8 <_malloc_r+0x90>
 8005a50:	4629      	mov	r1, r5
 8005a52:	4638      	mov	r0, r7
 8005a54:	f7ff ffc0 	bl	80059d8 <sbrk_aligned>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	d155      	bne.n	8005b0a <_malloc_r+0xf2>
 8005a5e:	f8d8 4000 	ldr.w	r4, [r8]
 8005a62:	4626      	mov	r6, r4
 8005a64:	2e00      	cmp	r6, #0
 8005a66:	d145      	bne.n	8005af4 <_malloc_r+0xdc>
 8005a68:	2c00      	cmp	r4, #0
 8005a6a:	d048      	beq.n	8005afe <_malloc_r+0xe6>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4638      	mov	r0, r7
 8005a72:	eb04 0903 	add.w	r9, r4, r3
 8005a76:	f000 f98d 	bl	8005d94 <_sbrk_r>
 8005a7a:	4581      	cmp	r9, r0
 8005a7c:	d13f      	bne.n	8005afe <_malloc_r+0xe6>
 8005a7e:	6821      	ldr	r1, [r4, #0]
 8005a80:	1a6d      	subs	r5, r5, r1
 8005a82:	4629      	mov	r1, r5
 8005a84:	4638      	mov	r0, r7
 8005a86:	f7ff ffa7 	bl	80059d8 <sbrk_aligned>
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	d037      	beq.n	8005afe <_malloc_r+0xe6>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	442b      	add	r3, r5
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	f8d8 3000 	ldr.w	r3, [r8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d038      	beq.n	8005b0e <_malloc_r+0xf6>
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	42a2      	cmp	r2, r4
 8005aa0:	d12b      	bne.n	8005afa <_malloc_r+0xe2>
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	e00f      	b.n	8005ac8 <_malloc_r+0xb0>
 8005aa8:	6822      	ldr	r2, [r4, #0]
 8005aaa:	1b52      	subs	r2, r2, r5
 8005aac:	d41f      	bmi.n	8005aee <_malloc_r+0xd6>
 8005aae:	2a0b      	cmp	r2, #11
 8005ab0:	d917      	bls.n	8005ae2 <_malloc_r+0xca>
 8005ab2:	1961      	adds	r1, r4, r5
 8005ab4:	42a3      	cmp	r3, r4
 8005ab6:	6025      	str	r5, [r4, #0]
 8005ab8:	bf18      	it	ne
 8005aba:	6059      	strne	r1, [r3, #4]
 8005abc:	6863      	ldr	r3, [r4, #4]
 8005abe:	bf08      	it	eq
 8005ac0:	f8c8 1000 	streq.w	r1, [r8]
 8005ac4:	5162      	str	r2, [r4, r5]
 8005ac6:	604b      	str	r3, [r1, #4]
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f104 060b 	add.w	r6, r4, #11
 8005ace:	f000 f829 	bl	8005b24 <__malloc_unlock>
 8005ad2:	f026 0607 	bic.w	r6, r6, #7
 8005ad6:	1d23      	adds	r3, r4, #4
 8005ad8:	1af2      	subs	r2, r6, r3
 8005ada:	d0ae      	beq.n	8005a3a <_malloc_r+0x22>
 8005adc:	1b9b      	subs	r3, r3, r6
 8005ade:	50a3      	str	r3, [r4, r2]
 8005ae0:	e7ab      	b.n	8005a3a <_malloc_r+0x22>
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	6862      	ldr	r2, [r4, #4]
 8005ae6:	d1dd      	bne.n	8005aa4 <_malloc_r+0x8c>
 8005ae8:	f8c8 2000 	str.w	r2, [r8]
 8005aec:	e7ec      	b.n	8005ac8 <_malloc_r+0xb0>
 8005aee:	4623      	mov	r3, r4
 8005af0:	6864      	ldr	r4, [r4, #4]
 8005af2:	e7ac      	b.n	8005a4e <_malloc_r+0x36>
 8005af4:	4634      	mov	r4, r6
 8005af6:	6876      	ldr	r6, [r6, #4]
 8005af8:	e7b4      	b.n	8005a64 <_malloc_r+0x4c>
 8005afa:	4613      	mov	r3, r2
 8005afc:	e7cc      	b.n	8005a98 <_malloc_r+0x80>
 8005afe:	230c      	movs	r3, #12
 8005b00:	603b      	str	r3, [r7, #0]
 8005b02:	4638      	mov	r0, r7
 8005b04:	f000 f80e 	bl	8005b24 <__malloc_unlock>
 8005b08:	e797      	b.n	8005a3a <_malloc_r+0x22>
 8005b0a:	6025      	str	r5, [r4, #0]
 8005b0c:	e7dc      	b.n	8005ac8 <_malloc_r+0xb0>
 8005b0e:	605b      	str	r3, [r3, #4]
 8005b10:	deff      	udf	#255	; 0xff
 8005b12:	bf00      	nop
 8005b14:	20001044 	.word	0x20001044

08005b18 <__malloc_lock>:
 8005b18:	4801      	ldr	r0, [pc, #4]	; (8005b20 <__malloc_lock+0x8>)
 8005b1a:	f7ff bf0e 	b.w	800593a <__retarget_lock_acquire_recursive>
 8005b1e:	bf00      	nop
 8005b20:	20001040 	.word	0x20001040

08005b24 <__malloc_unlock>:
 8005b24:	4801      	ldr	r0, [pc, #4]	; (8005b2c <__malloc_unlock+0x8>)
 8005b26:	f7ff bf09 	b.w	800593c <__retarget_lock_release_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	20001040 	.word	0x20001040

08005b30 <__sflush_r>:
 8005b30:	898a      	ldrh	r2, [r1, #12]
 8005b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b36:	4605      	mov	r5, r0
 8005b38:	0710      	lsls	r0, r2, #28
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	d458      	bmi.n	8005bf0 <__sflush_r+0xc0>
 8005b3e:	684b      	ldr	r3, [r1, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	dc05      	bgt.n	8005b50 <__sflush_r+0x20>
 8005b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	dc02      	bgt.n	8005b50 <__sflush_r+0x20>
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b52:	2e00      	cmp	r6, #0
 8005b54:	d0f9      	beq.n	8005b4a <__sflush_r+0x1a>
 8005b56:	2300      	movs	r3, #0
 8005b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b5c:	682f      	ldr	r7, [r5, #0]
 8005b5e:	6a21      	ldr	r1, [r4, #32]
 8005b60:	602b      	str	r3, [r5, #0]
 8005b62:	d032      	beq.n	8005bca <__sflush_r+0x9a>
 8005b64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	075a      	lsls	r2, r3, #29
 8005b6a:	d505      	bpl.n	8005b78 <__sflush_r+0x48>
 8005b6c:	6863      	ldr	r3, [r4, #4]
 8005b6e:	1ac0      	subs	r0, r0, r3
 8005b70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b72:	b10b      	cbz	r3, 8005b78 <__sflush_r+0x48>
 8005b74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b76:	1ac0      	subs	r0, r0, r3
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b7e:	6a21      	ldr	r1, [r4, #32]
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b0      	blx	r6
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	d106      	bne.n	8005b98 <__sflush_r+0x68>
 8005b8a:	6829      	ldr	r1, [r5, #0]
 8005b8c:	291d      	cmp	r1, #29
 8005b8e:	d82b      	bhi.n	8005be8 <__sflush_r+0xb8>
 8005b90:	4a29      	ldr	r2, [pc, #164]	; (8005c38 <__sflush_r+0x108>)
 8005b92:	410a      	asrs	r2, r1
 8005b94:	07d6      	lsls	r6, r2, #31
 8005b96:	d427      	bmi.n	8005be8 <__sflush_r+0xb8>
 8005b98:	2200      	movs	r2, #0
 8005b9a:	6062      	str	r2, [r4, #4]
 8005b9c:	04d9      	lsls	r1, r3, #19
 8005b9e:	6922      	ldr	r2, [r4, #16]
 8005ba0:	6022      	str	r2, [r4, #0]
 8005ba2:	d504      	bpl.n	8005bae <__sflush_r+0x7e>
 8005ba4:	1c42      	adds	r2, r0, #1
 8005ba6:	d101      	bne.n	8005bac <__sflush_r+0x7c>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b903      	cbnz	r3, 8005bae <__sflush_r+0x7e>
 8005bac:	6560      	str	r0, [r4, #84]	; 0x54
 8005bae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bb0:	602f      	str	r7, [r5, #0]
 8005bb2:	2900      	cmp	r1, #0
 8005bb4:	d0c9      	beq.n	8005b4a <__sflush_r+0x1a>
 8005bb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bba:	4299      	cmp	r1, r3
 8005bbc:	d002      	beq.n	8005bc4 <__sflush_r+0x94>
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f7ff febe 	bl	8005940 <_free_r>
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	6360      	str	r0, [r4, #52]	; 0x34
 8005bc8:	e7c0      	b.n	8005b4c <__sflush_r+0x1c>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b0      	blx	r6
 8005bd0:	1c41      	adds	r1, r0, #1
 8005bd2:	d1c8      	bne.n	8005b66 <__sflush_r+0x36>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0c5      	beq.n	8005b66 <__sflush_r+0x36>
 8005bda:	2b1d      	cmp	r3, #29
 8005bdc:	d001      	beq.n	8005be2 <__sflush_r+0xb2>
 8005bde:	2b16      	cmp	r3, #22
 8005be0:	d101      	bne.n	8005be6 <__sflush_r+0xb6>
 8005be2:	602f      	str	r7, [r5, #0]
 8005be4:	e7b1      	b.n	8005b4a <__sflush_r+0x1a>
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bec:	81a3      	strh	r3, [r4, #12]
 8005bee:	e7ad      	b.n	8005b4c <__sflush_r+0x1c>
 8005bf0:	690f      	ldr	r7, [r1, #16]
 8005bf2:	2f00      	cmp	r7, #0
 8005bf4:	d0a9      	beq.n	8005b4a <__sflush_r+0x1a>
 8005bf6:	0793      	lsls	r3, r2, #30
 8005bf8:	680e      	ldr	r6, [r1, #0]
 8005bfa:	bf08      	it	eq
 8005bfc:	694b      	ldreq	r3, [r1, #20]
 8005bfe:	600f      	str	r7, [r1, #0]
 8005c00:	bf18      	it	ne
 8005c02:	2300      	movne	r3, #0
 8005c04:	eba6 0807 	sub.w	r8, r6, r7
 8005c08:	608b      	str	r3, [r1, #8]
 8005c0a:	f1b8 0f00 	cmp.w	r8, #0
 8005c0e:	dd9c      	ble.n	8005b4a <__sflush_r+0x1a>
 8005c10:	6a21      	ldr	r1, [r4, #32]
 8005c12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c14:	4643      	mov	r3, r8
 8005c16:	463a      	mov	r2, r7
 8005c18:	4628      	mov	r0, r5
 8005c1a:	47b0      	blx	r6
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	dc06      	bgt.n	8005c2e <__sflush_r+0xfe>
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2c:	e78e      	b.n	8005b4c <__sflush_r+0x1c>
 8005c2e:	4407      	add	r7, r0
 8005c30:	eba8 0800 	sub.w	r8, r8, r0
 8005c34:	e7e9      	b.n	8005c0a <__sflush_r+0xda>
 8005c36:	bf00      	nop
 8005c38:	dfbffffe 	.word	0xdfbffffe

08005c3c <_fflush_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	690b      	ldr	r3, [r1, #16]
 8005c40:	4605      	mov	r5, r0
 8005c42:	460c      	mov	r4, r1
 8005c44:	b913      	cbnz	r3, 8005c4c <_fflush_r+0x10>
 8005c46:	2500      	movs	r5, #0
 8005c48:	4628      	mov	r0, r5
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	b118      	cbz	r0, 8005c56 <_fflush_r+0x1a>
 8005c4e:	6a03      	ldr	r3, [r0, #32]
 8005c50:	b90b      	cbnz	r3, 8005c56 <_fflush_r+0x1a>
 8005c52:	f7ff fc8f 	bl	8005574 <__sinit>
 8005c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f3      	beq.n	8005c46 <_fflush_r+0xa>
 8005c5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c60:	07d0      	lsls	r0, r2, #31
 8005c62:	d404      	bmi.n	8005c6e <_fflush_r+0x32>
 8005c64:	0599      	lsls	r1, r3, #22
 8005c66:	d402      	bmi.n	8005c6e <_fflush_r+0x32>
 8005c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c6a:	f7ff fe66 	bl	800593a <__retarget_lock_acquire_recursive>
 8005c6e:	4628      	mov	r0, r5
 8005c70:	4621      	mov	r1, r4
 8005c72:	f7ff ff5d 	bl	8005b30 <__sflush_r>
 8005c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c78:	07da      	lsls	r2, r3, #31
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	d4e4      	bmi.n	8005c48 <_fflush_r+0xc>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	059b      	lsls	r3, r3, #22
 8005c82:	d4e1      	bmi.n	8005c48 <_fflush_r+0xc>
 8005c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c86:	f7ff fe59 	bl	800593c <__retarget_lock_release_recursive>
 8005c8a:	e7dd      	b.n	8005c48 <_fflush_r+0xc>

08005c8c <__swhatbuf_r>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	460c      	mov	r4, r1
 8005c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c94:	2900      	cmp	r1, #0
 8005c96:	b096      	sub	sp, #88	; 0x58
 8005c98:	4615      	mov	r5, r2
 8005c9a:	461e      	mov	r6, r3
 8005c9c:	da0d      	bge.n	8005cba <__swhatbuf_r+0x2e>
 8005c9e:	89a3      	ldrh	r3, [r4, #12]
 8005ca0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ca4:	f04f 0100 	mov.w	r1, #0
 8005ca8:	bf0c      	ite	eq
 8005caa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005cae:	2340      	movne	r3, #64	; 0x40
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	6031      	str	r1, [r6, #0]
 8005cb4:	602b      	str	r3, [r5, #0]
 8005cb6:	b016      	add	sp, #88	; 0x58
 8005cb8:	bd70      	pop	{r4, r5, r6, pc}
 8005cba:	466a      	mov	r2, sp
 8005cbc:	f000 f848 	bl	8005d50 <_fstat_r>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	dbec      	blt.n	8005c9e <__swhatbuf_r+0x12>
 8005cc4:	9901      	ldr	r1, [sp, #4]
 8005cc6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005cca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005cce:	4259      	negs	r1, r3
 8005cd0:	4159      	adcs	r1, r3
 8005cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cd6:	e7eb      	b.n	8005cb0 <__swhatbuf_r+0x24>

08005cd8 <__smakebuf_r>:
 8005cd8:	898b      	ldrh	r3, [r1, #12]
 8005cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cdc:	079d      	lsls	r5, r3, #30
 8005cde:	4606      	mov	r6, r0
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	d507      	bpl.n	8005cf4 <__smakebuf_r+0x1c>
 8005ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	6123      	str	r3, [r4, #16]
 8005cec:	2301      	movs	r3, #1
 8005cee:	6163      	str	r3, [r4, #20]
 8005cf0:	b002      	add	sp, #8
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	ab01      	add	r3, sp, #4
 8005cf6:	466a      	mov	r2, sp
 8005cf8:	f7ff ffc8 	bl	8005c8c <__swhatbuf_r>
 8005cfc:	9900      	ldr	r1, [sp, #0]
 8005cfe:	4605      	mov	r5, r0
 8005d00:	4630      	mov	r0, r6
 8005d02:	f7ff fe89 	bl	8005a18 <_malloc_r>
 8005d06:	b948      	cbnz	r0, 8005d1c <__smakebuf_r+0x44>
 8005d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d0c:	059a      	lsls	r2, r3, #22
 8005d0e:	d4ef      	bmi.n	8005cf0 <__smakebuf_r+0x18>
 8005d10:	f023 0303 	bic.w	r3, r3, #3
 8005d14:	f043 0302 	orr.w	r3, r3, #2
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	e7e3      	b.n	8005ce4 <__smakebuf_r+0xc>
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	6020      	str	r0, [r4, #0]
 8005d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d24:	81a3      	strh	r3, [r4, #12]
 8005d26:	9b00      	ldr	r3, [sp, #0]
 8005d28:	6163      	str	r3, [r4, #20]
 8005d2a:	9b01      	ldr	r3, [sp, #4]
 8005d2c:	6120      	str	r0, [r4, #16]
 8005d2e:	b15b      	cbz	r3, 8005d48 <__smakebuf_r+0x70>
 8005d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d34:	4630      	mov	r0, r6
 8005d36:	f000 f81d 	bl	8005d74 <_isatty_r>
 8005d3a:	b128      	cbz	r0, 8005d48 <__smakebuf_r+0x70>
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f023 0303 	bic.w	r3, r3, #3
 8005d42:	f043 0301 	orr.w	r3, r3, #1
 8005d46:	81a3      	strh	r3, [r4, #12]
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	431d      	orrs	r5, r3
 8005d4c:	81a5      	strh	r5, [r4, #12]
 8005d4e:	e7cf      	b.n	8005cf0 <__smakebuf_r+0x18>

08005d50 <_fstat_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4d07      	ldr	r5, [pc, #28]	; (8005d70 <_fstat_r+0x20>)
 8005d54:	2300      	movs	r3, #0
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	f7fc f9f2 	bl	8002146 <_fstat>
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	d102      	bne.n	8005d6c <_fstat_r+0x1c>
 8005d66:	682b      	ldr	r3, [r5, #0]
 8005d68:	b103      	cbz	r3, 8005d6c <_fstat_r+0x1c>
 8005d6a:	6023      	str	r3, [r4, #0]
 8005d6c:	bd38      	pop	{r3, r4, r5, pc}
 8005d6e:	bf00      	nop
 8005d70:	2000103c 	.word	0x2000103c

08005d74 <_isatty_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4d06      	ldr	r5, [pc, #24]	; (8005d90 <_isatty_r+0x1c>)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	602b      	str	r3, [r5, #0]
 8005d80:	f7fc f9f1 	bl	8002166 <_isatty>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d102      	bne.n	8005d8e <_isatty_r+0x1a>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b103      	cbz	r3, 8005d8e <_isatty_r+0x1a>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	2000103c 	.word	0x2000103c

08005d94 <_sbrk_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4d06      	ldr	r5, [pc, #24]	; (8005db0 <_sbrk_r+0x1c>)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	602b      	str	r3, [r5, #0]
 8005da0:	f7fc f9fa 	bl	8002198 <_sbrk>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	d102      	bne.n	8005dae <_sbrk_r+0x1a>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	b103      	cbz	r3, 8005dae <_sbrk_r+0x1a>
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
 8005db0:	2000103c 	.word	0x2000103c
 8005db4:	00000000 	.word	0x00000000

08005db8 <tan>:
 8005db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005dba:	ec53 2b10 	vmov	r2, r3, d0
 8005dbe:	4816      	ldr	r0, [pc, #88]	; (8005e18 <tan+0x60>)
 8005dc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005dc4:	4281      	cmp	r1, r0
 8005dc6:	dc07      	bgt.n	8005dd8 <tan+0x20>
 8005dc8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8005e10 <tan+0x58>
 8005dcc:	2001      	movs	r0, #1
 8005dce:	b005      	add	sp, #20
 8005dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dd4:	f000 b824 	b.w	8005e20 <__kernel_tan>
 8005dd8:	4810      	ldr	r0, [pc, #64]	; (8005e1c <tan+0x64>)
 8005dda:	4281      	cmp	r1, r0
 8005ddc:	dd09      	ble.n	8005df2 <tan+0x3a>
 8005dde:	ee10 0a10 	vmov	r0, s0
 8005de2:	4619      	mov	r1, r3
 8005de4:	f7fa fa14 	bl	8000210 <__aeabi_dsub>
 8005de8:	ec41 0b10 	vmov	d0, r0, r1
 8005dec:	b005      	add	sp, #20
 8005dee:	f85d fb04 	ldr.w	pc, [sp], #4
 8005df2:	4668      	mov	r0, sp
 8005df4:	f000 fa20 	bl	8006238 <__ieee754_rem_pio2>
 8005df8:	0040      	lsls	r0, r0, #1
 8005dfa:	f000 0002 	and.w	r0, r0, #2
 8005dfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e02:	ed9d 0b00 	vldr	d0, [sp]
 8005e06:	f1c0 0001 	rsb	r0, r0, #1
 8005e0a:	f000 f809 	bl	8005e20 <__kernel_tan>
 8005e0e:	e7ed      	b.n	8005dec <tan+0x34>
	...
 8005e18:	3fe921fb 	.word	0x3fe921fb
 8005e1c:	7fefffff 	.word	0x7fefffff

08005e20 <__kernel_tan>:
 8005e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e24:	ed2d 8b06 	vpush	{d8-d10}
 8005e28:	ec5b ab10 	vmov	sl, fp, d0
 8005e2c:	4be0      	ldr	r3, [pc, #896]	; (80061b0 <__kernel_tan+0x390>)
 8005e2e:	b083      	sub	sp, #12
 8005e30:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8005e34:	429f      	cmp	r7, r3
 8005e36:	ec59 8b11 	vmov	r8, r9, d1
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	f8cd b000 	str.w	fp, [sp]
 8005e40:	dc61      	bgt.n	8005f06 <__kernel_tan+0xe6>
 8005e42:	ee10 0a10 	vmov	r0, s0
 8005e46:	4659      	mov	r1, fp
 8005e48:	f7fa fe34 	bl	8000ab4 <__aeabi_d2iz>
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f040 8083 	bne.w	8005f5a <__kernel_tan+0x13a>
 8005e54:	1c73      	adds	r3, r6, #1
 8005e56:	4652      	mov	r2, sl
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	433b      	orrs	r3, r7
 8005e5c:	d112      	bne.n	8005e84 <__kernel_tan+0x64>
 8005e5e:	ec4b ab10 	vmov	d0, sl, fp
 8005e62:	f000 fbef 	bl	8006644 <fabs>
 8005e66:	49d3      	ldr	r1, [pc, #844]	; (80061b4 <__kernel_tan+0x394>)
 8005e68:	ec53 2b10 	vmov	r2, r3, d0
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	f7fa fcb1 	bl	80007d4 <__aeabi_ddiv>
 8005e72:	4682      	mov	sl, r0
 8005e74:	468b      	mov	fp, r1
 8005e76:	ec4b ab10 	vmov	d0, sl, fp
 8005e7a:	b003      	add	sp, #12
 8005e7c:	ecbd 8b06 	vpop	{d8-d10}
 8005e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e84:	2e01      	cmp	r6, #1
 8005e86:	d0f6      	beq.n	8005e76 <__kernel_tan+0x56>
 8005e88:	4642      	mov	r2, r8
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	4650      	mov	r0, sl
 8005e8e:	4659      	mov	r1, fp
 8005e90:	f7fa f9c0 	bl	8000214 <__adddf3>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	460f      	mov	r7, r1
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	49c6      	ldr	r1, [pc, #792]	; (80061b8 <__kernel_tan+0x398>)
 8005e9e:	f7fa fc99 	bl	80007d4 <__aeabi_ddiv>
 8005ea2:	e9cd 0100 	strd	r0, r1, [sp]
 8005ea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eaa:	462e      	mov	r6, r5
 8005eac:	4652      	mov	r2, sl
 8005eae:	462c      	mov	r4, r5
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	4639      	mov	r1, r7
 8005eb6:	465b      	mov	r3, fp
 8005eb8:	f7fa f9aa 	bl	8000210 <__aeabi_dsub>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4640      	mov	r0, r8
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	f7fa f9a4 	bl	8000210 <__aeabi_dsub>
 8005ec8:	4632      	mov	r2, r6
 8005eca:	462b      	mov	r3, r5
 8005ecc:	f7fa fb58 	bl	8000580 <__aeabi_dmul>
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	4680      	mov	r8, r0
 8005ed4:	4689      	mov	r9, r1
 8005ed6:	462b      	mov	r3, r5
 8005ed8:	4630      	mov	r0, r6
 8005eda:	4639      	mov	r1, r7
 8005edc:	f7fa fb50 	bl	8000580 <__aeabi_dmul>
 8005ee0:	4bb4      	ldr	r3, [pc, #720]	; (80061b4 <__kernel_tan+0x394>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f7fa f996 	bl	8000214 <__adddf3>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4640      	mov	r0, r8
 8005eee:	4649      	mov	r1, r9
 8005ef0:	f7fa f990 	bl	8000214 <__adddf3>
 8005ef4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ef8:	f7fa fb42 	bl	8000580 <__aeabi_dmul>
 8005efc:	4622      	mov	r2, r4
 8005efe:	462b      	mov	r3, r5
 8005f00:	f7fa f988 	bl	8000214 <__adddf3>
 8005f04:	e7b5      	b.n	8005e72 <__kernel_tan+0x52>
 8005f06:	4bad      	ldr	r3, [pc, #692]	; (80061bc <__kernel_tan+0x39c>)
 8005f08:	429f      	cmp	r7, r3
 8005f0a:	dd26      	ble.n	8005f5a <__kernel_tan+0x13a>
 8005f0c:	9b00      	ldr	r3, [sp, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	da09      	bge.n	8005f26 <__kernel_tan+0x106>
 8005f12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f16:	469b      	mov	fp, r3
 8005f18:	ee10 aa10 	vmov	sl, s0
 8005f1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005f20:	ee11 8a10 	vmov	r8, s2
 8005f24:	4699      	mov	r9, r3
 8005f26:	4652      	mov	r2, sl
 8005f28:	465b      	mov	r3, fp
 8005f2a:	a183      	add	r1, pc, #524	; (adr r1, 8006138 <__kernel_tan+0x318>)
 8005f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f30:	f7fa f96e 	bl	8000210 <__aeabi_dsub>
 8005f34:	4642      	mov	r2, r8
 8005f36:	464b      	mov	r3, r9
 8005f38:	4604      	mov	r4, r0
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	a180      	add	r1, pc, #512	; (adr r1, 8006140 <__kernel_tan+0x320>)
 8005f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f42:	f7fa f965 	bl	8000210 <__aeabi_dsub>
 8005f46:	4622      	mov	r2, r4
 8005f48:	462b      	mov	r3, r5
 8005f4a:	f7fa f963 	bl	8000214 <__adddf3>
 8005f4e:	f04f 0800 	mov.w	r8, #0
 8005f52:	4682      	mov	sl, r0
 8005f54:	468b      	mov	fp, r1
 8005f56:	f04f 0900 	mov.w	r9, #0
 8005f5a:	4652      	mov	r2, sl
 8005f5c:	465b      	mov	r3, fp
 8005f5e:	4650      	mov	r0, sl
 8005f60:	4659      	mov	r1, fp
 8005f62:	f7fa fb0d 	bl	8000580 <__aeabi_dmul>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	ec43 2b18 	vmov	d8, r2, r3
 8005f6e:	f7fa fb07 	bl	8000580 <__aeabi_dmul>
 8005f72:	ec53 2b18 	vmov	r2, r3, d8
 8005f76:	4604      	mov	r4, r0
 8005f78:	460d      	mov	r5, r1
 8005f7a:	4650      	mov	r0, sl
 8005f7c:	4659      	mov	r1, fp
 8005f7e:	f7fa faff 	bl	8000580 <__aeabi_dmul>
 8005f82:	a371      	add	r3, pc, #452	; (adr r3, 8006148 <__kernel_tan+0x328>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	ec41 0b19 	vmov	d9, r0, r1
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f7fa faf6 	bl	8000580 <__aeabi_dmul>
 8005f94:	a36e      	add	r3, pc, #440	; (adr r3, 8006150 <__kernel_tan+0x330>)
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f7fa f93b 	bl	8000214 <__adddf3>
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	f7fa faed 	bl	8000580 <__aeabi_dmul>
 8005fa6:	a36c      	add	r3, pc, #432	; (adr r3, 8006158 <__kernel_tan+0x338>)
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	f7fa f932 	bl	8000214 <__adddf3>
 8005fb0:	4622      	mov	r2, r4
 8005fb2:	462b      	mov	r3, r5
 8005fb4:	f7fa fae4 	bl	8000580 <__aeabi_dmul>
 8005fb8:	a369      	add	r3, pc, #420	; (adr r3, 8006160 <__kernel_tan+0x340>)
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	f7fa f929 	bl	8000214 <__adddf3>
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	f7fa fadb 	bl	8000580 <__aeabi_dmul>
 8005fca:	a367      	add	r3, pc, #412	; (adr r3, 8006168 <__kernel_tan+0x348>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f7fa f920 	bl	8000214 <__adddf3>
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	462b      	mov	r3, r5
 8005fd8:	f7fa fad2 	bl	8000580 <__aeabi_dmul>
 8005fdc:	a364      	add	r3, pc, #400	; (adr r3, 8006170 <__kernel_tan+0x350>)
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	f7fa f917 	bl	8000214 <__adddf3>
 8005fe6:	ec53 2b18 	vmov	r2, r3, d8
 8005fea:	f7fa fac9 	bl	8000580 <__aeabi_dmul>
 8005fee:	a362      	add	r3, pc, #392	; (adr r3, 8006178 <__kernel_tan+0x358>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	ec41 0b1a 	vmov	d10, r0, r1
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	f7fa fac0 	bl	8000580 <__aeabi_dmul>
 8006000:	a35f      	add	r3, pc, #380	; (adr r3, 8006180 <__kernel_tan+0x360>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f7fa f905 	bl	8000214 <__adddf3>
 800600a:	4622      	mov	r2, r4
 800600c:	462b      	mov	r3, r5
 800600e:	f7fa fab7 	bl	8000580 <__aeabi_dmul>
 8006012:	a35d      	add	r3, pc, #372	; (adr r3, 8006188 <__kernel_tan+0x368>)
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f7fa f8fc 	bl	8000214 <__adddf3>
 800601c:	4622      	mov	r2, r4
 800601e:	462b      	mov	r3, r5
 8006020:	f7fa faae 	bl	8000580 <__aeabi_dmul>
 8006024:	a35a      	add	r3, pc, #360	; (adr r3, 8006190 <__kernel_tan+0x370>)
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	f7fa f8f3 	bl	8000214 <__adddf3>
 800602e:	4622      	mov	r2, r4
 8006030:	462b      	mov	r3, r5
 8006032:	f7fa faa5 	bl	8000580 <__aeabi_dmul>
 8006036:	a358      	add	r3, pc, #352	; (adr r3, 8006198 <__kernel_tan+0x378>)
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	f7fa f8ea 	bl	8000214 <__adddf3>
 8006040:	4622      	mov	r2, r4
 8006042:	462b      	mov	r3, r5
 8006044:	f7fa fa9c 	bl	8000580 <__aeabi_dmul>
 8006048:	a355      	add	r3, pc, #340	; (adr r3, 80061a0 <__kernel_tan+0x380>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa f8e1 	bl	8000214 <__adddf3>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	ec51 0b1a 	vmov	r0, r1, d10
 800605a:	f7fa f8db 	bl	8000214 <__adddf3>
 800605e:	ec53 2b19 	vmov	r2, r3, d9
 8006062:	f7fa fa8d 	bl	8000580 <__aeabi_dmul>
 8006066:	4642      	mov	r2, r8
 8006068:	464b      	mov	r3, r9
 800606a:	f7fa f8d3 	bl	8000214 <__adddf3>
 800606e:	ec53 2b18 	vmov	r2, r3, d8
 8006072:	f7fa fa85 	bl	8000580 <__aeabi_dmul>
 8006076:	4642      	mov	r2, r8
 8006078:	464b      	mov	r3, r9
 800607a:	f7fa f8cb 	bl	8000214 <__adddf3>
 800607e:	a34a      	add	r3, pc, #296	; (adr r3, 80061a8 <__kernel_tan+0x388>)
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	4604      	mov	r4, r0
 8006086:	460d      	mov	r5, r1
 8006088:	ec51 0b19 	vmov	r0, r1, d9
 800608c:	f7fa fa78 	bl	8000580 <__aeabi_dmul>
 8006090:	4622      	mov	r2, r4
 8006092:	462b      	mov	r3, r5
 8006094:	f7fa f8be 	bl	8000214 <__adddf3>
 8006098:	460b      	mov	r3, r1
 800609a:	ec41 0b18 	vmov	d8, r0, r1
 800609e:	4602      	mov	r2, r0
 80060a0:	4659      	mov	r1, fp
 80060a2:	4650      	mov	r0, sl
 80060a4:	f7fa f8b6 	bl	8000214 <__adddf3>
 80060a8:	4b44      	ldr	r3, [pc, #272]	; (80061bc <__kernel_tan+0x39c>)
 80060aa:	429f      	cmp	r7, r3
 80060ac:	4604      	mov	r4, r0
 80060ae:	460d      	mov	r5, r1
 80060b0:	f340 8086 	ble.w	80061c0 <__kernel_tan+0x3a0>
 80060b4:	4630      	mov	r0, r6
 80060b6:	f7fa f9f9 	bl	80004ac <__aeabi_i2d>
 80060ba:	4622      	mov	r2, r4
 80060bc:	4680      	mov	r8, r0
 80060be:	4689      	mov	r9, r1
 80060c0:	462b      	mov	r3, r5
 80060c2:	4620      	mov	r0, r4
 80060c4:	4629      	mov	r1, r5
 80060c6:	f7fa fa5b 	bl	8000580 <__aeabi_dmul>
 80060ca:	4642      	mov	r2, r8
 80060cc:	4606      	mov	r6, r0
 80060ce:	460f      	mov	r7, r1
 80060d0:	464b      	mov	r3, r9
 80060d2:	4620      	mov	r0, r4
 80060d4:	4629      	mov	r1, r5
 80060d6:	f7fa f89d 	bl	8000214 <__adddf3>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4630      	mov	r0, r6
 80060e0:	4639      	mov	r1, r7
 80060e2:	f7fa fb77 	bl	80007d4 <__aeabi_ddiv>
 80060e6:	ec53 2b18 	vmov	r2, r3, d8
 80060ea:	f7fa f891 	bl	8000210 <__aeabi_dsub>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4650      	mov	r0, sl
 80060f4:	4659      	mov	r1, fp
 80060f6:	f7fa f88b 	bl	8000210 <__aeabi_dsub>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	f7fa f889 	bl	8000214 <__adddf3>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4640      	mov	r0, r8
 8006108:	4649      	mov	r1, r9
 800610a:	f7fa f881 	bl	8000210 <__aeabi_dsub>
 800610e:	9b00      	ldr	r3, [sp, #0]
 8006110:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8006114:	f00a 0a02 	and.w	sl, sl, #2
 8006118:	4604      	mov	r4, r0
 800611a:	f1ca 0001 	rsb	r0, sl, #1
 800611e:	460d      	mov	r5, r1
 8006120:	f7fa f9c4 	bl	80004ac <__aeabi_i2d>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4620      	mov	r0, r4
 800612a:	4629      	mov	r1, r5
 800612c:	f7fa fa28 	bl	8000580 <__aeabi_dmul>
 8006130:	e69f      	b.n	8005e72 <__kernel_tan+0x52>
 8006132:	bf00      	nop
 8006134:	f3af 8000 	nop.w
 8006138:	54442d18 	.word	0x54442d18
 800613c:	3fe921fb 	.word	0x3fe921fb
 8006140:	33145c07 	.word	0x33145c07
 8006144:	3c81a626 	.word	0x3c81a626
 8006148:	74bf7ad4 	.word	0x74bf7ad4
 800614c:	3efb2a70 	.word	0x3efb2a70
 8006150:	32f0a7e9 	.word	0x32f0a7e9
 8006154:	3f12b80f 	.word	0x3f12b80f
 8006158:	1a8d1068 	.word	0x1a8d1068
 800615c:	3f3026f7 	.word	0x3f3026f7
 8006160:	fee08315 	.word	0xfee08315
 8006164:	3f57dbc8 	.word	0x3f57dbc8
 8006168:	e96e8493 	.word	0xe96e8493
 800616c:	3f8226e3 	.word	0x3f8226e3
 8006170:	1bb341fe 	.word	0x1bb341fe
 8006174:	3faba1ba 	.word	0x3faba1ba
 8006178:	db605373 	.word	0xdb605373
 800617c:	bef375cb 	.word	0xbef375cb
 8006180:	a03792a6 	.word	0xa03792a6
 8006184:	3f147e88 	.word	0x3f147e88
 8006188:	f2f26501 	.word	0xf2f26501
 800618c:	3f4344d8 	.word	0x3f4344d8
 8006190:	c9560328 	.word	0xc9560328
 8006194:	3f6d6d22 	.word	0x3f6d6d22
 8006198:	8406d637 	.word	0x8406d637
 800619c:	3f9664f4 	.word	0x3f9664f4
 80061a0:	1110fe7a 	.word	0x1110fe7a
 80061a4:	3fc11111 	.word	0x3fc11111
 80061a8:	55555563 	.word	0x55555563
 80061ac:	3fd55555 	.word	0x3fd55555
 80061b0:	3e2fffff 	.word	0x3e2fffff
 80061b4:	3ff00000 	.word	0x3ff00000
 80061b8:	bff00000 	.word	0xbff00000
 80061bc:	3fe59427 	.word	0x3fe59427
 80061c0:	2e01      	cmp	r6, #1
 80061c2:	d02f      	beq.n	8006224 <__kernel_tan+0x404>
 80061c4:	460f      	mov	r7, r1
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4689      	mov	r9, r1
 80061cc:	2000      	movs	r0, #0
 80061ce:	4917      	ldr	r1, [pc, #92]	; (800622c <__kernel_tan+0x40c>)
 80061d0:	f7fa fb00 	bl	80007d4 <__aeabi_ddiv>
 80061d4:	2600      	movs	r6, #0
 80061d6:	e9cd 0100 	strd	r0, r1, [sp]
 80061da:	4652      	mov	r2, sl
 80061dc:	465b      	mov	r3, fp
 80061de:	4630      	mov	r0, r6
 80061e0:	4639      	mov	r1, r7
 80061e2:	f7fa f815 	bl	8000210 <__aeabi_dsub>
 80061e6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	ec51 0b18 	vmov	r0, r1, d8
 80061f2:	f7fa f80d 	bl	8000210 <__aeabi_dsub>
 80061f6:	4632      	mov	r2, r6
 80061f8:	462b      	mov	r3, r5
 80061fa:	f7fa f9c1 	bl	8000580 <__aeabi_dmul>
 80061fe:	46b0      	mov	r8, r6
 8006200:	460f      	mov	r7, r1
 8006202:	4642      	mov	r2, r8
 8006204:	462b      	mov	r3, r5
 8006206:	4634      	mov	r4, r6
 8006208:	4649      	mov	r1, r9
 800620a:	4606      	mov	r6, r0
 800620c:	4640      	mov	r0, r8
 800620e:	f7fa f9b7 	bl	8000580 <__aeabi_dmul>
 8006212:	4b07      	ldr	r3, [pc, #28]	; (8006230 <__kernel_tan+0x410>)
 8006214:	2200      	movs	r2, #0
 8006216:	f7f9 fffd 	bl	8000214 <__adddf3>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4630      	mov	r0, r6
 8006220:	4639      	mov	r1, r7
 8006222:	e665      	b.n	8005ef0 <__kernel_tan+0xd0>
 8006224:	4682      	mov	sl, r0
 8006226:	468b      	mov	fp, r1
 8006228:	e625      	b.n	8005e76 <__kernel_tan+0x56>
 800622a:	bf00      	nop
 800622c:	bff00000 	.word	0xbff00000
 8006230:	3ff00000 	.word	0x3ff00000
 8006234:	00000000 	.word	0x00000000

08006238 <__ieee754_rem_pio2>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	ed2d 8b02 	vpush	{d8}
 8006240:	ec55 4b10 	vmov	r4, r5, d0
 8006244:	4bca      	ldr	r3, [pc, #808]	; (8006570 <__ieee754_rem_pio2+0x338>)
 8006246:	b08b      	sub	sp, #44	; 0x2c
 8006248:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800624c:	4598      	cmp	r8, r3
 800624e:	4682      	mov	sl, r0
 8006250:	9502      	str	r5, [sp, #8]
 8006252:	dc08      	bgt.n	8006266 <__ieee754_rem_pio2+0x2e>
 8006254:	2200      	movs	r2, #0
 8006256:	2300      	movs	r3, #0
 8006258:	ed80 0b00 	vstr	d0, [r0]
 800625c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006260:	f04f 0b00 	mov.w	fp, #0
 8006264:	e028      	b.n	80062b8 <__ieee754_rem_pio2+0x80>
 8006266:	4bc3      	ldr	r3, [pc, #780]	; (8006574 <__ieee754_rem_pio2+0x33c>)
 8006268:	4598      	cmp	r8, r3
 800626a:	dc78      	bgt.n	800635e <__ieee754_rem_pio2+0x126>
 800626c:	9b02      	ldr	r3, [sp, #8]
 800626e:	4ec2      	ldr	r6, [pc, #776]	; (8006578 <__ieee754_rem_pio2+0x340>)
 8006270:	2b00      	cmp	r3, #0
 8006272:	ee10 0a10 	vmov	r0, s0
 8006276:	a3b0      	add	r3, pc, #704	; (adr r3, 8006538 <__ieee754_rem_pio2+0x300>)
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	4629      	mov	r1, r5
 800627e:	dd39      	ble.n	80062f4 <__ieee754_rem_pio2+0xbc>
 8006280:	f7f9 ffc6 	bl	8000210 <__aeabi_dsub>
 8006284:	45b0      	cmp	r8, r6
 8006286:	4604      	mov	r4, r0
 8006288:	460d      	mov	r5, r1
 800628a:	d01b      	beq.n	80062c4 <__ieee754_rem_pio2+0x8c>
 800628c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006540 <__ieee754_rem_pio2+0x308>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7f9 ffbd 	bl	8000210 <__aeabi_dsub>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	e9ca 2300 	strd	r2, r3, [sl]
 800629e:	4620      	mov	r0, r4
 80062a0:	4629      	mov	r1, r5
 80062a2:	f7f9 ffb5 	bl	8000210 <__aeabi_dsub>
 80062a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006540 <__ieee754_rem_pio2+0x308>)
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f7f9 ffb0 	bl	8000210 <__aeabi_dsub>
 80062b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80062b4:	f04f 0b01 	mov.w	fp, #1
 80062b8:	4658      	mov	r0, fp
 80062ba:	b00b      	add	sp, #44	; 0x2c
 80062bc:	ecbd 8b02 	vpop	{d8}
 80062c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c4:	a3a0      	add	r3, pc, #640	; (adr r3, 8006548 <__ieee754_rem_pio2+0x310>)
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	f7f9 ffa1 	bl	8000210 <__aeabi_dsub>
 80062ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8006550 <__ieee754_rem_pio2+0x318>)
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	4604      	mov	r4, r0
 80062d6:	460d      	mov	r5, r1
 80062d8:	f7f9 ff9a 	bl	8000210 <__aeabi_dsub>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	e9ca 2300 	strd	r2, r3, [sl]
 80062e4:	4620      	mov	r0, r4
 80062e6:	4629      	mov	r1, r5
 80062e8:	f7f9 ff92 	bl	8000210 <__aeabi_dsub>
 80062ec:	a398      	add	r3, pc, #608	; (adr r3, 8006550 <__ieee754_rem_pio2+0x318>)
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	e7db      	b.n	80062ac <__ieee754_rem_pio2+0x74>
 80062f4:	f7f9 ff8e 	bl	8000214 <__adddf3>
 80062f8:	45b0      	cmp	r8, r6
 80062fa:	4604      	mov	r4, r0
 80062fc:	460d      	mov	r5, r1
 80062fe:	d016      	beq.n	800632e <__ieee754_rem_pio2+0xf6>
 8006300:	a38f      	add	r3, pc, #572	; (adr r3, 8006540 <__ieee754_rem_pio2+0x308>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f7f9 ff85 	bl	8000214 <__adddf3>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	e9ca 2300 	strd	r2, r3, [sl]
 8006312:	4620      	mov	r0, r4
 8006314:	4629      	mov	r1, r5
 8006316:	f7f9 ff7b 	bl	8000210 <__aeabi_dsub>
 800631a:	a389      	add	r3, pc, #548	; (adr r3, 8006540 <__ieee754_rem_pio2+0x308>)
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f7f9 ff78 	bl	8000214 <__adddf3>
 8006324:	f04f 3bff 	mov.w	fp, #4294967295
 8006328:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800632c:	e7c4      	b.n	80062b8 <__ieee754_rem_pio2+0x80>
 800632e:	a386      	add	r3, pc, #536	; (adr r3, 8006548 <__ieee754_rem_pio2+0x310>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	f7f9 ff6e 	bl	8000214 <__adddf3>
 8006338:	a385      	add	r3, pc, #532	; (adr r3, 8006550 <__ieee754_rem_pio2+0x318>)
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	4604      	mov	r4, r0
 8006340:	460d      	mov	r5, r1
 8006342:	f7f9 ff67 	bl	8000214 <__adddf3>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	e9ca 2300 	strd	r2, r3, [sl]
 800634e:	4620      	mov	r0, r4
 8006350:	4629      	mov	r1, r5
 8006352:	f7f9 ff5d 	bl	8000210 <__aeabi_dsub>
 8006356:	a37e      	add	r3, pc, #504	; (adr r3, 8006550 <__ieee754_rem_pio2+0x318>)
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	e7e0      	b.n	8006320 <__ieee754_rem_pio2+0xe8>
 800635e:	4b87      	ldr	r3, [pc, #540]	; (800657c <__ieee754_rem_pio2+0x344>)
 8006360:	4598      	cmp	r8, r3
 8006362:	f300 80d8 	bgt.w	8006516 <__ieee754_rem_pio2+0x2de>
 8006366:	f000 f96d 	bl	8006644 <fabs>
 800636a:	ec55 4b10 	vmov	r4, r5, d0
 800636e:	ee10 0a10 	vmov	r0, s0
 8006372:	a379      	add	r3, pc, #484	; (adr r3, 8006558 <__ieee754_rem_pio2+0x320>)
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	4629      	mov	r1, r5
 800637a:	f7fa f901 	bl	8000580 <__aeabi_dmul>
 800637e:	4b80      	ldr	r3, [pc, #512]	; (8006580 <__ieee754_rem_pio2+0x348>)
 8006380:	2200      	movs	r2, #0
 8006382:	f7f9 ff47 	bl	8000214 <__adddf3>
 8006386:	f7fa fb95 	bl	8000ab4 <__aeabi_d2iz>
 800638a:	4683      	mov	fp, r0
 800638c:	f7fa f88e 	bl	80004ac <__aeabi_i2d>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	ec43 2b18 	vmov	d8, r2, r3
 8006398:	a367      	add	r3, pc, #412	; (adr r3, 8006538 <__ieee754_rem_pio2+0x300>)
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	f7fa f8ef 	bl	8000580 <__aeabi_dmul>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4620      	mov	r0, r4
 80063a8:	4629      	mov	r1, r5
 80063aa:	f7f9 ff31 	bl	8000210 <__aeabi_dsub>
 80063ae:	a364      	add	r3, pc, #400	; (adr r3, 8006540 <__ieee754_rem_pio2+0x308>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	4606      	mov	r6, r0
 80063b6:	460f      	mov	r7, r1
 80063b8:	ec51 0b18 	vmov	r0, r1, d8
 80063bc:	f7fa f8e0 	bl	8000580 <__aeabi_dmul>
 80063c0:	f1bb 0f1f 	cmp.w	fp, #31
 80063c4:	4604      	mov	r4, r0
 80063c6:	460d      	mov	r5, r1
 80063c8:	dc0d      	bgt.n	80063e6 <__ieee754_rem_pio2+0x1ae>
 80063ca:	4b6e      	ldr	r3, [pc, #440]	; (8006584 <__ieee754_rem_pio2+0x34c>)
 80063cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80063d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d4:	4543      	cmp	r3, r8
 80063d6:	d006      	beq.n	80063e6 <__ieee754_rem_pio2+0x1ae>
 80063d8:	4622      	mov	r2, r4
 80063da:	462b      	mov	r3, r5
 80063dc:	4630      	mov	r0, r6
 80063de:	4639      	mov	r1, r7
 80063e0:	f7f9 ff16 	bl	8000210 <__aeabi_dsub>
 80063e4:	e00e      	b.n	8006404 <__ieee754_rem_pio2+0x1cc>
 80063e6:	462b      	mov	r3, r5
 80063e8:	4622      	mov	r2, r4
 80063ea:	4630      	mov	r0, r6
 80063ec:	4639      	mov	r1, r7
 80063ee:	f7f9 ff0f 	bl	8000210 <__aeabi_dsub>
 80063f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80063f6:	9303      	str	r3, [sp, #12]
 80063f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80063fc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006400:	2b10      	cmp	r3, #16
 8006402:	dc02      	bgt.n	800640a <__ieee754_rem_pio2+0x1d2>
 8006404:	e9ca 0100 	strd	r0, r1, [sl]
 8006408:	e039      	b.n	800647e <__ieee754_rem_pio2+0x246>
 800640a:	a34f      	add	r3, pc, #316	; (adr r3, 8006548 <__ieee754_rem_pio2+0x310>)
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	ec51 0b18 	vmov	r0, r1, d8
 8006414:	f7fa f8b4 	bl	8000580 <__aeabi_dmul>
 8006418:	4604      	mov	r4, r0
 800641a:	460d      	mov	r5, r1
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4630      	mov	r0, r6
 8006422:	4639      	mov	r1, r7
 8006424:	f7f9 fef4 	bl	8000210 <__aeabi_dsub>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4680      	mov	r8, r0
 800642e:	4689      	mov	r9, r1
 8006430:	4630      	mov	r0, r6
 8006432:	4639      	mov	r1, r7
 8006434:	f7f9 feec 	bl	8000210 <__aeabi_dsub>
 8006438:	4622      	mov	r2, r4
 800643a:	462b      	mov	r3, r5
 800643c:	f7f9 fee8 	bl	8000210 <__aeabi_dsub>
 8006440:	a343      	add	r3, pc, #268	; (adr r3, 8006550 <__ieee754_rem_pio2+0x318>)
 8006442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006446:	4604      	mov	r4, r0
 8006448:	460d      	mov	r5, r1
 800644a:	ec51 0b18 	vmov	r0, r1, d8
 800644e:	f7fa f897 	bl	8000580 <__aeabi_dmul>
 8006452:	4622      	mov	r2, r4
 8006454:	462b      	mov	r3, r5
 8006456:	f7f9 fedb 	bl	8000210 <__aeabi_dsub>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4604      	mov	r4, r0
 8006460:	460d      	mov	r5, r1
 8006462:	4640      	mov	r0, r8
 8006464:	4649      	mov	r1, r9
 8006466:	f7f9 fed3 	bl	8000210 <__aeabi_dsub>
 800646a:	9a03      	ldr	r2, [sp, #12]
 800646c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b31      	cmp	r3, #49	; 0x31
 8006474:	dc24      	bgt.n	80064c0 <__ieee754_rem_pio2+0x288>
 8006476:	e9ca 0100 	strd	r0, r1, [sl]
 800647a:	4646      	mov	r6, r8
 800647c:	464f      	mov	r7, r9
 800647e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006482:	4630      	mov	r0, r6
 8006484:	4642      	mov	r2, r8
 8006486:	464b      	mov	r3, r9
 8006488:	4639      	mov	r1, r7
 800648a:	f7f9 fec1 	bl	8000210 <__aeabi_dsub>
 800648e:	462b      	mov	r3, r5
 8006490:	4622      	mov	r2, r4
 8006492:	f7f9 febd 	bl	8000210 <__aeabi_dsub>
 8006496:	9b02      	ldr	r3, [sp, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800649e:	f6bf af0b 	bge.w	80062b8 <__ieee754_rem_pio2+0x80>
 80064a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80064a6:	f8ca 3004 	str.w	r3, [sl, #4]
 80064aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064ae:	f8ca 8000 	str.w	r8, [sl]
 80064b2:	f8ca 0008 	str.w	r0, [sl, #8]
 80064b6:	f8ca 300c 	str.w	r3, [sl, #12]
 80064ba:	f1cb 0b00 	rsb	fp, fp, #0
 80064be:	e6fb      	b.n	80062b8 <__ieee754_rem_pio2+0x80>
 80064c0:	a327      	add	r3, pc, #156	; (adr r3, 8006560 <__ieee754_rem_pio2+0x328>)
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	ec51 0b18 	vmov	r0, r1, d8
 80064ca:	f7fa f859 	bl	8000580 <__aeabi_dmul>
 80064ce:	4604      	mov	r4, r0
 80064d0:	460d      	mov	r5, r1
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4640      	mov	r0, r8
 80064d8:	4649      	mov	r1, r9
 80064da:	f7f9 fe99 	bl	8000210 <__aeabi_dsub>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	4606      	mov	r6, r0
 80064e4:	460f      	mov	r7, r1
 80064e6:	4640      	mov	r0, r8
 80064e8:	4649      	mov	r1, r9
 80064ea:	f7f9 fe91 	bl	8000210 <__aeabi_dsub>
 80064ee:	4622      	mov	r2, r4
 80064f0:	462b      	mov	r3, r5
 80064f2:	f7f9 fe8d 	bl	8000210 <__aeabi_dsub>
 80064f6:	a31c      	add	r3, pc, #112	; (adr r3, 8006568 <__ieee754_rem_pio2+0x330>)
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	4604      	mov	r4, r0
 80064fe:	460d      	mov	r5, r1
 8006500:	ec51 0b18 	vmov	r0, r1, d8
 8006504:	f7fa f83c 	bl	8000580 <__aeabi_dmul>
 8006508:	4622      	mov	r2, r4
 800650a:	462b      	mov	r3, r5
 800650c:	f7f9 fe80 	bl	8000210 <__aeabi_dsub>
 8006510:	4604      	mov	r4, r0
 8006512:	460d      	mov	r5, r1
 8006514:	e760      	b.n	80063d8 <__ieee754_rem_pio2+0x1a0>
 8006516:	4b1c      	ldr	r3, [pc, #112]	; (8006588 <__ieee754_rem_pio2+0x350>)
 8006518:	4598      	cmp	r8, r3
 800651a:	dd37      	ble.n	800658c <__ieee754_rem_pio2+0x354>
 800651c:	ee10 2a10 	vmov	r2, s0
 8006520:	462b      	mov	r3, r5
 8006522:	4620      	mov	r0, r4
 8006524:	4629      	mov	r1, r5
 8006526:	f7f9 fe73 	bl	8000210 <__aeabi_dsub>
 800652a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800652e:	e9ca 0100 	strd	r0, r1, [sl]
 8006532:	e695      	b.n	8006260 <__ieee754_rem_pio2+0x28>
 8006534:	f3af 8000 	nop.w
 8006538:	54400000 	.word	0x54400000
 800653c:	3ff921fb 	.word	0x3ff921fb
 8006540:	1a626331 	.word	0x1a626331
 8006544:	3dd0b461 	.word	0x3dd0b461
 8006548:	1a600000 	.word	0x1a600000
 800654c:	3dd0b461 	.word	0x3dd0b461
 8006550:	2e037073 	.word	0x2e037073
 8006554:	3ba3198a 	.word	0x3ba3198a
 8006558:	6dc9c883 	.word	0x6dc9c883
 800655c:	3fe45f30 	.word	0x3fe45f30
 8006560:	2e000000 	.word	0x2e000000
 8006564:	3ba3198a 	.word	0x3ba3198a
 8006568:	252049c1 	.word	0x252049c1
 800656c:	397b839a 	.word	0x397b839a
 8006570:	3fe921fb 	.word	0x3fe921fb
 8006574:	4002d97b 	.word	0x4002d97b
 8006578:	3ff921fb 	.word	0x3ff921fb
 800657c:	413921fb 	.word	0x413921fb
 8006580:	3fe00000 	.word	0x3fe00000
 8006584:	08007058 	.word	0x08007058
 8006588:	7fefffff 	.word	0x7fefffff
 800658c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006590:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006594:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006598:	4620      	mov	r0, r4
 800659a:	460d      	mov	r5, r1
 800659c:	f7fa fa8a 	bl	8000ab4 <__aeabi_d2iz>
 80065a0:	f7f9 ff84 	bl	80004ac <__aeabi_i2d>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4620      	mov	r0, r4
 80065aa:	4629      	mov	r1, r5
 80065ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065b0:	f7f9 fe2e 	bl	8000210 <__aeabi_dsub>
 80065b4:	4b21      	ldr	r3, [pc, #132]	; (800663c <__ieee754_rem_pio2+0x404>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	f7f9 ffe2 	bl	8000580 <__aeabi_dmul>
 80065bc:	460d      	mov	r5, r1
 80065be:	4604      	mov	r4, r0
 80065c0:	f7fa fa78 	bl	8000ab4 <__aeabi_d2iz>
 80065c4:	f7f9 ff72 	bl	80004ac <__aeabi_i2d>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4620      	mov	r0, r4
 80065ce:	4629      	mov	r1, r5
 80065d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065d4:	f7f9 fe1c 	bl	8000210 <__aeabi_dsub>
 80065d8:	4b18      	ldr	r3, [pc, #96]	; (800663c <__ieee754_rem_pio2+0x404>)
 80065da:	2200      	movs	r2, #0
 80065dc:	f7f9 ffd0 	bl	8000580 <__aeabi_dmul>
 80065e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80065e4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80065e8:	2703      	movs	r7, #3
 80065ea:	2400      	movs	r4, #0
 80065ec:	2500      	movs	r5, #0
 80065ee:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80065f2:	4622      	mov	r2, r4
 80065f4:	462b      	mov	r3, r5
 80065f6:	46b9      	mov	r9, r7
 80065f8:	3f01      	subs	r7, #1
 80065fa:	f7fa fa29 	bl	8000a50 <__aeabi_dcmpeq>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d1f5      	bne.n	80065ee <__ieee754_rem_pio2+0x3b6>
 8006602:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <__ieee754_rem_pio2+0x408>)
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	2302      	movs	r3, #2
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	4632      	mov	r2, r6
 800660c:	464b      	mov	r3, r9
 800660e:	4651      	mov	r1, sl
 8006610:	a804      	add	r0, sp, #16
 8006612:	f000 f821 	bl	8006658 <__kernel_rem_pio2>
 8006616:	9b02      	ldr	r3, [sp, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	4683      	mov	fp, r0
 800661c:	f6bf ae4c 	bge.w	80062b8 <__ieee754_rem_pio2+0x80>
 8006620:	e9da 2100 	ldrd	r2, r1, [sl]
 8006624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006628:	e9ca 2300 	strd	r2, r3, [sl]
 800662c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006630:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006634:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006638:	e73f      	b.n	80064ba <__ieee754_rem_pio2+0x282>
 800663a:	bf00      	nop
 800663c:	41700000 	.word	0x41700000
 8006640:	080070d8 	.word	0x080070d8

08006644 <fabs>:
 8006644:	ec51 0b10 	vmov	r0, r1, d0
 8006648:	ee10 2a10 	vmov	r2, s0
 800664c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006650:	ec43 2b10 	vmov	d0, r2, r3
 8006654:	4770      	bx	lr
	...

08006658 <__kernel_rem_pio2>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	ed2d 8b02 	vpush	{d8}
 8006660:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006664:	f112 0f14 	cmn.w	r2, #20
 8006668:	9306      	str	r3, [sp, #24]
 800666a:	9104      	str	r1, [sp, #16]
 800666c:	4bc2      	ldr	r3, [pc, #776]	; (8006978 <__kernel_rem_pio2+0x320>)
 800666e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006670:	9009      	str	r0, [sp, #36]	; 0x24
 8006672:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	9b06      	ldr	r3, [sp, #24]
 800667a:	f103 33ff 	add.w	r3, r3, #4294967295
 800667e:	bfa8      	it	ge
 8006680:	1ed4      	subge	r4, r2, #3
 8006682:	9305      	str	r3, [sp, #20]
 8006684:	bfb2      	itee	lt
 8006686:	2400      	movlt	r4, #0
 8006688:	2318      	movge	r3, #24
 800668a:	fb94 f4f3 	sdivge	r4, r4, r3
 800668e:	f06f 0317 	mvn.w	r3, #23
 8006692:	fb04 3303 	mla	r3, r4, r3, r3
 8006696:	eb03 0a02 	add.w	sl, r3, r2
 800669a:	9b00      	ldr	r3, [sp, #0]
 800669c:	9a05      	ldr	r2, [sp, #20]
 800669e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006968 <__kernel_rem_pio2+0x310>
 80066a2:	eb03 0802 	add.w	r8, r3, r2
 80066a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80066a8:	1aa7      	subs	r7, r4, r2
 80066aa:	ae20      	add	r6, sp, #128	; 0x80
 80066ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80066b0:	2500      	movs	r5, #0
 80066b2:	4545      	cmp	r5, r8
 80066b4:	dd13      	ble.n	80066de <__kernel_rem_pio2+0x86>
 80066b6:	9b06      	ldr	r3, [sp, #24]
 80066b8:	aa20      	add	r2, sp, #128	; 0x80
 80066ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80066be:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80066c2:	f04f 0800 	mov.w	r8, #0
 80066c6:	9b00      	ldr	r3, [sp, #0]
 80066c8:	4598      	cmp	r8, r3
 80066ca:	dc31      	bgt.n	8006730 <__kernel_rem_pio2+0xd8>
 80066cc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006968 <__kernel_rem_pio2+0x310>
 80066d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80066d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80066d8:	462f      	mov	r7, r5
 80066da:	2600      	movs	r6, #0
 80066dc:	e01b      	b.n	8006716 <__kernel_rem_pio2+0xbe>
 80066de:	42ef      	cmn	r7, r5
 80066e0:	d407      	bmi.n	80066f2 <__kernel_rem_pio2+0x9a>
 80066e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80066e6:	f7f9 fee1 	bl	80004ac <__aeabi_i2d>
 80066ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80066ee:	3501      	adds	r5, #1
 80066f0:	e7df      	b.n	80066b2 <__kernel_rem_pio2+0x5a>
 80066f2:	ec51 0b18 	vmov	r0, r1, d8
 80066f6:	e7f8      	b.n	80066ea <__kernel_rem_pio2+0x92>
 80066f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006700:	f7f9 ff3e 	bl	8000580 <__aeabi_dmul>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800670c:	f7f9 fd82 	bl	8000214 <__adddf3>
 8006710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006714:	3601      	adds	r6, #1
 8006716:	9b05      	ldr	r3, [sp, #20]
 8006718:	429e      	cmp	r6, r3
 800671a:	f1a7 0708 	sub.w	r7, r7, #8
 800671e:	ddeb      	ble.n	80066f8 <__kernel_rem_pio2+0xa0>
 8006720:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006724:	f108 0801 	add.w	r8, r8, #1
 8006728:	ecab 7b02 	vstmia	fp!, {d7}
 800672c:	3508      	adds	r5, #8
 800672e:	e7ca      	b.n	80066c6 <__kernel_rem_pio2+0x6e>
 8006730:	9b00      	ldr	r3, [sp, #0]
 8006732:	aa0c      	add	r2, sp, #48	; 0x30
 8006734:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006738:	930b      	str	r3, [sp, #44]	; 0x2c
 800673a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800673c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006740:	9c00      	ldr	r4, [sp, #0]
 8006742:	930a      	str	r3, [sp, #40]	; 0x28
 8006744:	00e3      	lsls	r3, r4, #3
 8006746:	9308      	str	r3, [sp, #32]
 8006748:	ab98      	add	r3, sp, #608	; 0x260
 800674a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800674e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006752:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006756:	ab70      	add	r3, sp, #448	; 0x1c0
 8006758:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800675c:	46c3      	mov	fp, r8
 800675e:	46a1      	mov	r9, r4
 8006760:	f1b9 0f00 	cmp.w	r9, #0
 8006764:	f1a5 0508 	sub.w	r5, r5, #8
 8006768:	dc77      	bgt.n	800685a <__kernel_rem_pio2+0x202>
 800676a:	ec47 6b10 	vmov	d0, r6, r7
 800676e:	4650      	mov	r0, sl
 8006770:	f000 fac2 	bl	8006cf8 <scalbn>
 8006774:	ec57 6b10 	vmov	r6, r7, d0
 8006778:	2200      	movs	r2, #0
 800677a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800677e:	ee10 0a10 	vmov	r0, s0
 8006782:	4639      	mov	r1, r7
 8006784:	f7f9 fefc 	bl	8000580 <__aeabi_dmul>
 8006788:	ec41 0b10 	vmov	d0, r0, r1
 800678c:	f000 fb34 	bl	8006df8 <floor>
 8006790:	4b7a      	ldr	r3, [pc, #488]	; (800697c <__kernel_rem_pio2+0x324>)
 8006792:	ec51 0b10 	vmov	r0, r1, d0
 8006796:	2200      	movs	r2, #0
 8006798:	f7f9 fef2 	bl	8000580 <__aeabi_dmul>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4630      	mov	r0, r6
 80067a2:	4639      	mov	r1, r7
 80067a4:	f7f9 fd34 	bl	8000210 <__aeabi_dsub>
 80067a8:	460f      	mov	r7, r1
 80067aa:	4606      	mov	r6, r0
 80067ac:	f7fa f982 	bl	8000ab4 <__aeabi_d2iz>
 80067b0:	9002      	str	r0, [sp, #8]
 80067b2:	f7f9 fe7b 	bl	80004ac <__aeabi_i2d>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	4630      	mov	r0, r6
 80067bc:	4639      	mov	r1, r7
 80067be:	f7f9 fd27 	bl	8000210 <__aeabi_dsub>
 80067c2:	f1ba 0f00 	cmp.w	sl, #0
 80067c6:	4606      	mov	r6, r0
 80067c8:	460f      	mov	r7, r1
 80067ca:	dd6d      	ble.n	80068a8 <__kernel_rem_pio2+0x250>
 80067cc:	1e61      	subs	r1, r4, #1
 80067ce:	ab0c      	add	r3, sp, #48	; 0x30
 80067d0:	9d02      	ldr	r5, [sp, #8]
 80067d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067d6:	f1ca 0018 	rsb	r0, sl, #24
 80067da:	fa43 f200 	asr.w	r2, r3, r0
 80067de:	4415      	add	r5, r2
 80067e0:	4082      	lsls	r2, r0
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	aa0c      	add	r2, sp, #48	; 0x30
 80067e6:	9502      	str	r5, [sp, #8]
 80067e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80067ec:	f1ca 0217 	rsb	r2, sl, #23
 80067f0:	fa43 fb02 	asr.w	fp, r3, r2
 80067f4:	f1bb 0f00 	cmp.w	fp, #0
 80067f8:	dd65      	ble.n	80068c6 <__kernel_rem_pio2+0x26e>
 80067fa:	9b02      	ldr	r3, [sp, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	3301      	adds	r3, #1
 8006800:	9302      	str	r3, [sp, #8]
 8006802:	4615      	mov	r5, r2
 8006804:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006808:	4294      	cmp	r4, r2
 800680a:	f300 809f 	bgt.w	800694c <__kernel_rem_pio2+0x2f4>
 800680e:	f1ba 0f00 	cmp.w	sl, #0
 8006812:	dd07      	ble.n	8006824 <__kernel_rem_pio2+0x1cc>
 8006814:	f1ba 0f01 	cmp.w	sl, #1
 8006818:	f000 80c1 	beq.w	800699e <__kernel_rem_pio2+0x346>
 800681c:	f1ba 0f02 	cmp.w	sl, #2
 8006820:	f000 80c7 	beq.w	80069b2 <__kernel_rem_pio2+0x35a>
 8006824:	f1bb 0f02 	cmp.w	fp, #2
 8006828:	d14d      	bne.n	80068c6 <__kernel_rem_pio2+0x26e>
 800682a:	4632      	mov	r2, r6
 800682c:	463b      	mov	r3, r7
 800682e:	4954      	ldr	r1, [pc, #336]	; (8006980 <__kernel_rem_pio2+0x328>)
 8006830:	2000      	movs	r0, #0
 8006832:	f7f9 fced 	bl	8000210 <__aeabi_dsub>
 8006836:	4606      	mov	r6, r0
 8006838:	460f      	mov	r7, r1
 800683a:	2d00      	cmp	r5, #0
 800683c:	d043      	beq.n	80068c6 <__kernel_rem_pio2+0x26e>
 800683e:	4650      	mov	r0, sl
 8006840:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006970 <__kernel_rem_pio2+0x318>
 8006844:	f000 fa58 	bl	8006cf8 <scalbn>
 8006848:	4630      	mov	r0, r6
 800684a:	4639      	mov	r1, r7
 800684c:	ec53 2b10 	vmov	r2, r3, d0
 8006850:	f7f9 fcde 	bl	8000210 <__aeabi_dsub>
 8006854:	4606      	mov	r6, r0
 8006856:	460f      	mov	r7, r1
 8006858:	e035      	b.n	80068c6 <__kernel_rem_pio2+0x26e>
 800685a:	4b4a      	ldr	r3, [pc, #296]	; (8006984 <__kernel_rem_pio2+0x32c>)
 800685c:	2200      	movs	r2, #0
 800685e:	4630      	mov	r0, r6
 8006860:	4639      	mov	r1, r7
 8006862:	f7f9 fe8d 	bl	8000580 <__aeabi_dmul>
 8006866:	f7fa f925 	bl	8000ab4 <__aeabi_d2iz>
 800686a:	f7f9 fe1f 	bl	80004ac <__aeabi_i2d>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	ec43 2b18 	vmov	d8, r2, r3
 8006876:	4b44      	ldr	r3, [pc, #272]	; (8006988 <__kernel_rem_pio2+0x330>)
 8006878:	2200      	movs	r2, #0
 800687a:	f7f9 fe81 	bl	8000580 <__aeabi_dmul>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4630      	mov	r0, r6
 8006884:	4639      	mov	r1, r7
 8006886:	f7f9 fcc3 	bl	8000210 <__aeabi_dsub>
 800688a:	f7fa f913 	bl	8000ab4 <__aeabi_d2iz>
 800688e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006892:	f84b 0b04 	str.w	r0, [fp], #4
 8006896:	ec51 0b18 	vmov	r0, r1, d8
 800689a:	f7f9 fcbb 	bl	8000214 <__adddf3>
 800689e:	f109 39ff 	add.w	r9, r9, #4294967295
 80068a2:	4606      	mov	r6, r0
 80068a4:	460f      	mov	r7, r1
 80068a6:	e75b      	b.n	8006760 <__kernel_rem_pio2+0x108>
 80068a8:	d106      	bne.n	80068b8 <__kernel_rem_pio2+0x260>
 80068aa:	1e63      	subs	r3, r4, #1
 80068ac:	aa0c      	add	r2, sp, #48	; 0x30
 80068ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80068b6:	e79d      	b.n	80067f4 <__kernel_rem_pio2+0x19c>
 80068b8:	4b34      	ldr	r3, [pc, #208]	; (800698c <__kernel_rem_pio2+0x334>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	f7fa f8e6 	bl	8000a8c <__aeabi_dcmpge>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d140      	bne.n	8006946 <__kernel_rem_pio2+0x2ee>
 80068c4:	4683      	mov	fp, r0
 80068c6:	2200      	movs	r2, #0
 80068c8:	2300      	movs	r3, #0
 80068ca:	4630      	mov	r0, r6
 80068cc:	4639      	mov	r1, r7
 80068ce:	f7fa f8bf 	bl	8000a50 <__aeabi_dcmpeq>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	f000 80c1 	beq.w	8006a5a <__kernel_rem_pio2+0x402>
 80068d8:	1e65      	subs	r5, r4, #1
 80068da:	462b      	mov	r3, r5
 80068dc:	2200      	movs	r2, #0
 80068de:	9900      	ldr	r1, [sp, #0]
 80068e0:	428b      	cmp	r3, r1
 80068e2:	da6d      	bge.n	80069c0 <__kernel_rem_pio2+0x368>
 80068e4:	2a00      	cmp	r2, #0
 80068e6:	f000 808a 	beq.w	80069fe <__kernel_rem_pio2+0x3a6>
 80068ea:	ab0c      	add	r3, sp, #48	; 0x30
 80068ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80068f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 80ae 	beq.w	8006a56 <__kernel_rem_pio2+0x3fe>
 80068fa:	4650      	mov	r0, sl
 80068fc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006970 <__kernel_rem_pio2+0x318>
 8006900:	f000 f9fa 	bl	8006cf8 <scalbn>
 8006904:	1c6b      	adds	r3, r5, #1
 8006906:	00da      	lsls	r2, r3, #3
 8006908:	9205      	str	r2, [sp, #20]
 800690a:	ec57 6b10 	vmov	r6, r7, d0
 800690e:	aa70      	add	r2, sp, #448	; 0x1c0
 8006910:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006984 <__kernel_rem_pio2+0x32c>
 8006914:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006918:	462c      	mov	r4, r5
 800691a:	f04f 0800 	mov.w	r8, #0
 800691e:	2c00      	cmp	r4, #0
 8006920:	f280 80d4 	bge.w	8006acc <__kernel_rem_pio2+0x474>
 8006924:	462c      	mov	r4, r5
 8006926:	2c00      	cmp	r4, #0
 8006928:	f2c0 8102 	blt.w	8006b30 <__kernel_rem_pio2+0x4d8>
 800692c:	4b18      	ldr	r3, [pc, #96]	; (8006990 <__kernel_rem_pio2+0x338>)
 800692e:	461e      	mov	r6, r3
 8006930:	ab70      	add	r3, sp, #448	; 0x1c0
 8006932:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8006936:	1b2b      	subs	r3, r5, r4
 8006938:	f04f 0900 	mov.w	r9, #0
 800693c:	f04f 0a00 	mov.w	sl, #0
 8006940:	2700      	movs	r7, #0
 8006942:	9306      	str	r3, [sp, #24]
 8006944:	e0e6      	b.n	8006b14 <__kernel_rem_pio2+0x4bc>
 8006946:	f04f 0b02 	mov.w	fp, #2
 800694a:	e756      	b.n	80067fa <__kernel_rem_pio2+0x1a2>
 800694c:	f8d8 3000 	ldr.w	r3, [r8]
 8006950:	bb05      	cbnz	r5, 8006994 <__kernel_rem_pio2+0x33c>
 8006952:	b123      	cbz	r3, 800695e <__kernel_rem_pio2+0x306>
 8006954:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006958:	f8c8 3000 	str.w	r3, [r8]
 800695c:	2301      	movs	r3, #1
 800695e:	3201      	adds	r2, #1
 8006960:	f108 0804 	add.w	r8, r8, #4
 8006964:	461d      	mov	r5, r3
 8006966:	e74f      	b.n	8006808 <__kernel_rem_pio2+0x1b0>
	...
 8006974:	3ff00000 	.word	0x3ff00000
 8006978:	08007220 	.word	0x08007220
 800697c:	40200000 	.word	0x40200000
 8006980:	3ff00000 	.word	0x3ff00000
 8006984:	3e700000 	.word	0x3e700000
 8006988:	41700000 	.word	0x41700000
 800698c:	3fe00000 	.word	0x3fe00000
 8006990:	080071e0 	.word	0x080071e0
 8006994:	1acb      	subs	r3, r1, r3
 8006996:	f8c8 3000 	str.w	r3, [r8]
 800699a:	462b      	mov	r3, r5
 800699c:	e7df      	b.n	800695e <__kernel_rem_pio2+0x306>
 800699e:	1e62      	subs	r2, r4, #1
 80069a0:	ab0c      	add	r3, sp, #48	; 0x30
 80069a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80069aa:	a90c      	add	r1, sp, #48	; 0x30
 80069ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80069b0:	e738      	b.n	8006824 <__kernel_rem_pio2+0x1cc>
 80069b2:	1e62      	subs	r2, r4, #1
 80069b4:	ab0c      	add	r3, sp, #48	; 0x30
 80069b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80069be:	e7f4      	b.n	80069aa <__kernel_rem_pio2+0x352>
 80069c0:	a90c      	add	r1, sp, #48	; 0x30
 80069c2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	430a      	orrs	r2, r1
 80069ca:	e788      	b.n	80068de <__kernel_rem_pio2+0x286>
 80069cc:	3301      	adds	r3, #1
 80069ce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80069d2:	2900      	cmp	r1, #0
 80069d4:	d0fa      	beq.n	80069cc <__kernel_rem_pio2+0x374>
 80069d6:	9a08      	ldr	r2, [sp, #32]
 80069d8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80069dc:	446a      	add	r2, sp
 80069de:	3a98      	subs	r2, #152	; 0x98
 80069e0:	9208      	str	r2, [sp, #32]
 80069e2:	9a06      	ldr	r2, [sp, #24]
 80069e4:	a920      	add	r1, sp, #128	; 0x80
 80069e6:	18a2      	adds	r2, r4, r2
 80069e8:	18e3      	adds	r3, r4, r3
 80069ea:	f104 0801 	add.w	r8, r4, #1
 80069ee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80069f2:	9302      	str	r3, [sp, #8]
 80069f4:	9b02      	ldr	r3, [sp, #8]
 80069f6:	4543      	cmp	r3, r8
 80069f8:	da04      	bge.n	8006a04 <__kernel_rem_pio2+0x3ac>
 80069fa:	461c      	mov	r4, r3
 80069fc:	e6a2      	b.n	8006744 <__kernel_rem_pio2+0xec>
 80069fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a00:	2301      	movs	r3, #1
 8006a02:	e7e4      	b.n	80069ce <__kernel_rem_pio2+0x376>
 8006a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a06:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006a0a:	f7f9 fd4f 	bl	80004ac <__aeabi_i2d>
 8006a0e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a14:	46ab      	mov	fp, r5
 8006a16:	461c      	mov	r4, r3
 8006a18:	f04f 0900 	mov.w	r9, #0
 8006a1c:	2600      	movs	r6, #0
 8006a1e:	2700      	movs	r7, #0
 8006a20:	9b05      	ldr	r3, [sp, #20]
 8006a22:	4599      	cmp	r9, r3
 8006a24:	dd06      	ble.n	8006a34 <__kernel_rem_pio2+0x3dc>
 8006a26:	9b08      	ldr	r3, [sp, #32]
 8006a28:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006a2c:	f108 0801 	add.w	r8, r8, #1
 8006a30:	9308      	str	r3, [sp, #32]
 8006a32:	e7df      	b.n	80069f4 <__kernel_rem_pio2+0x39c>
 8006a34:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006a38:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006a3c:	f7f9 fda0 	bl	8000580 <__aeabi_dmul>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4630      	mov	r0, r6
 8006a46:	4639      	mov	r1, r7
 8006a48:	f7f9 fbe4 	bl	8000214 <__adddf3>
 8006a4c:	f109 0901 	add.w	r9, r9, #1
 8006a50:	4606      	mov	r6, r0
 8006a52:	460f      	mov	r7, r1
 8006a54:	e7e4      	b.n	8006a20 <__kernel_rem_pio2+0x3c8>
 8006a56:	3d01      	subs	r5, #1
 8006a58:	e747      	b.n	80068ea <__kernel_rem_pio2+0x292>
 8006a5a:	ec47 6b10 	vmov	d0, r6, r7
 8006a5e:	f1ca 0000 	rsb	r0, sl, #0
 8006a62:	f000 f949 	bl	8006cf8 <scalbn>
 8006a66:	ec57 6b10 	vmov	r6, r7, d0
 8006a6a:	4ba0      	ldr	r3, [pc, #640]	; (8006cec <__kernel_rem_pio2+0x694>)
 8006a6c:	ee10 0a10 	vmov	r0, s0
 8006a70:	2200      	movs	r2, #0
 8006a72:	4639      	mov	r1, r7
 8006a74:	f7fa f80a 	bl	8000a8c <__aeabi_dcmpge>
 8006a78:	b1f8      	cbz	r0, 8006aba <__kernel_rem_pio2+0x462>
 8006a7a:	4b9d      	ldr	r3, [pc, #628]	; (8006cf0 <__kernel_rem_pio2+0x698>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4630      	mov	r0, r6
 8006a80:	4639      	mov	r1, r7
 8006a82:	f7f9 fd7d 	bl	8000580 <__aeabi_dmul>
 8006a86:	f7fa f815 	bl	8000ab4 <__aeabi_d2iz>
 8006a8a:	4680      	mov	r8, r0
 8006a8c:	f7f9 fd0e 	bl	80004ac <__aeabi_i2d>
 8006a90:	4b96      	ldr	r3, [pc, #600]	; (8006cec <__kernel_rem_pio2+0x694>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	f7f9 fd74 	bl	8000580 <__aeabi_dmul>
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	4639      	mov	r1, r7
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f7f9 fbb6 	bl	8000210 <__aeabi_dsub>
 8006aa4:	f7fa f806 	bl	8000ab4 <__aeabi_d2iz>
 8006aa8:	1c65      	adds	r5, r4, #1
 8006aaa:	ab0c      	add	r3, sp, #48	; 0x30
 8006aac:	f10a 0a18 	add.w	sl, sl, #24
 8006ab0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006ab4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006ab8:	e71f      	b.n	80068fa <__kernel_rem_pio2+0x2a2>
 8006aba:	4630      	mov	r0, r6
 8006abc:	4639      	mov	r1, r7
 8006abe:	f7f9 fff9 	bl	8000ab4 <__aeabi_d2iz>
 8006ac2:	ab0c      	add	r3, sp, #48	; 0x30
 8006ac4:	4625      	mov	r5, r4
 8006ac6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006aca:	e716      	b.n	80068fa <__kernel_rem_pio2+0x2a2>
 8006acc:	ab0c      	add	r3, sp, #48	; 0x30
 8006ace:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006ad2:	f7f9 fceb 	bl	80004ac <__aeabi_i2d>
 8006ad6:	4632      	mov	r2, r6
 8006ad8:	463b      	mov	r3, r7
 8006ada:	f7f9 fd51 	bl	8000580 <__aeabi_dmul>
 8006ade:	4642      	mov	r2, r8
 8006ae0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	4639      	mov	r1, r7
 8006aea:	f7f9 fd49 	bl	8000580 <__aeabi_dmul>
 8006aee:	3c01      	subs	r4, #1
 8006af0:	4606      	mov	r6, r0
 8006af2:	460f      	mov	r7, r1
 8006af4:	e713      	b.n	800691e <__kernel_rem_pio2+0x2c6>
 8006af6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006afa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8006afe:	f7f9 fd3f 	bl	8000580 <__aeabi_dmul>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4648      	mov	r0, r9
 8006b08:	4651      	mov	r1, sl
 8006b0a:	f7f9 fb83 	bl	8000214 <__adddf3>
 8006b0e:	3701      	adds	r7, #1
 8006b10:	4681      	mov	r9, r0
 8006b12:	468a      	mov	sl, r1
 8006b14:	9b00      	ldr	r3, [sp, #0]
 8006b16:	429f      	cmp	r7, r3
 8006b18:	dc02      	bgt.n	8006b20 <__kernel_rem_pio2+0x4c8>
 8006b1a:	9b06      	ldr	r3, [sp, #24]
 8006b1c:	429f      	cmp	r7, r3
 8006b1e:	ddea      	ble.n	8006af6 <__kernel_rem_pio2+0x49e>
 8006b20:	9a06      	ldr	r2, [sp, #24]
 8006b22:	ab48      	add	r3, sp, #288	; 0x120
 8006b24:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006b28:	e9c6 9a00 	strd	r9, sl, [r6]
 8006b2c:	3c01      	subs	r4, #1
 8006b2e:	e6fa      	b.n	8006926 <__kernel_rem_pio2+0x2ce>
 8006b30:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	dc0b      	bgt.n	8006b4e <__kernel_rem_pio2+0x4f6>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	dc39      	bgt.n	8006bae <__kernel_rem_pio2+0x556>
 8006b3a:	d05d      	beq.n	8006bf8 <__kernel_rem_pio2+0x5a0>
 8006b3c:	9b02      	ldr	r3, [sp, #8]
 8006b3e:	f003 0007 	and.w	r0, r3, #7
 8006b42:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006b46:	ecbd 8b02 	vpop	{d8}
 8006b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d1f3      	bne.n	8006b3c <__kernel_rem_pio2+0x4e4>
 8006b54:	9b05      	ldr	r3, [sp, #20]
 8006b56:	9500      	str	r5, [sp, #0]
 8006b58:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006b5c:	eb0d 0403 	add.w	r4, sp, r3
 8006b60:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8006b64:	46a2      	mov	sl, r4
 8006b66:	9b00      	ldr	r3, [sp, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f1aa 0a08 	sub.w	sl, sl, #8
 8006b6e:	dc69      	bgt.n	8006c44 <__kernel_rem_pio2+0x5ec>
 8006b70:	46aa      	mov	sl, r5
 8006b72:	f1ba 0f01 	cmp.w	sl, #1
 8006b76:	f1a4 0408 	sub.w	r4, r4, #8
 8006b7a:	f300 8083 	bgt.w	8006c84 <__kernel_rem_pio2+0x62c>
 8006b7e:	9c05      	ldr	r4, [sp, #20]
 8006b80:	ab48      	add	r3, sp, #288	; 0x120
 8006b82:	441c      	add	r4, r3
 8006b84:	2000      	movs	r0, #0
 8006b86:	2100      	movs	r1, #0
 8006b88:	2d01      	cmp	r5, #1
 8006b8a:	f300 809a 	bgt.w	8006cc2 <__kernel_rem_pio2+0x66a>
 8006b8e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006b92:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006b96:	f1bb 0f00 	cmp.w	fp, #0
 8006b9a:	f040 8098 	bne.w	8006cce <__kernel_rem_pio2+0x676>
 8006b9e:	9b04      	ldr	r3, [sp, #16]
 8006ba0:	e9c3 7800 	strd	r7, r8, [r3]
 8006ba4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006ba8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006bac:	e7c6      	b.n	8006b3c <__kernel_rem_pio2+0x4e4>
 8006bae:	9e05      	ldr	r6, [sp, #20]
 8006bb0:	ab48      	add	r3, sp, #288	; 0x120
 8006bb2:	441e      	add	r6, r3
 8006bb4:	462c      	mov	r4, r5
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	2c00      	cmp	r4, #0
 8006bbc:	da33      	bge.n	8006c26 <__kernel_rem_pio2+0x5ce>
 8006bbe:	f1bb 0f00 	cmp.w	fp, #0
 8006bc2:	d036      	beq.n	8006c32 <__kernel_rem_pio2+0x5da>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bca:	9c04      	ldr	r4, [sp, #16]
 8006bcc:	e9c4 2300 	strd	r2, r3, [r4]
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006bd8:	f7f9 fb1a 	bl	8000210 <__aeabi_dsub>
 8006bdc:	ae4a      	add	r6, sp, #296	; 0x128
 8006bde:	2401      	movs	r4, #1
 8006be0:	42a5      	cmp	r5, r4
 8006be2:	da29      	bge.n	8006c38 <__kernel_rem_pio2+0x5e0>
 8006be4:	f1bb 0f00 	cmp.w	fp, #0
 8006be8:	d002      	beq.n	8006bf0 <__kernel_rem_pio2+0x598>
 8006bea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bee:	4619      	mov	r1, r3
 8006bf0:	9b04      	ldr	r3, [sp, #16]
 8006bf2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006bf6:	e7a1      	b.n	8006b3c <__kernel_rem_pio2+0x4e4>
 8006bf8:	9c05      	ldr	r4, [sp, #20]
 8006bfa:	ab48      	add	r3, sp, #288	; 0x120
 8006bfc:	441c      	add	r4, r3
 8006bfe:	2000      	movs	r0, #0
 8006c00:	2100      	movs	r1, #0
 8006c02:	2d00      	cmp	r5, #0
 8006c04:	da09      	bge.n	8006c1a <__kernel_rem_pio2+0x5c2>
 8006c06:	f1bb 0f00 	cmp.w	fp, #0
 8006c0a:	d002      	beq.n	8006c12 <__kernel_rem_pio2+0x5ba>
 8006c0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c10:	4619      	mov	r1, r3
 8006c12:	9b04      	ldr	r3, [sp, #16]
 8006c14:	e9c3 0100 	strd	r0, r1, [r3]
 8006c18:	e790      	b.n	8006b3c <__kernel_rem_pio2+0x4e4>
 8006c1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006c1e:	f7f9 faf9 	bl	8000214 <__adddf3>
 8006c22:	3d01      	subs	r5, #1
 8006c24:	e7ed      	b.n	8006c02 <__kernel_rem_pio2+0x5aa>
 8006c26:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006c2a:	f7f9 faf3 	bl	8000214 <__adddf3>
 8006c2e:	3c01      	subs	r4, #1
 8006c30:	e7c3      	b.n	8006bba <__kernel_rem_pio2+0x562>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	e7c8      	b.n	8006bca <__kernel_rem_pio2+0x572>
 8006c38:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006c3c:	f7f9 faea 	bl	8000214 <__adddf3>
 8006c40:	3401      	adds	r4, #1
 8006c42:	e7cd      	b.n	8006be0 <__kernel_rem_pio2+0x588>
 8006c44:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c48:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006c4c:	9b00      	ldr	r3, [sp, #0]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	4632      	mov	r2, r6
 8006c54:	463b      	mov	r3, r7
 8006c56:	4640      	mov	r0, r8
 8006c58:	4649      	mov	r1, r9
 8006c5a:	f7f9 fadb 	bl	8000214 <__adddf3>
 8006c5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4640      	mov	r0, r8
 8006c68:	4649      	mov	r1, r9
 8006c6a:	f7f9 fad1 	bl	8000210 <__aeabi_dsub>
 8006c6e:	4632      	mov	r2, r6
 8006c70:	463b      	mov	r3, r7
 8006c72:	f7f9 facf 	bl	8000214 <__adddf3>
 8006c76:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006c7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c7e:	ed8a 7b00 	vstr	d7, [sl]
 8006c82:	e770      	b.n	8006b66 <__kernel_rem_pio2+0x50e>
 8006c84:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006c88:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	4632      	mov	r2, r6
 8006c90:	463b      	mov	r3, r7
 8006c92:	4649      	mov	r1, r9
 8006c94:	f7f9 fabe 	bl	8000214 <__adddf3>
 8006c98:	e9cd 0100 	strd	r0, r1, [sp]
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	f7f9 fab4 	bl	8000210 <__aeabi_dsub>
 8006ca8:	4632      	mov	r2, r6
 8006caa:	463b      	mov	r3, r7
 8006cac:	f7f9 fab2 	bl	8000214 <__adddf3>
 8006cb0:	ed9d 7b00 	vldr	d7, [sp]
 8006cb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006cb8:	ed84 7b00 	vstr	d7, [r4]
 8006cbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cc0:	e757      	b.n	8006b72 <__kernel_rem_pio2+0x51a>
 8006cc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006cc6:	f7f9 faa5 	bl	8000214 <__adddf3>
 8006cca:	3d01      	subs	r5, #1
 8006ccc:	e75c      	b.n	8006b88 <__kernel_rem_pio2+0x530>
 8006cce:	9b04      	ldr	r3, [sp, #16]
 8006cd0:	9a04      	ldr	r2, [sp, #16]
 8006cd2:	601f      	str	r7, [r3, #0]
 8006cd4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006cd8:	605c      	str	r4, [r3, #4]
 8006cda:	609d      	str	r5, [r3, #8]
 8006cdc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006ce0:	60d3      	str	r3, [r2, #12]
 8006ce2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ce6:	6110      	str	r0, [r2, #16]
 8006ce8:	6153      	str	r3, [r2, #20]
 8006cea:	e727      	b.n	8006b3c <__kernel_rem_pio2+0x4e4>
 8006cec:	41700000 	.word	0x41700000
 8006cf0:	3e700000 	.word	0x3e700000
 8006cf4:	00000000 	.word	0x00000000

08006cf8 <scalbn>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	ec55 4b10 	vmov	r4, r5, d0
 8006cfe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006d02:	4606      	mov	r6, r0
 8006d04:	462b      	mov	r3, r5
 8006d06:	b999      	cbnz	r1, 8006d30 <scalbn+0x38>
 8006d08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006d0c:	4323      	orrs	r3, r4
 8006d0e:	d03f      	beq.n	8006d90 <scalbn+0x98>
 8006d10:	4b35      	ldr	r3, [pc, #212]	; (8006de8 <scalbn+0xf0>)
 8006d12:	4629      	mov	r1, r5
 8006d14:	ee10 0a10 	vmov	r0, s0
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f7f9 fc31 	bl	8000580 <__aeabi_dmul>
 8006d1e:	4b33      	ldr	r3, [pc, #204]	; (8006dec <scalbn+0xf4>)
 8006d20:	429e      	cmp	r6, r3
 8006d22:	4604      	mov	r4, r0
 8006d24:	460d      	mov	r5, r1
 8006d26:	da10      	bge.n	8006d4a <scalbn+0x52>
 8006d28:	a327      	add	r3, pc, #156	; (adr r3, 8006dc8 <scalbn+0xd0>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	e01f      	b.n	8006d70 <scalbn+0x78>
 8006d30:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006d34:	4291      	cmp	r1, r2
 8006d36:	d10c      	bne.n	8006d52 <scalbn+0x5a>
 8006d38:	ee10 2a10 	vmov	r2, s0
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	4629      	mov	r1, r5
 8006d40:	f7f9 fa68 	bl	8000214 <__adddf3>
 8006d44:	4604      	mov	r4, r0
 8006d46:	460d      	mov	r5, r1
 8006d48:	e022      	b.n	8006d90 <scalbn+0x98>
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006d50:	3936      	subs	r1, #54	; 0x36
 8006d52:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006d56:	4296      	cmp	r6, r2
 8006d58:	dd0d      	ble.n	8006d76 <scalbn+0x7e>
 8006d5a:	2d00      	cmp	r5, #0
 8006d5c:	a11c      	add	r1, pc, #112	; (adr r1, 8006dd0 <scalbn+0xd8>)
 8006d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d62:	da02      	bge.n	8006d6a <scalbn+0x72>
 8006d64:	a11c      	add	r1, pc, #112	; (adr r1, 8006dd8 <scalbn+0xe0>)
 8006d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d6a:	a319      	add	r3, pc, #100	; (adr r3, 8006dd0 <scalbn+0xd8>)
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	f7f9 fc06 	bl	8000580 <__aeabi_dmul>
 8006d74:	e7e6      	b.n	8006d44 <scalbn+0x4c>
 8006d76:	1872      	adds	r2, r6, r1
 8006d78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006d7c:	428a      	cmp	r2, r1
 8006d7e:	dcec      	bgt.n	8006d5a <scalbn+0x62>
 8006d80:	2a00      	cmp	r2, #0
 8006d82:	dd08      	ble.n	8006d96 <scalbn+0x9e>
 8006d84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d90:	ec45 4b10 	vmov	d0, r4, r5
 8006d94:	bd70      	pop	{r4, r5, r6, pc}
 8006d96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006d9a:	da08      	bge.n	8006dae <scalbn+0xb6>
 8006d9c:	2d00      	cmp	r5, #0
 8006d9e:	a10a      	add	r1, pc, #40	; (adr r1, 8006dc8 <scalbn+0xd0>)
 8006da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006da4:	dac0      	bge.n	8006d28 <scalbn+0x30>
 8006da6:	a10e      	add	r1, pc, #56	; (adr r1, 8006de0 <scalbn+0xe8>)
 8006da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dac:	e7bc      	b.n	8006d28 <scalbn+0x30>
 8006dae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006db2:	3236      	adds	r2, #54	; 0x36
 8006db4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006db8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <scalbn+0xf8>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	e7d5      	b.n	8006d70 <scalbn+0x78>
 8006dc4:	f3af 8000 	nop.w
 8006dc8:	c2f8f359 	.word	0xc2f8f359
 8006dcc:	01a56e1f 	.word	0x01a56e1f
 8006dd0:	8800759c 	.word	0x8800759c
 8006dd4:	7e37e43c 	.word	0x7e37e43c
 8006dd8:	8800759c 	.word	0x8800759c
 8006ddc:	fe37e43c 	.word	0xfe37e43c
 8006de0:	c2f8f359 	.word	0xc2f8f359
 8006de4:	81a56e1f 	.word	0x81a56e1f
 8006de8:	43500000 	.word	0x43500000
 8006dec:	ffff3cb0 	.word	0xffff3cb0
 8006df0:	3c900000 	.word	0x3c900000
 8006df4:	00000000 	.word	0x00000000

08006df8 <floor>:
 8006df8:	ec51 0b10 	vmov	r0, r1, d0
 8006dfc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e04:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006e08:	2e13      	cmp	r6, #19
 8006e0a:	ee10 5a10 	vmov	r5, s0
 8006e0e:	ee10 8a10 	vmov	r8, s0
 8006e12:	460c      	mov	r4, r1
 8006e14:	dc31      	bgt.n	8006e7a <floor+0x82>
 8006e16:	2e00      	cmp	r6, #0
 8006e18:	da14      	bge.n	8006e44 <floor+0x4c>
 8006e1a:	a333      	add	r3, pc, #204	; (adr r3, 8006ee8 <floor+0xf0>)
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	f7f9 f9f8 	bl	8000214 <__adddf3>
 8006e24:	2200      	movs	r2, #0
 8006e26:	2300      	movs	r3, #0
 8006e28:	f7f9 fe3a 	bl	8000aa0 <__aeabi_dcmpgt>
 8006e2c:	b138      	cbz	r0, 8006e3e <floor+0x46>
 8006e2e:	2c00      	cmp	r4, #0
 8006e30:	da53      	bge.n	8006eda <floor+0xe2>
 8006e32:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006e36:	4325      	orrs	r5, r4
 8006e38:	d052      	beq.n	8006ee0 <floor+0xe8>
 8006e3a:	4c2d      	ldr	r4, [pc, #180]	; (8006ef0 <floor+0xf8>)
 8006e3c:	2500      	movs	r5, #0
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4628      	mov	r0, r5
 8006e42:	e024      	b.n	8006e8e <floor+0x96>
 8006e44:	4f2b      	ldr	r7, [pc, #172]	; (8006ef4 <floor+0xfc>)
 8006e46:	4137      	asrs	r7, r6
 8006e48:	ea01 0307 	and.w	r3, r1, r7
 8006e4c:	4303      	orrs	r3, r0
 8006e4e:	d01e      	beq.n	8006e8e <floor+0x96>
 8006e50:	a325      	add	r3, pc, #148	; (adr r3, 8006ee8 <floor+0xf0>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 f9dd 	bl	8000214 <__adddf3>
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f7f9 fe1f 	bl	8000aa0 <__aeabi_dcmpgt>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d0eb      	beq.n	8006e3e <floor+0x46>
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	bfbe      	ittt	lt
 8006e6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006e6e:	4133      	asrlt	r3, r6
 8006e70:	18e4      	addlt	r4, r4, r3
 8006e72:	ea24 0407 	bic.w	r4, r4, r7
 8006e76:	2500      	movs	r5, #0
 8006e78:	e7e1      	b.n	8006e3e <floor+0x46>
 8006e7a:	2e33      	cmp	r6, #51	; 0x33
 8006e7c:	dd0b      	ble.n	8006e96 <floor+0x9e>
 8006e7e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006e82:	d104      	bne.n	8006e8e <floor+0x96>
 8006e84:	ee10 2a10 	vmov	r2, s0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	f7f9 f9c3 	bl	8000214 <__adddf3>
 8006e8e:	ec41 0b10 	vmov	d0, r0, r1
 8006e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e96:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006e9a:	f04f 37ff 	mov.w	r7, #4294967295
 8006e9e:	40df      	lsrs	r7, r3
 8006ea0:	4238      	tst	r0, r7
 8006ea2:	d0f4      	beq.n	8006e8e <floor+0x96>
 8006ea4:	a310      	add	r3, pc, #64	; (adr r3, 8006ee8 <floor+0xf0>)
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f7f9 f9b3 	bl	8000214 <__adddf3>
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f7f9 fdf5 	bl	8000aa0 <__aeabi_dcmpgt>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d0c1      	beq.n	8006e3e <floor+0x46>
 8006eba:	2c00      	cmp	r4, #0
 8006ebc:	da0a      	bge.n	8006ed4 <floor+0xdc>
 8006ebe:	2e14      	cmp	r6, #20
 8006ec0:	d101      	bne.n	8006ec6 <floor+0xce>
 8006ec2:	3401      	adds	r4, #1
 8006ec4:	e006      	b.n	8006ed4 <floor+0xdc>
 8006ec6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006eca:	2301      	movs	r3, #1
 8006ecc:	40b3      	lsls	r3, r6
 8006ece:	441d      	add	r5, r3
 8006ed0:	45a8      	cmp	r8, r5
 8006ed2:	d8f6      	bhi.n	8006ec2 <floor+0xca>
 8006ed4:	ea25 0507 	bic.w	r5, r5, r7
 8006ed8:	e7b1      	b.n	8006e3e <floor+0x46>
 8006eda:	2500      	movs	r5, #0
 8006edc:	462c      	mov	r4, r5
 8006ede:	e7ae      	b.n	8006e3e <floor+0x46>
 8006ee0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006ee4:	e7ab      	b.n	8006e3e <floor+0x46>
 8006ee6:	bf00      	nop
 8006ee8:	8800759c 	.word	0x8800759c
 8006eec:	7e37e43c 	.word	0x7e37e43c
 8006ef0:	bff00000 	.word	0xbff00000
 8006ef4:	000fffff 	.word	0x000fffff

08006ef8 <_init>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	bf00      	nop
 8006efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efe:	bc08      	pop	{r3}
 8006f00:	469e      	mov	lr, r3
 8006f02:	4770      	bx	lr

08006f04 <_fini>:
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	bf00      	nop
 8006f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0a:	bc08      	pop	{r3}
 8006f0c:	469e      	mov	lr, r3
 8006f0e:	4770      	bx	lr
